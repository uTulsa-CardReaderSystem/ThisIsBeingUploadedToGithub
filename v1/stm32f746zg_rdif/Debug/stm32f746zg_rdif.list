
stm32f746zg_rdif.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ca8  08010474  08010474  00020474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801311c  0801311c  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  0801311c  0801311c  0002311c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013124  08013124  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013124  08013124  00023124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013128  08013128  00023128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0801312c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008ae0  20000078  080131a4  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008b58  080131a4  00038b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023337  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055f9  00000000  00000000  000533df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  000589d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001818  00000000  00000000  0005a2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000325f0  00000000  00000000  0005bab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a244  00000000  00000000  0008e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109d84  00000000  00000000  000b82ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c2070  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006edc  00000000  00000000  001c20c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801045c 	.word	0x0801045c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0801045c 	.word	0x0801045c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <SCB_EnableICache+0x48>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005cc:	f3bf 8f4f 	dsb	sy
}
 80005d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d2:	f3bf 8f6f 	isb	sy
}
 80005d6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <SCB_EnableICache+0x48>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <SCB_EnableICache+0x48>)
 80005de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005e4:	f3bf 8f4f 	dsb	sy
}
 80005e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ea:	f3bf 8f6f 	isb	sy
}
 80005ee:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SCB_EnableDCache+0x84>)
 8000608:	2200      	movs	r2, #0
 800060a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800060e:	f3bf 8f4f 	dsb	sy
}
 8000612:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <SCB_EnableDCache+0x84>)
 8000616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800061a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	0b5b      	lsrs	r3, r3, #13
 8000620:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000624:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800062e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	015a      	lsls	r2, r3, #5
 8000634:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000638:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800063e:	4911      	ldr	r1, [pc, #68]	; (8000684 <SCB_EnableDCache+0x84>)
 8000640:	4313      	orrs	r3, r2
 8000642:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	1e5a      	subs	r2, r3, #1
 800064a:	60ba      	str	r2, [r7, #8]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1ef      	bne.n	8000630 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	1e5a      	subs	r2, r3, #1
 8000654:	60fa      	str	r2, [r7, #12]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1e5      	bne.n	8000626 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800065a:	f3bf 8f4f 	dsb	sy
}
 800065e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SCB_EnableDCache+0x84>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <SCB_EnableDCache+0x84>)
 8000666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000672:	f3bf 8f6f 	isb	sy
}
 8000676:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
//	  IP_ADDRESS[3] = 51;

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800068c:	f7ff ff92 	bl	80005b4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000690:	f7ff ffb6 	bl	8000600 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f000 fdb1 	bl	80011fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f810 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 f916 	bl	80008cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006a0:	f000 f8e4 	bl	800086c <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80006a4:	f004 fba2 	bl	8004dec <MX_LWIP_Init>
  MX_TIM1_Init();
 80006a8:	f000 f874 	bl	8000794 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //extern IP_ADDRESS; // This allows IP address to be grabbed; updates automatically. USE THIS

 HAL_TIM_Base_Start_IT(&htim1);
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <main+0x30>)
 80006ae:	f003 fb71 	bl	8003d94 <HAL_TIM_Base_Start_IT>

 tcp_client_init();
 80006b2:	f000 fc0f 	bl	8000ed4 <tcp_client_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <main+0x2e>
 80006b8:	20000094 	.word	0x20000094

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f00e fe6e 	bl	800f3ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	4b2a      	ldr	r3, [pc, #168]	; (800078c <SystemClock_Config+0xd0>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a29      	ldr	r2, [pc, #164]	; (800078c <SystemClock_Config+0xd0>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <SystemClock_Config+0xd0>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xd4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000700:	4a23      	ldr	r2, [pc, #140]	; (8000790 <SystemClock_Config+0xd4>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemClock_Config+0xd4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000714:	2301      	movs	r3, #1
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000728:	2304      	movs	r3, #4
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800072c:	2332      	movs	r3, #50	; 0x32
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000734:	2303      	movs	r3, #3
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f002 fa17 	bl	8002b70 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000748:	f000 f9de 	bl	8000b08 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800074c:	f002 f9c0 	bl	8002ad0 <HAL_PWREx_EnableOverDrive>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000756:	f000 f9d7 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2101      	movs	r1, #1
 8000774:	4618      	mov	r0, r3
 8000776:	f002 fc9f 	bl	80030b8 <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000780:	f000 f9c2 	bl	8000b08 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3750      	adds	r7, #80	; 0x50
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c2:	4b28      	ldr	r3, [pc, #160]	; (8000864 <MX_TIM1_Init+0xd0>)
 80007c4:	4a28      	ldr	r2, [pc, #160]	; (8000868 <MX_TIM1_Init+0xd4>)
 80007c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65535;
 80007c8:	4b26      	ldr	r3, [pc, #152]	; (8000864 <MX_TIM1_Init+0xd0>)
 80007ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b24      	ldr	r3, [pc, #144]	; (8000864 <MX_TIM1_Init+0xd0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_TIM1_Init+0xd0>)
 80007d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <MX_TIM1_Init+0xd0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_TIM1_Init+0xd0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_TIM1_Init+0xd0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007f0:	481c      	ldr	r0, [pc, #112]	; (8000864 <MX_TIM1_Init+0xd0>)
 80007f2:	f003 fa77 	bl	8003ce4 <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80007fc:	f000 f984 	bl	8000b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	4619      	mov	r1, r3
 800080c:	4815      	ldr	r0, [pc, #84]	; (8000864 <MX_TIM1_Init+0xd0>)
 800080e:	f003 fb39 	bl	8003e84 <HAL_TIM_ConfigClockSource>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000818:	f000 f976 	bl	8000b08 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	480e      	ldr	r0, [pc, #56]	; (8000864 <MX_TIM1_Init+0xd0>)
 800082c:	f003 fbf4 	bl	8004018 <HAL_TIM_SlaveConfigSynchro>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000836:	f000 f967 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <MX_TIM1_Init+0xd0>)
 800084c:	f003 fdf4 	bl	8004438 <HAL_TIMEx_MasterConfigSynchronization>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000856:	f000 f957 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	3730      	adds	r7, #48	; 0x30
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000094 	.word	0x20000094
 8000868:	40010000 	.word	0x40010000

0800086c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000872:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <MX_USART3_UART_Init+0x5c>)
 8000874:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000878:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800087c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 80008b0:	f003 fe50 	bl	8004554 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008ba:	f000 f925 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000e0 	.word	0x200000e0
 80008c8:	40004800 	.word	0x40004800

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	; 0x30
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b83      	ldr	r3, [pc, #524]	; (8000af0 <MX_GPIO_Init+0x224>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a82      	ldr	r2, [pc, #520]	; (8000af0 <MX_GPIO_Init+0x224>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b80      	ldr	r3, [pc, #512]	; (8000af0 <MX_GPIO_Init+0x224>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	61bb      	str	r3, [r7, #24]
 80008f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	4b7d      	ldr	r3, [pc, #500]	; (8000af0 <MX_GPIO_Init+0x224>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a7c      	ldr	r2, [pc, #496]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b7a      	ldr	r3, [pc, #488]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b77      	ldr	r3, [pc, #476]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a76      	ldr	r2, [pc, #472]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b74      	ldr	r3, [pc, #464]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b71      	ldr	r3, [pc, #452]	; (8000af0 <MX_GPIO_Init+0x224>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a70      	ldr	r2, [pc, #448]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b6e      	ldr	r3, [pc, #440]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000942:	4b6b      	ldr	r3, [pc, #428]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a6a      	ldr	r2, [pc, #424]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000948:	f043 0310 	orr.w	r3, r3, #16
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b68      	ldr	r3, [pc, #416]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0310 	and.w	r3, r3, #16
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	4b65      	ldr	r3, [pc, #404]	; (8000af0 <MX_GPIO_Init+0x224>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a64      	ldr	r2, [pc, #400]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b62      	ldr	r3, [pc, #392]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000972:	4b5f      	ldr	r3, [pc, #380]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a5e      	ldr	r2, [pc, #376]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b5c      	ldr	r3, [pc, #368]	; (8000af0 <MX_GPIO_Init+0x224>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000990:	4858      	ldr	r0, [pc, #352]	; (8000af4 <MX_GPIO_Init+0x228>)
 8000992:	f002 f85f 	bl	8002a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800099c:	4856      	ldr	r0, [pc, #344]	; (8000af8 <MX_GPIO_Init+0x22c>)
 800099e:	f002 f859 	bl	8002a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	4855      	ldr	r0, [pc, #340]	; (8000afc <MX_GPIO_Init+0x230>)
 80009a8:	f002 f854 	bl	8002a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2180      	movs	r1, #128	; 0x80
 80009b0:	4853      	ldr	r0, [pc, #332]	; (8000b00 <MX_GPIO_Init+0x234>)
 80009b2:	f002 f84f 	bl	8002a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009bc:	4851      	ldr	r0, [pc, #324]	; (8000b04 <MX_GPIO_Init+0x238>)
 80009be:	f002 f849 	bl	8002a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4849      	ldr	r0, [pc, #292]	; (8000b00 <MX_GPIO_Init+0x234>)
 80009da:	f001 fe8f 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	483f      	ldr	r0, [pc, #252]	; (8000af4 <MX_GPIO_Init+0x228>)
 80009f8:	f001 fe80 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80009fc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4838      	ldr	r0, [pc, #224]	; (8000af8 <MX_GPIO_Init+0x22c>)
 8000a16:	f001 fe71 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a1a:	2340      	movs	r3, #64	; 0x40
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4832      	ldr	r0, [pc, #200]	; (8000afc <MX_GPIO_Init+0x230>)
 8000a32:	f001 fe63 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a36:	2380      	movs	r3, #128	; 0x80
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	482c      	ldr	r0, [pc, #176]	; (8000afc <MX_GPIO_Init+0x230>)
 8000a4a:	f001 fe57 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4826      	ldr	r0, [pc, #152]	; (8000b00 <MX_GPIO_Init+0x234>)
 8000a66:	f001 fe49 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a6a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a7c:	230a      	movs	r3, #10
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	481f      	ldr	r0, [pc, #124]	; (8000b04 <MX_GPIO_Init+0x238>)
 8000a88:	f001 fe38 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4817      	ldr	r0, [pc, #92]	; (8000b04 <MX_GPIO_Init+0x238>)
 8000aa6:	f001 fe29 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_GPIO_Init+0x22c>)
 8000ac2:	f001 fe1b 	bl	80026fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2017      	movs	r0, #23
 8000acc:	f000 fcf1 	bl	80014b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ad0:	2017      	movs	r0, #23
 8000ad2:	f000 fd0a 	bl	80014ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2028      	movs	r0, #40	; 0x28
 8000adc:	f000 fce9 	bl	80014b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ae0:	2028      	movs	r0, #40	; 0x28
 8000ae2:	f000 fd02 	bl	80014ea <HAL_NVIC_EnableIRQ>

}
 8000ae6:	bf00      	nop
 8000ae8:	3730      	adds	r7, #48	; 0x30
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40020400 	.word	0x40020400
 8000afc:	40021800 	.word	0x40021800
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020000 	.word	0x40020000

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <Error_Handler+0x8>
	...

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_MspInit+0x64>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <HAL_MspInit+0x64>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <HAL_MspInit+0x64>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_MspInit+0x64>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_MspInit+0x64>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_MspInit+0x64>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b4a:	2007      	movs	r0, #7
 8000b4c:	f000 fca6 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2005      	movs	r0, #5
 8000b56:	f000 fcac 	bl	80014b2 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000b5a:	2005      	movs	r0, #5
 8000b5c:	f000 fcc5 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	2005      	movs	r0, #5
 8000b66:	f000 fca4 	bl	80014b2 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000b6a:	2005      	movs	r0, #5
 8000b6c:	f000 fcbd 	bl	80014ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_TIM_Base_MspInit+0x38>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d10b      	bne.n	8000ba6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40010000 	.word	0x40010000
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0aa      	sub	sp, #168	; 0xa8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	2284      	movs	r2, #132	; 0x84
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f00e fbe5 	bl	800f3ac <memset>
  if(huart->Instance==USART3)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a22      	ldr	r2, [pc, #136]	; (8000c70 <HAL_UART_MspInit+0xb4>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d13c      	bne.n	8000c66 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f002 fc82 	bl	8003504 <HAL_RCCEx_PeriphCLKConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c06:	f7ff ff7f 	bl	8000b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c54:	2307      	movs	r3, #7
 8000c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_UART_MspInit+0xbc>)
 8000c62:	f001 fd4b 	bl	80026fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	37a8      	adds	r7, #168	; 0xa8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40004800 	.word	0x40004800
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020c00 	.word	0x40020c00

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 fad4 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000ce2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ce6:	f001 fecf 	bl	8002a88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000cea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cee:	f001 fecb 	bl	8002a88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000cfa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfe:	f001 fec3 	bl	8002a88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <ETH_IRQHandler+0x10>)
 8000d0e:	f000 ff5d 	bl	8001bcc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20003264 	.word	0x20003264

08000d1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
	return 1;
 8000d20:	2301      	movs	r3, #1
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_kill>:

int _kill(int pid, int sig)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <_kill+0x20>)
 8000d38:	2216      	movs	r2, #22
 8000d3a:	601a      	str	r2, [r3, #0]
	return -1;
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20008b48 	.word	0x20008b48

08000d50 <_exit>:

void _exit (int status)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ffe5 	bl	8000d2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d62:	e7fe      	b.n	8000d62 <_exit+0x12>

08000d64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	e00a      	b.n	8000d8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d76:	f3af 8000 	nop.w
 8000d7a:	4601      	mov	r1, r0
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	60ba      	str	r2, [r7, #8]
 8000d82:	b2ca      	uxtb	r2, r1
 8000d84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dbf0      	blt.n	8000d76 <_read+0x12>
	}

return len;
 8000d94:	687b      	ldr	r3, [r7, #4]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	e009      	b.n	8000dc4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	60ba      	str	r2, [r7, #8]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dbf1      	blt.n	8000db0 <_write+0x12>
	}
	return len;
 8000dcc:	687b      	ldr	r3, [r7, #4]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <_close>:

int _close(int file)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
	return -1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dfe:	605a      	str	r2, [r3, #4]
	return 0;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <_isatty>:

int _isatty(int file)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
	return 1;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <_sbrk+0x5c>)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <_sbrk+0x60>)
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x64>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <_sbrk+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d205      	bcs.n	8000e7c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <_sbrk+0x6c>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	e009      	b.n	8000e90 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <_sbrk+0x64>)
 8000e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	20050000 	.word	0x20050000
 8000ea0:	00000400 	.word	0x00000400
 8000ea4:	20000164 	.word	0x20000164
 8000ea8:	20008b58 	.word	0x20008b58
 8000eac:	20008b48 	.word	0x20008b48

08000eb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <SystemInit+0x20>)
 8000eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <SystemInit+0x20>)
 8000ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <tcp_client_init>:
2. connect to the server
3. start communicating
*/

void tcp_client_init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8000eda:	f007 fbd3 	bl	8008684 <tcp_new>
 8000ede:	6078      	str	r0, [r7, #4]

	/* 2. Connect to the server */
	ip_addr_t destIPADDR;
	IP_ADDR4(&destIPADDR, 129,244,42,138);
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <tcp_client_init+0x30>)
 8000ee2:	603b      	str	r3, [r7, #0]
	printf("here");
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <tcp_client_init+0x34>)
 8000ee6:	f00e fa69 	bl	800f3bc <iprintf>
	tcp_connect(tpcb, &destIPADDR, 23, tcp_client_connected);
 8000eea:	4639      	mov	r1, r7
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <tcp_client_init+0x38>)
 8000eee:	2217      	movs	r2, #23
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f006 fc8d 	bl	8007810 <tcp_connect>
	printf("connected?");
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <tcp_client_init+0x3c>)
 8000ef8:	f00e fa60 	bl	800f3bc <iprintf>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	8a2af481 	.word	0x8a2af481
 8000f08:	08010494 	.word	0x08010494
 8000f0c:	08000f15 	.word	0x08000f15
 8000f10:	0801049c 	.word	0x0801049c

08000f14 <tcp_client_connected>:
/** This callback is called, when the client is connected to the server
 * Here we will initialise few other callbacks
 * and in the end, call the client handle function
  */
static err_t tcp_client_connected(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_client_struct *)mem_malloc(sizeof(struct tcp_client_struct));
 8000f22:	200c      	movs	r0, #12
 8000f24:	f004 fe44 	bl	8005bb0 <mem_malloc>
 8000f28:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d023      	beq.n	8000f78 <tcp_client_connected+0x64>
  {
    es->state = ES_CONNECTED;
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000f48:	6939      	ldr	r1, [r7, #16]
 8000f4a:	68b8      	ldr	r0, [r7, #8]
 8000f4c:	f007 fba2 	bl	8008694 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_client_recv);
 8000f50:	490f      	ldr	r1, [pc, #60]	; (8000f90 <tcp_client_connected+0x7c>)
 8000f52:	68b8      	ldr	r0, [r7, #8]
 8000f54:	f007 fbb0 	bl	80086b8 <tcp_recv>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_client_poll, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	490e      	ldr	r1, [pc, #56]	; (8000f94 <tcp_client_connected+0x80>)
 8000f5c:	68b8      	ldr	r0, [r7, #8]
 8000f5e:	f007 fc11 	bl	8008784 <tcp_poll>


    /* initialize LwIP tcp_sent callback function */
    tcp_sent(newpcb, tcp_client_sent);
 8000f62:	490d      	ldr	r1, [pc, #52]	; (8000f98 <tcp_client_connected+0x84>)
 8000f64:	68b8      	ldr	r0, [r7, #8]
 8000f66:	f007 fbc9 	bl	80086fc <tcp_sent>

    /* handle the TCP data */
    tcp_client_handle(newpcb, es);
 8000f6a:	6939      	ldr	r1, [r7, #16]
 8000f6c:	68b8      	ldr	r0, [r7, #8]
 8000f6e:	f000 f8f5 	bl	800115c <tcp_client_handle>

    ret_err = ERR_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	75fb      	strb	r3, [r7, #23]
 8000f76:	e005      	b.n	8000f84 <tcp_client_connected+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_client_connection_close(newpcb, es);
 8000f78:	6939      	ldr	r1, [r7, #16]
 8000f7a:	68b8      	ldr	r0, [r7, #8]
 8000f7c:	f000 f8c7 	bl	800110e <tcp_client_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000f80:	23ff      	movs	r3, #255	; 0xff
 8000f82:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000f84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	08000f9d 	.word	0x08000f9d
 8000f94:	0800108d 	.word	0x0800108d
 8000f98:	080010d5 	.word	0x080010d5

08000f9c <tcp_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
  */
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	70fb      	strb	r3, [r7, #3]
  struct tcp_client_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d105      	bne.n	8000fbc <tcp_client_recv+0x20>
 8000fb0:	4b33      	ldr	r3, [pc, #204]	; (8001080 <tcp_client_recv+0xe4>)
 8000fb2:	22e3      	movs	r2, #227	; 0xe3
 8000fb4:	4933      	ldr	r1, [pc, #204]	; (8001084 <tcp_client_recv+0xe8>)
 8000fb6:	4834      	ldr	r0, [pc, #208]	; (8001088 <tcp_client_recv+0xec>)
 8000fb8:	f00e fa00 	bl	800f3bc <iprintf>

  es = (struct tcp_client_struct *)arg;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	613b      	str	r3, [r7, #16]

  /* if we receive an empty tcp frame from server => close connection */
  if (p == NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10d      	bne.n	8000fe2 <tcp_client_recv+0x46>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	2203      	movs	r2, #3
 8000fca:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d103      	bne.n	8000fdc <tcp_client_recv+0x40>
    {
       /* we're done sending, close connection */
       tcp_client_connection_close(tpcb, es);
 8000fd4:	6939      	ldr	r1, [r7, #16]
 8000fd6:	68b8      	ldr	r0, [r7, #8]
 8000fd8:	f000 f899 	bl	800110e <tcp_client_connection_close>
//      tcp_sent(tpcb, tcp_client_sent);

      /* send remaining data*/
//      tcp_client_send(tpcb, es);
    }
    ret_err = ERR_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	75fb      	strb	r3, [r7, #23]
 8000fe0:	e047      	b.n	8001072 <tcp_client_recv+0xd6>
  }
  /* else : a non empty frame was received from server but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00b      	beq.n	8001002 <tcp_client_recv+0x66>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d005      	beq.n	8000ffc <tcp_client_recv+0x60>
    {
      es->p = NULL;
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f005 fd86 	bl	8006b08 <pbuf_free>
    }
    ret_err = err;
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	75fb      	strb	r3, [r7, #23]
 8001000:	e037      	b.n	8001072 <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CONNECTED)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d112      	bne.n	8001030 <tcp_client_recv+0x94>
  {
   /* store reference to incoming pbuf (chain) */
    es->p = p;
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	609a      	str	r2, [r3, #8]
    // tcp_sent has already been initialized in the beginning.
//    /* initialize LwIP tcp_sent callback function */
//    tcp_sent(tpcb, tcp_client_sent);

    /* Acknowledge the received data */
    tcp_recved(tpcb, p->tot_len);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	891b      	ldrh	r3, [r3, #8]
 8001014:	4619      	mov	r1, r3
 8001016:	68b8      	ldr	r0, [r7, #8]
 8001018:	f006 fb64 	bl	80076e4 <tcp_recved>

    /* handle the received data */
    tcp_client_handle(tpcb, es);
 800101c:	6939      	ldr	r1, [r7, #16]
 800101e:	68b8      	ldr	r0, [r7, #8]
 8001020:	f000 f89c 	bl	800115c <tcp_client_handle>

    pbuf_free(p);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f005 fd6f 	bl	8006b08 <pbuf_free>

    ret_err = ERR_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	75fb      	strb	r3, [r7, #23]
 800102e:	e020      	b.n	8001072 <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CLOSING)
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b03      	cmp	r3, #3
 8001036:	d10e      	bne.n	8001056 <tcp_client_recv+0xba>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	891b      	ldrh	r3, [r3, #8]
 800103c:	4619      	mov	r1, r3
 800103e:	68b8      	ldr	r0, [r7, #8]
 8001040:	f006 fb50 	bl	80076e4 <tcp_recved>
    es->p = NULL;
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f005 fd5c 	bl	8006b08 <pbuf_free>
    ret_err = ERR_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	75fb      	strb	r3, [r7, #23]
 8001054:	e00d      	b.n	8001072 <tcp_client_recv+0xd6>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	891b      	ldrh	r3, [r3, #8]
 800105a:	4619      	mov	r1, r3
 800105c:	68b8      	ldr	r0, [r7, #8]
 800105e:	f006 fb41 	bl	80076e4 <tcp_recved>
    es->p = NULL;
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f005 fd4d 	bl	8006b08 <pbuf_free>
    ret_err = ERR_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8001072:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	080104a8 	.word	0x080104a8
 8001084:	080104c4 	.word	0x080104c4
 8001088:	080104d0 	.word	0x080104d0

0800108c <tcp_client_poll>:


static err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_client_struct *es;

  es = (struct tcp_client_struct *)arg;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00e      	beq.n	80010be <tcp_client_poll+0x32>
  {
    if (es->p != NULL)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d107      	bne.n	80010b8 <tcp_client_poll+0x2c>
//      tcp_client_send(tpcb, es);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d103      	bne.n	80010b8 <tcp_client_poll+0x2c>
      {
        /*  close tcp connection */
        tcp_client_connection_close(tpcb, es);
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6838      	ldr	r0, [r7, #0]
 80010b4:	f000 f82b 	bl	800110e <tcp_client_connection_close>
      }
    }
    ret_err = ERR_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e004      	b.n	80010c8 <tcp_client_poll+0x3c>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 80010be:	6838      	ldr	r0, [r7, #0]
 80010c0:	f006 faaa 	bl	8007618 <tcp_abort>
    ret_err = ERR_ABRT;
 80010c4:	23f3      	movs	r3, #243	; 0xf3
 80010c6:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 80010c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <tcp_client_sent>:

/** This callback is called, when the server acknowledges the data sent by the client
 * If there is no more data left to sent, we will simply close the connection
  */
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	4613      	mov	r3, r2
 80010e0:	80fb      	strh	r3, [r7, #6]
  struct tcp_client_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_client_struct *)arg;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2200      	movs	r2, #0
 80010ea:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d107      	bne.n	8001104 <tcp_client_sent+0x30>
//    tcp_client_send(tpcb, es);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d103      	bne.n	8001104 <tcp_client_sent+0x30>
      tcp_client_connection_close(tpcb, es);
 80010fc:	6979      	ldr	r1, [r7, #20]
 80010fe:	68b8      	ldr	r0, [r7, #8]
 8001100:	f000 f805 	bl	800110e <tcp_client_connection_close>
  }
  return ERR_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <tcp_client_connection_close>:
  }
}


static void tcp_client_connection_close(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8001118:	2100      	movs	r1, #0
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f007 faba 	bl	8008694 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001120:	2100      	movs	r1, #0
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f007 faea 	bl	80086fc <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001128:	2100      	movs	r1, #0
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f007 fac4 	bl	80086b8 <tcp_recv>
  tcp_err(tpcb, NULL);
 8001130:	2100      	movs	r1, #0
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f007 fb04 	bl	8008740 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f007 fb21 	bl	8008784 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <tcp_client_connection_close+0x40>
  {
    mem_free(es);
 8001148:	6838      	ldr	r0, [r7, #0]
 800114a:	f004 fbcb 	bl	80058e4 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f006 f978 	bl	8007444 <tcp_close>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <tcp_client_handle>:

/* Handle the incoming TCP Data */

static void tcp_client_handle (struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	60fb      	str	r3, [r7, #12]
	uint16_t inPort = tpcb->remote_port;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	8b1b      	ldrh	r3, [r3, #24]
 8001170:	82fb      	strh	r3, [r7, #22]

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	4618      	mov	r0, r3
 8001178:	f00d f932 	bl	800e3e0 <ip4addr_ntoa>
 800117c:	6138      	str	r0, [r7, #16]

//	esTx->state = es->state;
//	esTx->pcb = es->pcb;
//	esTx->p = es->p;

	esTx = es;
 800117e:	4a07      	ldr	r2, [pc, #28]	; (800119c <tcp_client_handle+0x40>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <tcp_client_handle+0x44>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]

	counter++;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <tcp_client_handle+0x48>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <tcp_client_handle+0x48>)
 8001192:	6013      	str	r3, [r2, #0]

}
 8001194:	bf00      	nop
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2000016c 	.word	0x2000016c
 80011a0:	20000170 	.word	0x20000170
 80011a4:	20000168 	.word	0x20000168

080011a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ae:	490e      	ldr	r1, [pc, #56]	; (80011e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b0:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011c4:	4c0b      	ldr	r4, [pc, #44]	; (80011f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011d2:	f7ff fe6d 	bl	8000eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011d6:	f00e f8a7 	bl	800f328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011da:	f7ff fa55 	bl	8000688 <main>
  bx  lr    
 80011de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011e0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80011ec:	0801312c 	.word	0x0801312c
  ldr r2, =_sbss
 80011f0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80011f4:	20008b58 	.word	0x20008b58

080011f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC_IRQHandler>

080011fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fe:	2003      	movs	r0, #3
 8001200:	f000 f94c 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f805 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800120a:	f7ff fc83 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f967 	bl	8001506 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 f92f 	bl	80014b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	; (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000000 	.word	0x20000000
 800126c:	20000008 	.word	0x20000008
 8001270:	20000004 	.word	0x20000004

08001274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008
 8001298:	20000174 	.word	0x20000174

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000174 	.word	0x20000174

080012b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff ffee 	bl	800129c <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012cc:	d005      	beq.n	80012da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_Delay+0x44>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012da:	bf00      	nop
 80012dc:	f7ff ffde 	bl	800129c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d8f7      	bhi.n	80012dc <HAL_Delay+0x28>
  {
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008

080012fc <__NVIC_SetPriorityGrouping>:
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <__NVIC_SetPriorityGrouping+0x40>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	4313      	orrs	r3, r2
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	; (800133c <__NVIC_SetPriorityGrouping+0x40>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00
 8001340:	05fa0000 	.word	0x05fa0000

08001344 <__NVIC_GetPriorityGrouping>:
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <__NVIC_GetPriorityGrouping+0x18>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f003 0307 	and.w	r3, r3, #7
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_EnableIRQ>:
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db0b      	blt.n	800138a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	4907      	ldr	r1, [pc, #28]	; (8001398 <__NVIC_EnableIRQ+0x38>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	2001      	movs	r0, #1
 8001382:	fa00 f202 	lsl.w	r2, r0, r2
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100

0800139c <__NVIC_SetPriority>:
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	; (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	; (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001468:	d301      	bcc.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e00f      	b.n	800148e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <SysTick_Config+0x40>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f7ff ff8e 	bl	800139c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <SysTick_Config+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SysTick_Config+0x40>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff29 	bl	80012fc <__NVIC_SetPriorityGrouping>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c4:	f7ff ff3e 	bl	8001344 <__NVIC_GetPriorityGrouping>
 80014c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff8e 	bl	80013f0 <NVIC_EncodePriority>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5d 	bl	800139c <__NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff31 	bl	8001360 <__NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffa2 	bl	8001458 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001530:	4ba0      	ldr	r3, [pc, #640]	; (80017b4 <HAL_ETH_Init+0x294>)
 8001532:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e180      	b.n	8001848 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d106      	bne.n	8001560 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f003 fd78 	bl	8005050 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001560:	4b95      	ldr	r3, [pc, #596]	; (80017b8 <HAL_ETH_Init+0x298>)
 8001562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001564:	4a94      	ldr	r2, [pc, #592]	; (80017b8 <HAL_ETH_Init+0x298>)
 8001566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156a:	6453      	str	r3, [r2, #68]	; 0x44
 800156c:	4b92      	ldr	r3, [pc, #584]	; (80017b8 <HAL_ETH_Init+0x298>)
 800156e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001578:	4b90      	ldr	r3, [pc, #576]	; (80017bc <HAL_ETH_Init+0x29c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a8f      	ldr	r2, [pc, #572]	; (80017bc <HAL_ETH_Init+0x29c>)
 800157e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001582:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001584:	4b8d      	ldr	r3, [pc, #564]	; (80017bc <HAL_ETH_Init+0x29c>)
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	498b      	ldr	r1, [pc, #556]	; (80017bc <HAL_ETH_Init+0x29c>)
 800158e:	4313      	orrs	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015a8:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015aa:	f7ff fe77 	bl	800129c <HAL_GetTick>
 80015ae:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80015b0:	e011      	b.n	80015d6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80015b2:	f7ff fe73 	bl	800129c <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015c0:	d909      	bls.n	80015d6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2203      	movs	r2, #3
 80015c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e138      	b.n	8001848 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1e4      	bne.n	80015b2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f023 031c 	bic.w	r3, r3, #28
 80015f6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80015f8:	f001 ff50 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80015fc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4a6f      	ldr	r2, [pc, #444]	; (80017c0 <HAL_ETH_Init+0x2a0>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d908      	bls.n	8001618 <HAL_ETH_Init+0xf8>
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4a6e      	ldr	r2, [pc, #440]	; (80017c4 <HAL_ETH_Init+0x2a4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d804      	bhi.n	8001618 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	f043 0308 	orr.w	r3, r3, #8
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	e027      	b.n	8001668 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	4a6a      	ldr	r2, [pc, #424]	; (80017c4 <HAL_ETH_Init+0x2a4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d908      	bls.n	8001632 <HAL_ETH_Init+0x112>
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	4a64      	ldr	r2, [pc, #400]	; (80017b4 <HAL_ETH_Init+0x294>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d204      	bcs.n	8001632 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f043 030c 	orr.w	r3, r3, #12
 800162e:	61fb      	str	r3, [r7, #28]
 8001630:	e01a      	b.n	8001668 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	4a5f      	ldr	r2, [pc, #380]	; (80017b4 <HAL_ETH_Init+0x294>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d303      	bcc.n	8001642 <HAL_ETH_Init+0x122>
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	4a62      	ldr	r2, [pc, #392]	; (80017c8 <HAL_ETH_Init+0x2a8>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d911      	bls.n	8001666 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	4a60      	ldr	r2, [pc, #384]	; (80017c8 <HAL_ETH_Init+0x2a8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d908      	bls.n	800165c <HAL_ETH_Init+0x13c>
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4a5f      	ldr	r2, [pc, #380]	; (80017cc <HAL_ETH_Init+0x2ac>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d804      	bhi.n	800165c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	e005      	b.n	8001668 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f043 0310 	orr.w	r3, r3, #16
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	e000      	b.n	8001668 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001666:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001670:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001674:	2100      	movs	r1, #0
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 fb92 	bl	8001da0 <HAL_ETH_WritePHYRegister>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00b      	beq.n	800169a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001686:	6939      	ldr	r1, [r7, #16]
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 fd47 	bl	800211c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0d6      	b.n	8001848 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800169a:	20ff      	movs	r0, #255	; 0xff
 800169c:	f7ff fe0a 	bl	80012b4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80a4 	beq.w	80017f2 <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80016aa:	f7ff fdf7 	bl	800129c <HAL_GetTick>
 80016ae:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	461a      	mov	r2, r3
 80016b6:	2101      	movs	r1, #1
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 fb09 	bl	8001cd0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80016be:	f7ff fded 	bl	800129c <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d90f      	bls.n	80016f0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80016d4:	6939      	ldr	r1, [r7, #16]
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 fd20 	bl	800211c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e0ab      	b.n	8001848 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0da      	beq.n	80016b0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80016fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016fe:	2100      	movs	r1, #0
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 fb4d 	bl	8001da0 <HAL_ETH_WritePHYRegister>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00b      	beq.n	8001724 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001710:	6939      	ldr	r1, [r7, #16]
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fd02 	bl	800211c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001720:	2301      	movs	r3, #1
 8001722:	e091      	b.n	8001848 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001724:	f7ff fdba 	bl	800129c <HAL_GetTick>
 8001728:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	461a      	mov	r2, r3
 8001730:	2101      	movs	r1, #1
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 facc 	bl	8001cd0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001738:	f7ff fdb0 	bl	800129c <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d90f      	bls.n	800176a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800174e:	6939      	ldr	r1, [r7, #16]
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fce3 	bl	800211c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e06e      	b.n	8001848 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f003 0320 	and.w	r3, r3, #32
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0da      	beq.n	800172a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	461a      	mov	r2, r3
 800177a:	2110      	movs	r1, #16
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 faa7 	bl	8001cd0 <HAL_ETH_ReadPHYRegister>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00b      	beq.n	80017a0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800178c:	6939      	ldr	r1, [r7, #16]
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fcc4 	bl	800211c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800179c:	2301      	movs	r3, #1
 800179e:	e053      	b.n	8001848 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d012      	beq.n	80017d0 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	e010      	b.n	80017d6 <HAL_ETH_Init+0x2b6>
 80017b4:	03938700 	.word	0x03938700
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40013800 	.word	0x40013800
 80017c0:	01312cff 	.word	0x01312cff
 80017c4:	02160ebf 	.word	0x02160ebf
 80017c8:	05f5e0ff 	.word	0x05f5e0ff
 80017cc:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	e026      	b.n	8001836 <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	e021      	b.n	8001836 <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	08db      	lsrs	r3, r3, #3
 80017f8:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	085b      	lsrs	r3, r3, #1
 8001800:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001802:	4313      	orrs	r3, r2
 8001804:	b29b      	uxth	r3, r3
 8001806:	461a      	mov	r2, r3
 8001808:	2100      	movs	r1, #0
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 fac8 	bl	8001da0 <HAL_ETH_WritePHYRegister>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800181a:	6939      	ldr	r1, [r7, #16]
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 fc7d 	bl	800211c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e00c      	b.n	8001848 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800182e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001832:	f7ff fd3f 	bl	80012b4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001836:	6939      	ldr	r1, [r7, #16]
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 fc6f 	bl	800211c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_ETH_DMATxDescListInit+0x20>
 800186c:	2302      	movs	r3, #2
 800186e:	e051      	b.n	8001914 <HAL_ETH_DMATxDescListInit+0xc4>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2202      	movs	r2, #2
 800187c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e030      	b.n	80018ee <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	015b      	lsls	r3, r3, #5
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	4413      	add	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800189c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018a4:	fb02 f303 	mul.w	r3, r2, r3
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d105      	bne.n	80018c6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d208      	bcs.n	80018e2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3301      	adds	r3, #1
 80018d4:	015b      	lsls	r3, r3, #5
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	4413      	add	r3, r2
 80018da:	461a      	mov	r2, r3
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	e002      	b.n	80018e8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	3301      	adds	r3, #1
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d3ca      	bcc.n	800188c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001900:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_ETH_DMARxDescListInit+0x20>
 800193c:	2302      	movs	r3, #2
 800193e:	e055      	b.n	80019ec <HAL_ETH_DMARxDescListInit+0xcc>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e034      	b.n	80019c6 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	015b      	lsls	r3, r3, #5
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	4413      	add	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800196c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001974:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800197c:	fb02 f303 	mul.w	r3, r2, r3
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	461a      	mov	r2, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d105      	bne.n	800199e <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d208      	bcs.n	80019ba <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	015b      	lsls	r3, r3, #5
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	4413      	add	r3, r2
 80019b2:	461a      	mov	r2, r3
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	e002      	b.n	80019c0 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d3c6      	bcc.n	800195c <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019d8:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_ETH_TransmitFrame+0x24>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e0cc      	b.n	8001bb6 <HAL_ETH_TransmitFrame+0x1be>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d109      	bne.n	8001a46 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001a42:	2301      	movs	r3, #1
 8001a44:	e0b7      	b.n	8001bb6 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da09      	bge.n	8001a64 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2212      	movs	r2, #18
 8001a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0a8      	b.n	8001bb6 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d915      	bls.n	8001a9a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	4a54      	ldr	r2, [pc, #336]	; (8001bc4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	0a9b      	lsrs	r3, r3, #10
 8001a78:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	4b51      	ldr	r3, [pc, #324]	; (8001bc4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a82:	0a9b      	lsrs	r3, r3, #10
 8001a84:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001a88:	fb01 f303 	mul.w	r3, r1, r3
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3301      	adds	r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e001      	b.n	8001a9e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d11c      	bne.n	8001ade <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001ab2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001abe:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ace:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
 8001adc:	e04b      	b.n	8001b76 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	e044      	b.n	8001b6e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001af2:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d107      	bne.n	8001b0a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b08:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b12:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d116      	bne.n	8001b4c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001b2c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	4a25      	ldr	r2, [pc, #148]	; (8001bc8 <HAL_ETH_TransmitFrame+0x1d0>)
 8001b32:	fb03 f202 	mul.w	r2, r3, r2
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001b3e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001b4a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b5a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	461a      	mov	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d3b6      	bcc.n	8001ae4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00d      	beq.n	8001ba4 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b90:	461a      	mov	r2, r3
 8001b92:	2304      	movs	r3, #4
 8001b94:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	ac02b00b 	.word	0xac02b00b
 8001bc8:	fffffa0c 	.word	0xfffffa0c

08001bcc <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be2:	2b40      	cmp	r3, #64	; 0x40
 8001be4:	d112      	bne.n	8001c0c <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f85e 	bl	8001ca8 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	2340      	movs	r3, #64	; 0x40
 8001bf8:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c0a:	e01a      	b.n	8001c42 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d111      	bne.n	8001c42 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f838 	bl	8001c94 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	2301      	movs	r3, #1
 8001c30:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c50:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c64:	d112      	bne.n	8001c8c <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f828 	bl	8001cbc <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c74:	461a      	mov	r2, r3
 8001c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c7a:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b82      	cmp	r3, #130	; 0x82
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e050      	b.n	8001d98 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2282      	movs	r2, #130	; 0x82
 8001cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f003 031c 	and.w	r3, r3, #28
 8001d0c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8a1b      	ldrh	r3, [r3, #16]
 8001d12:	02db      	lsls	r3, r3, #11
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d1c:	897b      	ldrh	r3, [r7, #10]
 8001d1e:	019b      	lsls	r3, r3, #6
 8001d20:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f023 0302 	bic.w	r3, r3, #2
 8001d30:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d42:	f7ff faab 	bl	800129c <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d48:	e015      	b.n	8001d76 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d4a:	f7ff faa7 	bl	800129c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d58:	d309      	bcc.n	8001d6e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e014      	b.n	8001d98 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1e4      	bne.n	8001d4a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	460b      	mov	r3, r1
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b42      	cmp	r3, #66	; 0x42
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e04e      	b.n	8001e64 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2242      	movs	r2, #66	; 0x42
 8001dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 031c 	and.w	r3, r3, #28
 8001ddc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8a1b      	ldrh	r3, [r3, #16]
 8001de2:	02db      	lsls	r3, r3, #11
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001dec:	897b      	ldrh	r3, [r7, #10]
 8001dee:	019b      	lsls	r3, r3, #6
 8001df0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e1c:	f7ff fa3e 	bl	800129c <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e22:	e015      	b.n	8001e50 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e24:	f7ff fa3a 	bl	800129c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e32:	d309      	bcc.n	8001e48 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e00d      	b.n	8001e64 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1e4      	bne.n	8001e24 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_ETH_Start+0x16>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e01f      	b.n	8001ec2 <HAL_ETH_Start+0x56>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fb40 	bl	8002518 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fb77 	bl	800258c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 fc06 	bl	80026b0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fbab 	bl	8002600 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fbd4 	bl	8002658 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_ETH_Stop+0x16>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e01f      	b.n	8001f20 <HAL_ETH_Stop+0x56>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fb9b 	bl	800262c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fbc4 	bl	8002684 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 fb62 	bl	80025c6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fbd4 	bl	80026b0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fb22 	bl	8002552 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_ETH_ConfigMAC+0x1c>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e0e4      	b.n	800210e <HAL_ETH_ConfigMAC+0x1e6>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80b1 	beq.w	80020be <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	4b6c      	ldr	r3, [pc, #432]	; (8002118 <HAL_ETH_ConfigMAC+0x1f0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f74:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001f7a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001f80:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001f86:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001f8c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001f92:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001f98:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001f9e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001fa4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001faa:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001fb0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001fb6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f7ff f970 	bl	80012b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fe4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001fea:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001ff0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001ff6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001ffc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002002:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800200e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002010:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800201a:	2001      	movs	r0, #1
 800201c:	f7ff f94a 	bl	80012b4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002030:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800203a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	f64f 7341 	movw	r3, #65345	; 0xff41
 800204a:	4013      	ands	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002058:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800205e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002064:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800206a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002070:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002088:	2001      	movs	r0, #1
 800208a:	f7ff f913 	bl	80012b4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ae:	2001      	movs	r0, #1
 80020b0:	f7ff f900 	bl	80012b4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	61da      	str	r2, [r3, #28]
 80020bc:	e01e      	b.n	80020fc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80020cc:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f7ff f8e0 	bl	80012b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	ff20810f 	.word	0xff20810f

0800211c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b0b0      	sub	sp, #192	; 0xc0
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002138:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002140:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800214a:	2300      	movs	r3, #0
 800214c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d103      	bne.n	800216a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002166:	663b      	str	r3, [r7, #96]	; 0x60
 8002168:	e001      	b.n	800216e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800216e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002172:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002178:	2300      	movs	r3, #0
 800217a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002188:	2340      	movs	r3, #64	; 0x40
 800218a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80021f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021f4:	4ba9      	ldr	r3, [pc, #676]	; (800249c <ETH_MACDMAConfig+0x380>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80021fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002200:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002204:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002208:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800220e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002212:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002216:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800221c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800221e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002220:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002222:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002224:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002226:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002228:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800222a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800222c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800222e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002230:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002232:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002244:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002250:	2001      	movs	r0, #1
 8002252:	f7ff f82f 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800225e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002260:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002262:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002264:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002266:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002268:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800226a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800226e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002270:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002274:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002276:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800227a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800227c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002280:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002284:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800228c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800228e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800229a:	2001      	movs	r0, #1
 800229c:	f7ff f80a 	bl	80012b4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022a8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022b2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80022bc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80022c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022cc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022d0:	4013      	ands	r3, r2
 80022d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022da:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80022dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022e0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80022e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80022e6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80022e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80022ec:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80022ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80022f2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80022f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80022f8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800230c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002318:	2001      	movs	r0, #1
 800231a:	f7fe ffcb 	bl	80012b4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002326:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002328:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800232c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002342:	2001      	movs	r0, #1
 8002344:	f7fe ffb6 	bl	80012b4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002350:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800235a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002360:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002364:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002376:	2304      	movs	r3, #4
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800237a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002384:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002386:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800238c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002390:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002396:	2300      	movs	r3, #0
 8002398:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800239a:	2300      	movs	r3, #0
 800239c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80023ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023b0:	4b3b      	ldr	r3, [pc, #236]	; (80024a0 <ETH_MACDMAConfig+0x384>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023b8:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80023ba:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023bc:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80023be:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80023c0:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80023c2:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80023c4:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80023c6:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80023c8:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80023ca:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80023cc:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80023ce:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80023d0:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80023d4:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80023d8:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ec:	461a      	mov	r2, r3
 80023ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023f2:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002402:	2001      	movs	r0, #1
 8002404:	f7fe ff56 	bl	80012b4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002410:	461a      	mov	r2, r3
 8002412:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002416:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800241c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800241e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002420:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002424:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002428:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800242a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800242e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002432:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800243c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002440:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002450:	2001      	movs	r0, #1
 8002452:	f7fe ff2f 	bl	80012b4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245e:	461a      	mov	r2, r3
 8002460:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002464:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d10b      	bne.n	8002486 <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002476:	69d9      	ldr	r1, [r3, #28]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <ETH_MACDMAConfig+0x388>)
 800247e:	430b      	orrs	r3, r1
 8002480:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002484:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	461a      	mov	r2, r3
 800248c:	2100      	movs	r1, #0
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f80a 	bl	80024a8 <ETH_MACAddressConfig>
}
 8002494:	bf00      	nop
 8002496:	37c0      	adds	r7, #192	; 0xc0
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	ff20810f 	.word	0xff20810f
 80024a0:	f8de3f23 	.word	0xf8de3f23
 80024a4:	00010040 	.word	0x00010040

080024a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3305      	adds	r3, #5
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	3204      	adds	r2, #4
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <ETH_MACAddressConfig+0x68>)
 80024ca:	4413      	add	r3, r2
 80024cc:	461a      	mov	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3303      	adds	r3, #3
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	061a      	lsls	r2, r3, #24
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3302      	adds	r3, #2
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3301      	adds	r3, #1
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	4313      	orrs	r3, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	7812      	ldrb	r2, [r2, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <ETH_MACAddressConfig+0x6c>)
 80024fa:	4413      	add	r3, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	6013      	str	r3, [r2, #0]
}
 8002502:	bf00      	nop
 8002504:	371c      	adds	r7, #28
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40028040 	.word	0x40028040
 8002514:	40028044 	.word	0x40028044

08002518 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0208 	orr.w	r2, r2, #8
 8002532:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800253c:	2001      	movs	r0, #1
 800253e:	f7fe feb9 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	601a      	str	r2, [r3, #0]
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0208 	bic.w	r2, r2, #8
 800256c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002576:	2001      	movs	r0, #1
 8002578:	f7fe fe9c 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	601a      	str	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0204 	orr.w	r2, r2, #4
 80025a6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b0:	2001      	movs	r0, #1
 80025b2:	f7fe fe7f 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	601a      	str	r2, [r3, #0]
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0204 	bic.w	r2, r2, #4
 80025e0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ea:	2001      	movs	r0, #1
 80025ec:	f7fe fe62 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	601a      	str	r2, [r3, #0]
}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800261a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800261e:	6193      	str	r3, [r2, #24]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002646:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800264a:	6193      	str	r3, [r2, #24]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	f043 0302 	orr.w	r3, r3, #2
 8002672:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002676:	6193      	str	r3, [r2, #24]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	f023 0302 	bic.w	r3, r3, #2
 800269e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026a2:	6193      	str	r3, [r2, #24]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026d2:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026e0:	2001      	movs	r0, #1
 80026e2:	f7fe fde7 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026f0:	6193      	str	r3, [r2, #24]
}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	e175      	b.n	8002a08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800271c:	2201      	movs	r2, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	429a      	cmp	r2, r3
 8002736:	f040 8164 	bne.w	8002a02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d005      	beq.n	8002752 <HAL_GPIO_Init+0x56>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d130      	bne.n	80027b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	2203      	movs	r2, #3
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002788:	2201      	movs	r2, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 0201 	and.w	r2, r3, #1
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d017      	beq.n	80027f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2203      	movs	r2, #3
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d123      	bne.n	8002844 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	08da      	lsrs	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3208      	adds	r2, #8
 8002804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	220f      	movs	r2, #15
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	08da      	lsrs	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3208      	adds	r2, #8
 800283e:	69b9      	ldr	r1, [r7, #24]
 8002840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0203 	and.w	r2, r3, #3
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80be 	beq.w	8002a02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	4b66      	ldr	r3, [pc, #408]	; (8002a20 <HAL_GPIO_Init+0x324>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4a65      	ldr	r2, [pc, #404]	; (8002a20 <HAL_GPIO_Init+0x324>)
 800288c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002890:	6453      	str	r3, [r2, #68]	; 0x44
 8002892:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <HAL_GPIO_Init+0x324>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800289e:	4a61      	ldr	r2, [pc, #388]	; (8002a24 <HAL_GPIO_Init+0x328>)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	3302      	adds	r3, #2
 80028a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	220f      	movs	r2, #15
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a58      	ldr	r2, [pc, #352]	; (8002a28 <HAL_GPIO_Init+0x32c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d037      	beq.n	800293a <HAL_GPIO_Init+0x23e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a57      	ldr	r2, [pc, #348]	; (8002a2c <HAL_GPIO_Init+0x330>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d031      	beq.n	8002936 <HAL_GPIO_Init+0x23a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a56      	ldr	r2, [pc, #344]	; (8002a30 <HAL_GPIO_Init+0x334>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d02b      	beq.n	8002932 <HAL_GPIO_Init+0x236>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a55      	ldr	r2, [pc, #340]	; (8002a34 <HAL_GPIO_Init+0x338>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d025      	beq.n	800292e <HAL_GPIO_Init+0x232>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a54      	ldr	r2, [pc, #336]	; (8002a38 <HAL_GPIO_Init+0x33c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01f      	beq.n	800292a <HAL_GPIO_Init+0x22e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a53      	ldr	r2, [pc, #332]	; (8002a3c <HAL_GPIO_Init+0x340>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d019      	beq.n	8002926 <HAL_GPIO_Init+0x22a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a52      	ldr	r2, [pc, #328]	; (8002a40 <HAL_GPIO_Init+0x344>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d013      	beq.n	8002922 <HAL_GPIO_Init+0x226>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a51      	ldr	r2, [pc, #324]	; (8002a44 <HAL_GPIO_Init+0x348>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00d      	beq.n	800291e <HAL_GPIO_Init+0x222>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a50      	ldr	r2, [pc, #320]	; (8002a48 <HAL_GPIO_Init+0x34c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d007      	beq.n	800291a <HAL_GPIO_Init+0x21e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a4f      	ldr	r2, [pc, #316]	; (8002a4c <HAL_GPIO_Init+0x350>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d101      	bne.n	8002916 <HAL_GPIO_Init+0x21a>
 8002912:	2309      	movs	r3, #9
 8002914:	e012      	b.n	800293c <HAL_GPIO_Init+0x240>
 8002916:	230a      	movs	r3, #10
 8002918:	e010      	b.n	800293c <HAL_GPIO_Init+0x240>
 800291a:	2308      	movs	r3, #8
 800291c:	e00e      	b.n	800293c <HAL_GPIO_Init+0x240>
 800291e:	2307      	movs	r3, #7
 8002920:	e00c      	b.n	800293c <HAL_GPIO_Init+0x240>
 8002922:	2306      	movs	r3, #6
 8002924:	e00a      	b.n	800293c <HAL_GPIO_Init+0x240>
 8002926:	2305      	movs	r3, #5
 8002928:	e008      	b.n	800293c <HAL_GPIO_Init+0x240>
 800292a:	2304      	movs	r3, #4
 800292c:	e006      	b.n	800293c <HAL_GPIO_Init+0x240>
 800292e:	2303      	movs	r3, #3
 8002930:	e004      	b.n	800293c <HAL_GPIO_Init+0x240>
 8002932:	2302      	movs	r3, #2
 8002934:	e002      	b.n	800293c <HAL_GPIO_Init+0x240>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <HAL_GPIO_Init+0x240>
 800293a:	2300      	movs	r3, #0
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	f002 0203 	and.w	r2, r2, #3
 8002942:	0092      	lsls	r2, r2, #2
 8002944:	4093      	lsls	r3, r2
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800294c:	4935      	ldr	r1, [pc, #212]	; (8002a24 <HAL_GPIO_Init+0x328>)
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	089b      	lsrs	r3, r3, #2
 8002952:	3302      	adds	r3, #2
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800295a:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <HAL_GPIO_Init+0x354>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800297e:	4a34      	ldr	r2, [pc, #208]	; (8002a50 <HAL_GPIO_Init+0x354>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002984:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <HAL_GPIO_Init+0x354>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029a8:	4a29      	ldr	r2, [pc, #164]	; (8002a50 <HAL_GPIO_Init+0x354>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ae:	4b28      	ldr	r3, [pc, #160]	; (8002a50 <HAL_GPIO_Init+0x354>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029d2:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <HAL_GPIO_Init+0x354>)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029d8:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <HAL_GPIO_Init+0x354>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029fc:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <HAL_GPIO_Init+0x354>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3301      	adds	r3, #1
 8002a06:	61fb      	str	r3, [r7, #28]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	2b0f      	cmp	r3, #15
 8002a0c:	f67f ae86 	bls.w	800271c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3724      	adds	r7, #36	; 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40013800 	.word	0x40013800
 8002a28:	40020000 	.word	0x40020000
 8002a2c:	40020400 	.word	0x40020400
 8002a30:	40020800 	.word	0x40020800
 8002a34:	40020c00 	.word	0x40020c00
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40021400 	.word	0x40021400
 8002a40:	40021800 	.word	0x40021800
 8002a44:	40021c00 	.word	0x40021c00
 8002a48:	40022000 	.word	0x40022000
 8002a4c:	40022400 	.word	0x40022400
 8002a50:	40013c00 	.word	0x40013c00

08002a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	807b      	strh	r3, [r7, #2]
 8002a60:	4613      	mov	r3, r2
 8002a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a64:	787b      	ldrb	r3, [r7, #1]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a70:	e003      	b.n	8002a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a72:	887b      	ldrh	r3, [r7, #2]
 8002a74:	041a      	lsls	r2, r3, #16
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	619a      	str	r2, [r3, #24]
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d006      	beq.n	8002aac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a9e:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f806 	bl	8002ab8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40013c00 	.word	0x40013c00

08002ab8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <HAL_PWREx_EnableOverDrive+0x98>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4a22      	ldr	r2, [pc, #136]	; (8002b68 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002af2:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002afe:	f7fe fbcd 	bl	800129c <HAL_GetTick>
 8002b02:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b04:	e009      	b.n	8002b1a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b06:	f7fe fbc9 	bl	800129c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b14:	d901      	bls.n	8002b1a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e022      	b.n	8002b60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b1a:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b26:	d1ee      	bne.n	8002b06 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b28:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0f      	ldr	r2, [pc, #60]	; (8002b6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b34:	f7fe fbb2 	bl	800129c <HAL_GetTick>
 8002b38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b3a:	e009      	b.n	8002b50 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b3c:	f7fe fbae 	bl	800129c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b4a:	d901      	bls.n	8002b50 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e007      	b.n	8002b60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b5c:	d1ee      	bne.n	8002b3c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40007000 	.word	0x40007000

08002b70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e291      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8087 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b94:	4b96      	ldr	r3, [pc, #600]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d00c      	beq.n	8002bba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba0:	4b93      	ldr	r3, [pc, #588]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 030c 	and.w	r3, r3, #12
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d112      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x62>
 8002bac:	4b90      	ldr	r3, [pc, #576]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bba:	4b8d      	ldr	r3, [pc, #564]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d06c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x130>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d168      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e26b      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x7a>
 8002bdc:	4b84      	ldr	r3, [pc, #528]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a83      	ldr	r2, [pc, #524]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	e02e      	b.n	8002c48 <HAL_RCC_OscConfig+0xd8>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x9c>
 8002bf2:	4b7f      	ldr	r3, [pc, #508]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a7e      	ldr	r2, [pc, #504]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b7c      	ldr	r3, [pc, #496]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a7b      	ldr	r2, [pc, #492]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e01d      	b.n	8002c48 <HAL_RCC_OscConfig+0xd8>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0xc0>
 8002c16:	4b76      	ldr	r3, [pc, #472]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a75      	ldr	r2, [pc, #468]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b73      	ldr	r3, [pc, #460]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a72      	ldr	r2, [pc, #456]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0xd8>
 8002c30:	4b6f      	ldr	r3, [pc, #444]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a6e      	ldr	r2, [pc, #440]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b6c      	ldr	r3, [pc, #432]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a6b      	ldr	r2, [pc, #428]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fb24 	bl	800129c <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c58:	f7fe fb20 	bl	800129c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e21f      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0xe8>
 8002c76:	e014      	b.n	8002ca2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fe fb10 	bl	800129c <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fe fb0c 	bl	800129c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e20b      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	4b57      	ldr	r3, [pc, #348]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x110>
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d069      	beq.n	8002d82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cae:	4b50      	ldr	r3, [pc, #320]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cba:	4b4d      	ldr	r3, [pc, #308]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d11c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x190>
 8002cc6:	4b4a      	ldr	r3, [pc, #296]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d116      	bne.n	8002d00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_RCC_OscConfig+0x17a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e1df      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cea:	4b41      	ldr	r3, [pc, #260]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	493d      	ldr	r1, [pc, #244]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	e040      	b.n	8002d82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d023      	beq.n	8002d50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d08:	4b39      	ldr	r3, [pc, #228]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a38      	ldr	r2, [pc, #224]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe fac2 	bl	800129c <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7fe fabe 	bl	800129c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e1bd      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2e:	4b30      	ldr	r3, [pc, #192]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3a:	4b2d      	ldr	r3, [pc, #180]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4929      	ldr	r1, [pc, #164]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]
 8002d4e:	e018      	b.n	8002d82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d50:	4b27      	ldr	r3, [pc, #156]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a26      	ldr	r2, [pc, #152]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fa9e 	bl	800129c <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d64:	f7fe fa9a 	bl	800129c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e199      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d76:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d038      	beq.n	8002e00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d019      	beq.n	8002dca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9a:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da2:	f7fe fa7b 	bl	800129c <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002daa:	f7fe fa77 	bl	800129c <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e176      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x23a>
 8002dc8:	e01a      	b.n	8002e00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dce:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	f023 0301 	bic.w	r3, r3, #1
 8002dd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd6:	f7fe fa61 	bl	800129c <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ddc:	e00a      	b.n	8002df4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dde:	f7fe fa5d 	bl	800129c <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d903      	bls.n	8002df4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e15c      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>
 8002df0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df4:	4b91      	ldr	r3, [pc, #580]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1ee      	bne.n	8002dde <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80a4 	beq.w	8002f56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0e:	4b8b      	ldr	r3, [pc, #556]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10d      	bne.n	8002e36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	4b88      	ldr	r3, [pc, #544]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	4a87      	ldr	r2, [pc, #540]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e24:	6413      	str	r3, [r2, #64]	; 0x40
 8002e26:	4b85      	ldr	r3, [pc, #532]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e32:	2301      	movs	r3, #1
 8002e34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e36:	4b82      	ldr	r3, [pc, #520]	; (8003040 <HAL_RCC_OscConfig+0x4d0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d118      	bne.n	8002e74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e42:	4b7f      	ldr	r3, [pc, #508]	; (8003040 <HAL_RCC_OscConfig+0x4d0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7e      	ldr	r2, [pc, #504]	; (8003040 <HAL_RCC_OscConfig+0x4d0>)
 8002e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4e:	f7fe fa25 	bl	800129c <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e56:	f7fe fa21 	bl	800129c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b64      	cmp	r3, #100	; 0x64
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e120      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e68:	4b75      	ldr	r3, [pc, #468]	; (8003040 <HAL_RCC_OscConfig+0x4d0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d106      	bne.n	8002e8a <HAL_RCC_OscConfig+0x31a>
 8002e7c:	4b6f      	ldr	r3, [pc, #444]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	4a6e      	ldr	r2, [pc, #440]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6713      	str	r3, [r2, #112]	; 0x70
 8002e88:	e02d      	b.n	8002ee6 <HAL_RCC_OscConfig+0x376>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10c      	bne.n	8002eac <HAL_RCC_OscConfig+0x33c>
 8002e92:	4b6a      	ldr	r3, [pc, #424]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	4a69      	ldr	r2, [pc, #420]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9e:	4b67      	ldr	r3, [pc, #412]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	4a66      	ldr	r2, [pc, #408]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002ea4:	f023 0304 	bic.w	r3, r3, #4
 8002ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eaa:	e01c      	b.n	8002ee6 <HAL_RCC_OscConfig+0x376>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	d10c      	bne.n	8002ece <HAL_RCC_OscConfig+0x35e>
 8002eb4:	4b61      	ldr	r3, [pc, #388]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	4a60      	ldr	r2, [pc, #384]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec0:	4b5e      	ldr	r3, [pc, #376]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	4a5d      	ldr	r2, [pc, #372]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6713      	str	r3, [r2, #112]	; 0x70
 8002ecc:	e00b      	b.n	8002ee6 <HAL_RCC_OscConfig+0x376>
 8002ece:	4b5b      	ldr	r3, [pc, #364]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	4a5a      	ldr	r2, [pc, #360]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eda:	4b58      	ldr	r3, [pc, #352]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	4a57      	ldr	r2, [pc, #348]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002ee0:	f023 0304 	bic.w	r3, r3, #4
 8002ee4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d015      	beq.n	8002f1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eee:	f7fe f9d5 	bl	800129c <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef6:	f7fe f9d1 	bl	800129c <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e0ce      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0c:	4b4b      	ldr	r3, [pc, #300]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ee      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x386>
 8002f18:	e014      	b.n	8002f44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1a:	f7fe f9bf 	bl	800129c <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fe f9bb 	bl	800129c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0b8      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f38:	4b40      	ldr	r3, [pc, #256]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ee      	bne.n	8002f22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d105      	bne.n	8002f56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4a:	4b3c      	ldr	r3, [pc, #240]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4a3b      	ldr	r2, [pc, #236]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80a4 	beq.w	80030a8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f60:	4b36      	ldr	r3, [pc, #216]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d06b      	beq.n	8003044 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d149      	bne.n	8003008 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a30      	ldr	r2, [pc, #192]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe f98c 	bl	800129c <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe f988 	bl	800129c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e087      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9a:	4b28      	ldr	r3, [pc, #160]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	019b      	lsls	r3, r3, #6
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	085b      	lsrs	r3, r3, #1
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	041b      	lsls	r3, r3, #16
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	061b      	lsls	r3, r3, #24
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	4a1b      	ldr	r2, [pc, #108]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002fce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fd2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd4:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a18      	ldr	r2, [pc, #96]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002fda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fe f95c 	bl	800129c <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7fe f958 	bl	800129c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e057      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x478>
 8003006:	e04f      	b.n	80030a8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0b      	ldr	r2, [pc, #44]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 800300e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fe f942 	bl	800129c <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe f93e 	bl	800129c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e03d      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_RCC_OscConfig+0x4cc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x4ac>
 800303a:	e035      	b.n	80030a8 <HAL_RCC_OscConfig+0x538>
 800303c:	40023800 	.word	0x40023800
 8003040:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <HAL_RCC_OscConfig+0x544>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d028      	beq.n	80030a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d121      	bne.n	80030a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d11a      	bne.n	80030a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003074:	4013      	ands	r3, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800307a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800307c:	4293      	cmp	r3, r2
 800307e:	d111      	bne.n	80030a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	3b01      	subs	r3, #1
 800308e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800

080030b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0d0      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d0:	4b6a      	ldr	r3, [pc, #424]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d910      	bls.n	8003100 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	4b67      	ldr	r3, [pc, #412]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 020f 	bic.w	r2, r3, #15
 80030e6:	4965      	ldr	r1, [pc, #404]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b63      	ldr	r3, [pc, #396]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0b8      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d020      	beq.n	800314e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003118:	4b59      	ldr	r3, [pc, #356]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4a58      	ldr	r2, [pc, #352]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800311e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003122:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003130:	4b53      	ldr	r3, [pc, #332]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a52      	ldr	r2, [pc, #328]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800313a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313c:	4b50      	ldr	r3, [pc, #320]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	494d      	ldr	r1, [pc, #308]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d040      	beq.n	80031dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d115      	bne.n	800319a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e07f      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317a:	4b41      	ldr	r3, [pc, #260]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e073      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318a:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e06b      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800319a:	4b39      	ldr	r3, [pc, #228]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f023 0203 	bic.w	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4936      	ldr	r1, [pc, #216]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ac:	f7fe f876 	bl	800129c <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b4:	f7fe f872 	bl	800129c <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e053      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 020c 	and.w	r2, r3, #12
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	429a      	cmp	r2, r3
 80031da:	d1eb      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031dc:	4b27      	ldr	r3, [pc, #156]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d210      	bcs.n	800320c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b24      	ldr	r3, [pc, #144]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 020f 	bic.w	r2, r3, #15
 80031f2:	4922      	ldr	r1, [pc, #136]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b20      	ldr	r3, [pc, #128]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e032      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4916      	ldr	r1, [pc, #88]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003236:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	490e      	ldr	r1, [pc, #56]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800324a:	f000 f821 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 800324e:	4602      	mov	r2, r0
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	490a      	ldr	r1, [pc, #40]	; (8003284 <HAL_RCC_ClockConfig+0x1cc>)
 800325c:	5ccb      	ldrb	r3, [r1, r3]
 800325e:	fa22 f303 	lsr.w	r3, r2, r3
 8003262:	4a09      	ldr	r2, [pc, #36]	; (8003288 <HAL_RCC_ClockConfig+0x1d0>)
 8003264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_RCC_ClockConfig+0x1d4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd ffd2 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023c00 	.word	0x40023c00
 8003280:	40023800 	.word	0x40023800
 8003284:	08012ed8 	.word	0x08012ed8
 8003288:	20000000 	.word	0x20000000
 800328c:	20000004 	.word	0x20000004

08003290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003294:	b094      	sub	sp, #80	; 0x50
 8003296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	647b      	str	r3, [r7, #68]	; 0x44
 800329c:	2300      	movs	r3, #0
 800329e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a0:	2300      	movs	r3, #0
 80032a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a8:	4b79      	ldr	r3, [pc, #484]	; (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d00d      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x40>
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	f200 80e1 	bhi.w	800347c <HAL_RCC_GetSysClockFreq+0x1ec>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x34>
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d003      	beq.n	80032ca <HAL_RCC_GetSysClockFreq+0x3a>
 80032c2:	e0db      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032c4:	4b73      	ldr	r3, [pc, #460]	; (8003494 <HAL_RCC_GetSysClockFreq+0x204>)
 80032c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032c8:	e0db      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ca:	4b73      	ldr	r3, [pc, #460]	; (8003498 <HAL_RCC_GetSysClockFreq+0x208>)
 80032cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ce:	e0d8      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032d0:	4b6f      	ldr	r3, [pc, #444]	; (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032da:	4b6d      	ldr	r3, [pc, #436]	; (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d063      	beq.n	80033ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e6:	4b6a      	ldr	r3, [pc, #424]	; (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	099b      	lsrs	r3, r3, #6
 80032ec:	2200      	movs	r2, #0
 80032ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80032f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f8:	633b      	str	r3, [r7, #48]	; 0x30
 80032fa:	2300      	movs	r3, #0
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34
 80032fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003302:	4622      	mov	r2, r4
 8003304:	462b      	mov	r3, r5
 8003306:	f04f 0000 	mov.w	r0, #0
 800330a:	f04f 0100 	mov.w	r1, #0
 800330e:	0159      	lsls	r1, r3, #5
 8003310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003314:	0150      	lsls	r0, r2, #5
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4621      	mov	r1, r4
 800331c:	1a51      	subs	r1, r2, r1
 800331e:	6139      	str	r1, [r7, #16]
 8003320:	4629      	mov	r1, r5
 8003322:	eb63 0301 	sbc.w	r3, r3, r1
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003334:	4659      	mov	r1, fp
 8003336:	018b      	lsls	r3, r1, #6
 8003338:	4651      	mov	r1, sl
 800333a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800333e:	4651      	mov	r1, sl
 8003340:	018a      	lsls	r2, r1, #6
 8003342:	4651      	mov	r1, sl
 8003344:	ebb2 0801 	subs.w	r8, r2, r1
 8003348:	4659      	mov	r1, fp
 800334a:	eb63 0901 	sbc.w	r9, r3, r1
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800335a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800335e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003362:	4690      	mov	r8, r2
 8003364:	4699      	mov	r9, r3
 8003366:	4623      	mov	r3, r4
 8003368:	eb18 0303 	adds.w	r3, r8, r3
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	462b      	mov	r3, r5
 8003370:	eb49 0303 	adc.w	r3, r9, r3
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003382:	4629      	mov	r1, r5
 8003384:	024b      	lsls	r3, r1, #9
 8003386:	4621      	mov	r1, r4
 8003388:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800338c:	4621      	mov	r1, r4
 800338e:	024a      	lsls	r2, r1, #9
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003396:	2200      	movs	r2, #0
 8003398:	62bb      	str	r3, [r7, #40]	; 0x28
 800339a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800339c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033a0:	f7fc ff86 	bl	80002b0 <__aeabi_uldivmod>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4613      	mov	r3, r2
 80033aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ac:	e058      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ae:	4b38      	ldr	r3, [pc, #224]	; (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	099b      	lsrs	r3, r3, #6
 80033b4:	2200      	movs	r2, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	4611      	mov	r1, r2
 80033ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033be:	623b      	str	r3, [r7, #32]
 80033c0:	2300      	movs	r3, #0
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
 80033c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033c8:	4642      	mov	r2, r8
 80033ca:	464b      	mov	r3, r9
 80033cc:	f04f 0000 	mov.w	r0, #0
 80033d0:	f04f 0100 	mov.w	r1, #0
 80033d4:	0159      	lsls	r1, r3, #5
 80033d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033da:	0150      	lsls	r0, r2, #5
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4641      	mov	r1, r8
 80033e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033e6:	4649      	mov	r1, r9
 80033e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003400:	ebb2 040a 	subs.w	r4, r2, sl
 8003404:	eb63 050b 	sbc.w	r5, r3, fp
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	00eb      	lsls	r3, r5, #3
 8003412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003416:	00e2      	lsls	r2, r4, #3
 8003418:	4614      	mov	r4, r2
 800341a:	461d      	mov	r5, r3
 800341c:	4643      	mov	r3, r8
 800341e:	18e3      	adds	r3, r4, r3
 8003420:	603b      	str	r3, [r7, #0]
 8003422:	464b      	mov	r3, r9
 8003424:	eb45 0303 	adc.w	r3, r5, r3
 8003428:	607b      	str	r3, [r7, #4]
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003436:	4629      	mov	r1, r5
 8003438:	028b      	lsls	r3, r1, #10
 800343a:	4621      	mov	r1, r4
 800343c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003440:	4621      	mov	r1, r4
 8003442:	028a      	lsls	r2, r1, #10
 8003444:	4610      	mov	r0, r2
 8003446:	4619      	mov	r1, r3
 8003448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800344a:	2200      	movs	r2, #0
 800344c:	61bb      	str	r3, [r7, #24]
 800344e:	61fa      	str	r2, [r7, #28]
 8003450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003454:	f7fc ff2c 	bl	80002b0 <__aeabi_uldivmod>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4613      	mov	r3, r2
 800345e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003460:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	3301      	adds	r3, #1
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003470:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003474:	fbb2 f3f3 	udiv	r3, r2, r3
 8003478:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800347a:	e002      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCC_GetSysClockFreq+0x204>)
 800347e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003484:	4618      	mov	r0, r3
 8003486:	3750      	adds	r7, #80	; 0x50
 8003488:	46bd      	mov	sp, r7
 800348a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800
 8003494:	00f42400 	.word	0x00f42400
 8003498:	007a1200 	.word	0x007a1200

0800349c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034a2:	681b      	ldr	r3, [r3, #0]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	20000000 	.word	0x20000000

080034b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034b8:	f7ff fff0 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0a9b      	lsrs	r3, r3, #10
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4903      	ldr	r1, [pc, #12]	; (80034d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40023800 	.word	0x40023800
 80034d8:	08012ee8 	.word	0x08012ee8

080034dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034e0:	f7ff ffdc 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034e4:	4602      	mov	r2, r0
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	0b5b      	lsrs	r3, r3, #13
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	4903      	ldr	r1, [pc, #12]	; (8003500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034f2:	5ccb      	ldrb	r3, [r1, r3]
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40023800 	.word	0x40023800
 8003500:	08012ee8 	.word	0x08012ee8

08003504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d012      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800352c:	4b69      	ldr	r3, [pc, #420]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a68      	ldr	r2, [pc, #416]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003532:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003536:	6093      	str	r3, [r2, #8]
 8003538:	4b66      	ldr	r3, [pc, #408]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	4964      	ldr	r1, [pc, #400]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800354e:	2301      	movs	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d017      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800355e:	4b5d      	ldr	r3, [pc, #372]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003564:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	4959      	ldr	r1, [pc, #356]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800357c:	d101      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800357e:	2301      	movs	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800358a:	2301      	movs	r3, #1
 800358c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d017      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800359a:	4b4e      	ldr	r3, [pc, #312]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	494a      	ldr	r1, [pc, #296]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b8:	d101      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035ba:	2301      	movs	r3, #1
 80035bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035c6:	2301      	movs	r3, #1
 80035c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035d6:	2301      	movs	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 808b 	beq.w	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035e8:	4b3a      	ldr	r3, [pc, #232]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	4a39      	ldr	r2, [pc, #228]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f2:	6413      	str	r3, [r2, #64]	; 0x40
 80035f4:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003600:	4b35      	ldr	r3, [pc, #212]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a34      	ldr	r2, [pc, #208]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800360c:	f7fd fe46 	bl	800129c <HAL_GetTick>
 8003610:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003614:	f7fd fe42 	bl	800129c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e357      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003626:	4b2c      	ldr	r3, [pc, #176]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003632:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d035      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	429a      	cmp	r2, r3
 800364e:	d02e      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003650:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003658:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800365a:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003666:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	4a1a      	ldr	r2, [pc, #104]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003670:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003672:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b01      	cmp	r3, #1
 8003682:	d114      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fd fe0a 	bl	800129c <HAL_GetTick>
 8003688:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368a:	e00a      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368c:	f7fd fe06 	bl	800129c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e319      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0ee      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ba:	d111      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036ca:	400b      	ands	r3, r1
 80036cc:	4901      	ldr	r1, [pc, #4]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
 80036d2:	e00b      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40007000 	.word	0x40007000
 80036dc:	0ffffcff 	.word	0x0ffffcff
 80036e0:	4baa      	ldr	r3, [pc, #680]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4aa9      	ldr	r2, [pc, #676]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036ea:	6093      	str	r3, [r2, #8]
 80036ec:	4ba7      	ldr	r3, [pc, #668]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f8:	49a4      	ldr	r1, [pc, #656]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b00      	cmp	r3, #0
 8003708:	d010      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800370a:	4ba0      	ldr	r3, [pc, #640]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800370c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003710:	4a9e      	ldr	r2, [pc, #632]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003716:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800371a:	4b9c      	ldr	r3, [pc, #624]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	4999      	ldr	r1, [pc, #612]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003738:	4b94      	ldr	r3, [pc, #592]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003746:	4991      	ldr	r1, [pc, #580]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800375a:	4b8c      	ldr	r3, [pc, #560]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003768:	4988      	ldr	r1, [pc, #544]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800377c:	4b83      	ldr	r3, [pc, #524]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800378a:	4980      	ldr	r1, [pc, #512]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800379e:	4b7b      	ldr	r3, [pc, #492]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	4977      	ldr	r1, [pc, #476]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037c0:	4b72      	ldr	r3, [pc, #456]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	496f      	ldr	r1, [pc, #444]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e2:	4b6a      	ldr	r3, [pc, #424]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e8:	f023 020c 	bic.w	r2, r3, #12
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f0:	4966      	ldr	r1, [pc, #408]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003804:	4b61      	ldr	r3, [pc, #388]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003812:	495e      	ldr	r1, [pc, #376]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003826:	4b59      	ldr	r3, [pc, #356]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003834:	4955      	ldr	r1, [pc, #340]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003848:	4b50      	ldr	r3, [pc, #320]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	494d      	ldr	r1, [pc, #308]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800386a:	4b48      	ldr	r3, [pc, #288]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003870:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	4944      	ldr	r1, [pc, #272]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800388c:	4b3f      	ldr	r3, [pc, #252]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	493c      	ldr	r1, [pc, #240]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038ae:	4b37      	ldr	r3, [pc, #220]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038bc:	4933      	ldr	r1, [pc, #204]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038d0:	4b2e      	ldr	r3, [pc, #184]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038de:	492b      	ldr	r1, [pc, #172]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d011      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038f2:	4b26      	ldr	r3, [pc, #152]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003900:	4922      	ldr	r1, [pc, #136]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800390c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003910:	d101      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003922:	2301      	movs	r3, #1
 8003924:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003932:	4b16      	ldr	r3, [pc, #88]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003940:	4912      	ldr	r1, [pc, #72]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00b      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003954:	4b0d      	ldr	r3, [pc, #52]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003964:	4909      	ldr	r1, [pc, #36]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d006      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 80d9 	beq.w	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003980:	4b02      	ldr	r3, [pc, #8]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a01      	ldr	r2, [pc, #4]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003986:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800398a:	e001      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800398c:	40023800 	.word	0x40023800
 8003990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003992:	f7fd fc83 	bl	800129c <HAL_GetTick>
 8003996:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800399a:	f7fd fc7f 	bl	800129c <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b64      	cmp	r3, #100	; 0x64
 80039a6:	d901      	bls.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e194      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039ac:	4b6c      	ldr	r3, [pc, #432]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f0      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d021      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d11d      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039cc:	4b64      	ldr	r3, [pc, #400]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d2:	0c1b      	lsrs	r3, r3, #16
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039da:	4b61      	ldr	r3, [pc, #388]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e0:	0e1b      	lsrs	r3, r3, #24
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	019a      	lsls	r2, r3, #6
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	431a      	orrs	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	061b      	lsls	r3, r3, #24
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	071b      	lsls	r3, r3, #28
 8003a00:	4957      	ldr	r1, [pc, #348]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d004      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a1c:	d00a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d02e      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a32:	d129      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a34:	4b4a      	ldr	r3, [pc, #296]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a3a:	0c1b      	lsrs	r3, r3, #16
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a42:	4b47      	ldr	r3, [pc, #284]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a48:	0f1b      	lsrs	r3, r3, #28
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	019a      	lsls	r2, r3, #6
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	041b      	lsls	r3, r3, #16
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	431a      	orrs	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	071b      	lsls	r3, r3, #28
 8003a68:	493d      	ldr	r1, [pc, #244]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a70:	4b3b      	ldr	r3, [pc, #236]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a76:	f023 021f 	bic.w	r2, r3, #31
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	4937      	ldr	r1, [pc, #220]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01d      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a94:	4b32      	ldr	r3, [pc, #200]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a9a:	0e1b      	lsrs	r3, r3, #24
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003aa2:	4b2f      	ldr	r3, [pc, #188]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa8:	0f1b      	lsrs	r3, r3, #28
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	019a      	lsls	r2, r3, #6
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	041b      	lsls	r3, r3, #16
 8003abc:	431a      	orrs	r2, r3
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	061b      	lsls	r3, r3, #24
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	071b      	lsls	r3, r3, #28
 8003ac8:	4925      	ldr	r1, [pc, #148]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d011      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	019a      	lsls	r2, r3, #6
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	041b      	lsls	r3, r3, #16
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	061b      	lsls	r3, r3, #24
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	071b      	lsls	r3, r3, #28
 8003af8:	4919      	ldr	r1, [pc, #100]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b00:	4b17      	ldr	r3, [pc, #92]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b0c:	f7fd fbc6 	bl	800129c <HAL_GetTick>
 8003b10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b14:	f7fd fbc2 	bl	800129c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	; 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e0d7      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b26:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	f040 80cd 	bne.w	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a08      	ldr	r2, [pc, #32]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b46:	f7fd fba9 	bl	800129c <HAL_GetTick>
 8003b4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b4e:	f7fd fba5 	bl	800129c <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b64      	cmp	r3, #100	; 0x64
 8003b5a:	d903      	bls.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e0ba      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b64:	4b5e      	ldr	r3, [pc, #376]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b70:	d0ed      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d02e      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d12a      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b9a:	4b51      	ldr	r3, [pc, #324]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ba8:	4b4d      	ldr	r3, [pc, #308]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bae:	0f1b      	lsrs	r3, r3, #28
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	019a      	lsls	r2, r3, #6
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	041b      	lsls	r3, r3, #16
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	061b      	lsls	r3, r3, #24
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	071b      	lsls	r3, r3, #28
 8003bce:	4944      	ldr	r1, [pc, #272]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bd6:	4b42      	ldr	r3, [pc, #264]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bdc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	3b01      	subs	r3, #1
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	493d      	ldr	r1, [pc, #244]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d022      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c04:	d11d      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c06:	4b36      	ldr	r3, [pc, #216]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0c:	0e1b      	lsrs	r3, r3, #24
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c14:	4b32      	ldr	r3, [pc, #200]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1a:	0f1b      	lsrs	r3, r3, #28
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	019a      	lsls	r2, r3, #6
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	061b      	lsls	r3, r3, #24
 8003c34:	431a      	orrs	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	071b      	lsls	r3, r3, #28
 8003c3a:	4929      	ldr	r1, [pc, #164]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d028      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c4e:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c54:	0e1b      	lsrs	r3, r3, #24
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c5c:	4b20      	ldr	r3, [pc, #128]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	0c1b      	lsrs	r3, r3, #16
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	019a      	lsls	r2, r3, #6
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	431a      	orrs	r2, r3
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	071b      	lsls	r3, r3, #28
 8003c82:	4917      	ldr	r1, [pc, #92]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c8a:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	4911      	ldr	r1, [pc, #68]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a0e      	ldr	r2, [pc, #56]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cac:	f7fd faf6 	bl	800129c <HAL_GetTick>
 8003cb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cb4:	f7fd faf2 	bl	800129c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e007      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd2:	d1ef      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800

08003ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e049      	b.n	8003d8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fc ff36 	bl	8000b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f000 f9ba 	bl	800409c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d001      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e054      	b.n	8003e56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d022      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd6:	d01d      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a22      	ldr	r2, [pc, #136]	; (8003e68 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d018      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a21      	ldr	r2, [pc, #132]	; (8003e6c <HAL_TIM_Base_Start_IT+0xd8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1f      	ldr	r2, [pc, #124]	; (8003e70 <HAL_TIM_Base_Start_IT+0xdc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <HAL_TIM_Base_Start_IT+0xe0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <HAL_TIM_Base_Start_IT+0xe4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1b      	ldr	r2, [pc, #108]	; (8003e7c <HAL_TIM_Base_Start_IT+0xe8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d115      	bne.n	8003e40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <HAL_TIM_Base_Start_IT+0xec>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b06      	cmp	r3, #6
 8003e24:	d015      	beq.n	8003e52 <HAL_TIM_Base_Start_IT+0xbe>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2c:	d011      	beq.n	8003e52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3e:	e008      	b.n	8003e52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	e000      	b.n	8003e54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40010000 	.word	0x40010000
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40000800 	.word	0x40000800
 8003e70:	40000c00 	.word	0x40000c00
 8003e74:	40010400 	.word	0x40010400
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40001800 	.word	0x40001800
 8003e80:	00010007 	.word	0x00010007

08003e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e0b4      	b.n	800400a <HAL_TIM_ConfigClockSource+0x186>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	4b56      	ldr	r3, [pc, #344]	; (8004014 <HAL_TIM_ConfigClockSource+0x190>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed8:	d03e      	beq.n	8003f58 <HAL_TIM_ConfigClockSource+0xd4>
 8003eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ede:	f200 8087 	bhi.w	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee6:	f000 8086 	beq.w	8003ff6 <HAL_TIM_ConfigClockSource+0x172>
 8003eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eee:	d87f      	bhi.n	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef0:	2b70      	cmp	r3, #112	; 0x70
 8003ef2:	d01a      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0xa6>
 8003ef4:	2b70      	cmp	r3, #112	; 0x70
 8003ef6:	d87b      	bhi.n	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef8:	2b60      	cmp	r3, #96	; 0x60
 8003efa:	d050      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x11a>
 8003efc:	2b60      	cmp	r3, #96	; 0x60
 8003efe:	d877      	bhi.n	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f00:	2b50      	cmp	r3, #80	; 0x50
 8003f02:	d03c      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0xfa>
 8003f04:	2b50      	cmp	r3, #80	; 0x50
 8003f06:	d873      	bhi.n	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f08:	2b40      	cmp	r3, #64	; 0x40
 8003f0a:	d058      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x13a>
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d86f      	bhi.n	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f10:	2b30      	cmp	r3, #48	; 0x30
 8003f12:	d064      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x15a>
 8003f14:	2b30      	cmp	r3, #48	; 0x30
 8003f16:	d86b      	bhi.n	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	d060      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x15a>
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d867      	bhi.n	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d05c      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x15a>
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d05a      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x15a>
 8003f28:	e062      	b.n	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6899      	ldr	r1, [r3, #8]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f000 fa5d 	bl	80043f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	609a      	str	r2, [r3, #8]
      break;
 8003f56:	e04f      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	6899      	ldr	r1, [r3, #8]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f000 fa46 	bl	80043f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f7a:	609a      	str	r2, [r3, #8]
      break;
 8003f7c:	e03c      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	6859      	ldr	r1, [r3, #4]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f000 f9ba 	bl	8004304 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2150      	movs	r1, #80	; 0x50
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 fa13 	bl	80043c2 <TIM_ITRx_SetConfig>
      break;
 8003f9c:	e02c      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6859      	ldr	r1, [r3, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f000 f9d9 	bl	8004362 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2160      	movs	r1, #96	; 0x60
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fa03 	bl	80043c2 <TIM_ITRx_SetConfig>
      break;
 8003fbc:	e01c      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6859      	ldr	r1, [r3, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f000 f99a 	bl	8004304 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2140      	movs	r1, #64	; 0x40
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f9f3 	bl	80043c2 <TIM_ITRx_SetConfig>
      break;
 8003fdc:	e00c      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4610      	mov	r0, r2
 8003fea:	f000 f9ea 	bl	80043c2 <TIM_ITRx_SetConfig>
      break;
 8003fee:	e003      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff4:	e000      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004008:	7bfb      	ldrb	r3, [r7, #15]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	fffeff88 	.word	0xfffeff88

08004018 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_TIM_SlaveConfigSynchro+0x18>
 800402c:	2302      	movs	r3, #2
 800402e:	e031      	b.n	8004094 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004040:	6839      	ldr	r1, [r7, #0]
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f8ca 	bl	80041dc <TIM_SlaveTimer_SetConfig>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e018      	b.n	8004094 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004070:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004080:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a40      	ldr	r2, [pc, #256]	; (80041b0 <TIM_Base_SetConfig+0x114>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <TIM_Base_SetConfig+0x40>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ba:	d00f      	beq.n	80040dc <TIM_Base_SetConfig+0x40>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a3d      	ldr	r2, [pc, #244]	; (80041b4 <TIM_Base_SetConfig+0x118>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00b      	beq.n	80040dc <TIM_Base_SetConfig+0x40>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a3c      	ldr	r2, [pc, #240]	; (80041b8 <TIM_Base_SetConfig+0x11c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d007      	beq.n	80040dc <TIM_Base_SetConfig+0x40>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a3b      	ldr	r2, [pc, #236]	; (80041bc <TIM_Base_SetConfig+0x120>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_Base_SetConfig+0x40>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a3a      	ldr	r2, [pc, #232]	; (80041c0 <TIM_Base_SetConfig+0x124>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d108      	bne.n	80040ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a2f      	ldr	r2, [pc, #188]	; (80041b0 <TIM_Base_SetConfig+0x114>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d02b      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fc:	d027      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a2c      	ldr	r2, [pc, #176]	; (80041b4 <TIM_Base_SetConfig+0x118>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d023      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a2b      	ldr	r2, [pc, #172]	; (80041b8 <TIM_Base_SetConfig+0x11c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01f      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a2a      	ldr	r2, [pc, #168]	; (80041bc <TIM_Base_SetConfig+0x120>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d01b      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a29      	ldr	r2, [pc, #164]	; (80041c0 <TIM_Base_SetConfig+0x124>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d017      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a28      	ldr	r2, [pc, #160]	; (80041c4 <TIM_Base_SetConfig+0x128>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a27      	ldr	r2, [pc, #156]	; (80041c8 <TIM_Base_SetConfig+0x12c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00f      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a26      	ldr	r2, [pc, #152]	; (80041cc <TIM_Base_SetConfig+0x130>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00b      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a25      	ldr	r2, [pc, #148]	; (80041d0 <TIM_Base_SetConfig+0x134>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d007      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a24      	ldr	r2, [pc, #144]	; (80041d4 <TIM_Base_SetConfig+0x138>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d003      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a23      	ldr	r2, [pc, #140]	; (80041d8 <TIM_Base_SetConfig+0x13c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d108      	bne.n	8004160 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <TIM_Base_SetConfig+0x114>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d003      	beq.n	8004194 <TIM_Base_SetConfig+0xf8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a0c      	ldr	r2, [pc, #48]	; (80041c0 <TIM_Base_SetConfig+0x124>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d103      	bne.n	800419c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	615a      	str	r2, [r3, #20]
}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800
 80041bc:	40000c00 	.word	0x40000c00
 80041c0:	40010400 	.word	0x40010400
 80041c4:	40014000 	.word	0x40014000
 80041c8:	40014400 	.word	0x40014400
 80041cc:	40014800 	.word	0x40014800
 80041d0:	40001800 	.word	0x40001800
 80041d4:	40001c00 	.word	0x40001c00
 80041d8:	40002000 	.word	0x40002000

080041dc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4b3e      	ldr	r3, [pc, #248]	; (8004300 <TIM_SlaveTimer_SetConfig+0x124>)
 8004208:	4013      	ands	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b70      	cmp	r3, #112	; 0x70
 8004224:	d01a      	beq.n	800425c <TIM_SlaveTimer_SetConfig+0x80>
 8004226:	2b70      	cmp	r3, #112	; 0x70
 8004228:	d860      	bhi.n	80042ec <TIM_SlaveTimer_SetConfig+0x110>
 800422a:	2b60      	cmp	r3, #96	; 0x60
 800422c:	d054      	beq.n	80042d8 <TIM_SlaveTimer_SetConfig+0xfc>
 800422e:	2b60      	cmp	r3, #96	; 0x60
 8004230:	d85c      	bhi.n	80042ec <TIM_SlaveTimer_SetConfig+0x110>
 8004232:	2b50      	cmp	r3, #80	; 0x50
 8004234:	d046      	beq.n	80042c4 <TIM_SlaveTimer_SetConfig+0xe8>
 8004236:	2b50      	cmp	r3, #80	; 0x50
 8004238:	d858      	bhi.n	80042ec <TIM_SlaveTimer_SetConfig+0x110>
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d019      	beq.n	8004272 <TIM_SlaveTimer_SetConfig+0x96>
 800423e:	2b40      	cmp	r3, #64	; 0x40
 8004240:	d854      	bhi.n	80042ec <TIM_SlaveTimer_SetConfig+0x110>
 8004242:	2b30      	cmp	r3, #48	; 0x30
 8004244:	d055      	beq.n	80042f2 <TIM_SlaveTimer_SetConfig+0x116>
 8004246:	2b30      	cmp	r3, #48	; 0x30
 8004248:	d850      	bhi.n	80042ec <TIM_SlaveTimer_SetConfig+0x110>
 800424a:	2b20      	cmp	r3, #32
 800424c:	d051      	beq.n	80042f2 <TIM_SlaveTimer_SetConfig+0x116>
 800424e:	2b20      	cmp	r3, #32
 8004250:	d84c      	bhi.n	80042ec <TIM_SlaveTimer_SetConfig+0x110>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d04d      	beq.n	80042f2 <TIM_SlaveTimer_SetConfig+0x116>
 8004256:	2b10      	cmp	r3, #16
 8004258:	d04b      	beq.n	80042f2 <TIM_SlaveTimer_SetConfig+0x116>
 800425a:	e047      	b.n	80042ec <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68d9      	ldr	r1, [r3, #12]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f000 f8c4 	bl	80043f8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004270:	e040      	b.n	80042f4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b05      	cmp	r3, #5
 8004278:	d101      	bne.n	800427e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e03b      	b.n	80042f6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6a1a      	ldr	r2, [r3, #32]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0201 	bic.w	r2, r2, #1
 8004294:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042a4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
      break;
 80042c2:	e017      	b.n	80042f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6899      	ldr	r1, [r3, #8]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	461a      	mov	r2, r3
 80042d2:	f000 f817 	bl	8004304 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80042d6:	e00d      	b.n	80042f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	6899      	ldr	r1, [r3, #8]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	461a      	mov	r2, r3
 80042e6:	f000 f83c 	bl	8004362 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80042ea:	e003      	b.n	80042f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	75fb      	strb	r3, [r7, #23]
      break;
 80042f0:	e000      	b.n	80042f4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80042f2:	bf00      	nop
  }

  return status;
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	fffefff8 	.word	0xfffefff8

08004304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f023 0201 	bic.w	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800432e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f023 030a 	bic.w	r3, r3, #10
 8004340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	621a      	str	r2, [r3, #32]
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004362:	b480      	push	{r7}
 8004364:	b087      	sub	sp, #28
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f023 0210 	bic.w	r2, r3, #16
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800438c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	031b      	lsls	r3, r3, #12
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800439e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	621a      	str	r2, [r3, #32]
}
 80043b6:	bf00      	nop
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	f043 0307 	orr.w	r3, r3, #7
 80043e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	609a      	str	r2, [r3, #8]
}
 80043ec:	bf00      	nop
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004412:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	021a      	lsls	r2, r3, #8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	431a      	orrs	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4313      	orrs	r3, r2
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	609a      	str	r2, [r3, #8]
}
 800442c:	bf00      	nop
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800444c:	2302      	movs	r3, #2
 800444e:	e06d      	b.n	800452c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a30      	ldr	r2, [pc, #192]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d004      	beq.n	8004484 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a2f      	ldr	r2, [pc, #188]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d108      	bne.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800448a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a20      	ldr	r2, [pc, #128]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d022      	beq.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c2:	d01d      	beq.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1d      	ldr	r2, [pc, #116]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d018      	beq.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1c      	ldr	r2, [pc, #112]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d013      	beq.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1a      	ldr	r2, [pc, #104]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00e      	beq.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a15      	ldr	r2, [pc, #84]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d009      	beq.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a16      	ldr	r2, [pc, #88]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d004      	beq.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a15      	ldr	r2, [pc, #84]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d10c      	bne.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004506:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	4313      	orrs	r3, r2
 8004510:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	40010000 	.word	0x40010000
 800453c:	40010400 	.word	0x40010400
 8004540:	40000400 	.word	0x40000400
 8004544:	40000800 	.word	0x40000800
 8004548:	40000c00 	.word	0x40000c00
 800454c:	40014000 	.word	0x40014000
 8004550:	40001800 	.word	0x40001800

08004554 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e040      	b.n	80045e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fc fb20 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2224      	movs	r2, #36	; 0x24
 8004580:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0201 	bic.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f82c 	bl	80045f0 <UART_SetConfig>
 8004598:	4603      	mov	r3, r0
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e022      	b.n	80045e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fa84 	bl	8004ab8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fb0b 	bl	8004bfc <UART_CheckIdleState>
 80045e6:	4603      	mov	r3, r0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4ba6      	ldr	r3, [pc, #664]	; (80048b4 <UART_SetConfig+0x2c4>)
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	6979      	ldr	r1, [r7, #20]
 8004624:	430b      	orrs	r3, r1
 8004626:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	430a      	orrs	r2, r1
 8004660:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a94      	ldr	r2, [pc, #592]	; (80048b8 <UART_SetConfig+0x2c8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d120      	bne.n	80046ae <UART_SetConfig+0xbe>
 800466c:	4b93      	ldr	r3, [pc, #588]	; (80048bc <UART_SetConfig+0x2cc>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	2b03      	cmp	r3, #3
 8004678:	d816      	bhi.n	80046a8 <UART_SetConfig+0xb8>
 800467a:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <UART_SetConfig+0x90>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	08004691 	.word	0x08004691
 8004684:	0800469d 	.word	0x0800469d
 8004688:	08004697 	.word	0x08004697
 800468c:	080046a3 	.word	0x080046a3
 8004690:	2301      	movs	r3, #1
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e150      	b.n	8004938 <UART_SetConfig+0x348>
 8004696:	2302      	movs	r3, #2
 8004698:	77fb      	strb	r3, [r7, #31]
 800469a:	e14d      	b.n	8004938 <UART_SetConfig+0x348>
 800469c:	2304      	movs	r3, #4
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e14a      	b.n	8004938 <UART_SetConfig+0x348>
 80046a2:	2308      	movs	r3, #8
 80046a4:	77fb      	strb	r3, [r7, #31]
 80046a6:	e147      	b.n	8004938 <UART_SetConfig+0x348>
 80046a8:	2310      	movs	r3, #16
 80046aa:	77fb      	strb	r3, [r7, #31]
 80046ac:	e144      	b.n	8004938 <UART_SetConfig+0x348>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a83      	ldr	r2, [pc, #524]	; (80048c0 <UART_SetConfig+0x2d0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d132      	bne.n	800471e <UART_SetConfig+0x12e>
 80046b8:	4b80      	ldr	r3, [pc, #512]	; (80048bc <UART_SetConfig+0x2cc>)
 80046ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b0c      	cmp	r3, #12
 80046c4:	d828      	bhi.n	8004718 <UART_SetConfig+0x128>
 80046c6:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <UART_SetConfig+0xdc>)
 80046c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046cc:	08004701 	.word	0x08004701
 80046d0:	08004719 	.word	0x08004719
 80046d4:	08004719 	.word	0x08004719
 80046d8:	08004719 	.word	0x08004719
 80046dc:	0800470d 	.word	0x0800470d
 80046e0:	08004719 	.word	0x08004719
 80046e4:	08004719 	.word	0x08004719
 80046e8:	08004719 	.word	0x08004719
 80046ec:	08004707 	.word	0x08004707
 80046f0:	08004719 	.word	0x08004719
 80046f4:	08004719 	.word	0x08004719
 80046f8:	08004719 	.word	0x08004719
 80046fc:	08004713 	.word	0x08004713
 8004700:	2300      	movs	r3, #0
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e118      	b.n	8004938 <UART_SetConfig+0x348>
 8004706:	2302      	movs	r3, #2
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e115      	b.n	8004938 <UART_SetConfig+0x348>
 800470c:	2304      	movs	r3, #4
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e112      	b.n	8004938 <UART_SetConfig+0x348>
 8004712:	2308      	movs	r3, #8
 8004714:	77fb      	strb	r3, [r7, #31]
 8004716:	e10f      	b.n	8004938 <UART_SetConfig+0x348>
 8004718:	2310      	movs	r3, #16
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e10c      	b.n	8004938 <UART_SetConfig+0x348>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a68      	ldr	r2, [pc, #416]	; (80048c4 <UART_SetConfig+0x2d4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d120      	bne.n	800476a <UART_SetConfig+0x17a>
 8004728:	4b64      	ldr	r3, [pc, #400]	; (80048bc <UART_SetConfig+0x2cc>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004732:	2b30      	cmp	r3, #48	; 0x30
 8004734:	d013      	beq.n	800475e <UART_SetConfig+0x16e>
 8004736:	2b30      	cmp	r3, #48	; 0x30
 8004738:	d814      	bhi.n	8004764 <UART_SetConfig+0x174>
 800473a:	2b20      	cmp	r3, #32
 800473c:	d009      	beq.n	8004752 <UART_SetConfig+0x162>
 800473e:	2b20      	cmp	r3, #32
 8004740:	d810      	bhi.n	8004764 <UART_SetConfig+0x174>
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <UART_SetConfig+0x15c>
 8004746:	2b10      	cmp	r3, #16
 8004748:	d006      	beq.n	8004758 <UART_SetConfig+0x168>
 800474a:	e00b      	b.n	8004764 <UART_SetConfig+0x174>
 800474c:	2300      	movs	r3, #0
 800474e:	77fb      	strb	r3, [r7, #31]
 8004750:	e0f2      	b.n	8004938 <UART_SetConfig+0x348>
 8004752:	2302      	movs	r3, #2
 8004754:	77fb      	strb	r3, [r7, #31]
 8004756:	e0ef      	b.n	8004938 <UART_SetConfig+0x348>
 8004758:	2304      	movs	r3, #4
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e0ec      	b.n	8004938 <UART_SetConfig+0x348>
 800475e:	2308      	movs	r3, #8
 8004760:	77fb      	strb	r3, [r7, #31]
 8004762:	e0e9      	b.n	8004938 <UART_SetConfig+0x348>
 8004764:	2310      	movs	r3, #16
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e0e6      	b.n	8004938 <UART_SetConfig+0x348>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a56      	ldr	r2, [pc, #344]	; (80048c8 <UART_SetConfig+0x2d8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d120      	bne.n	80047b6 <UART_SetConfig+0x1c6>
 8004774:	4b51      	ldr	r3, [pc, #324]	; (80048bc <UART_SetConfig+0x2cc>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800477e:	2bc0      	cmp	r3, #192	; 0xc0
 8004780:	d013      	beq.n	80047aa <UART_SetConfig+0x1ba>
 8004782:	2bc0      	cmp	r3, #192	; 0xc0
 8004784:	d814      	bhi.n	80047b0 <UART_SetConfig+0x1c0>
 8004786:	2b80      	cmp	r3, #128	; 0x80
 8004788:	d009      	beq.n	800479e <UART_SetConfig+0x1ae>
 800478a:	2b80      	cmp	r3, #128	; 0x80
 800478c:	d810      	bhi.n	80047b0 <UART_SetConfig+0x1c0>
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <UART_SetConfig+0x1a8>
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	d006      	beq.n	80047a4 <UART_SetConfig+0x1b4>
 8004796:	e00b      	b.n	80047b0 <UART_SetConfig+0x1c0>
 8004798:	2300      	movs	r3, #0
 800479a:	77fb      	strb	r3, [r7, #31]
 800479c:	e0cc      	b.n	8004938 <UART_SetConfig+0x348>
 800479e:	2302      	movs	r3, #2
 80047a0:	77fb      	strb	r3, [r7, #31]
 80047a2:	e0c9      	b.n	8004938 <UART_SetConfig+0x348>
 80047a4:	2304      	movs	r3, #4
 80047a6:	77fb      	strb	r3, [r7, #31]
 80047a8:	e0c6      	b.n	8004938 <UART_SetConfig+0x348>
 80047aa:	2308      	movs	r3, #8
 80047ac:	77fb      	strb	r3, [r7, #31]
 80047ae:	e0c3      	b.n	8004938 <UART_SetConfig+0x348>
 80047b0:	2310      	movs	r3, #16
 80047b2:	77fb      	strb	r3, [r7, #31]
 80047b4:	e0c0      	b.n	8004938 <UART_SetConfig+0x348>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a44      	ldr	r2, [pc, #272]	; (80048cc <UART_SetConfig+0x2dc>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d125      	bne.n	800480c <UART_SetConfig+0x21c>
 80047c0:	4b3e      	ldr	r3, [pc, #248]	; (80048bc <UART_SetConfig+0x2cc>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ce:	d017      	beq.n	8004800 <UART_SetConfig+0x210>
 80047d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047d4:	d817      	bhi.n	8004806 <UART_SetConfig+0x216>
 80047d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047da:	d00b      	beq.n	80047f4 <UART_SetConfig+0x204>
 80047dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e0:	d811      	bhi.n	8004806 <UART_SetConfig+0x216>
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <UART_SetConfig+0x1fe>
 80047e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ea:	d006      	beq.n	80047fa <UART_SetConfig+0x20a>
 80047ec:	e00b      	b.n	8004806 <UART_SetConfig+0x216>
 80047ee:	2300      	movs	r3, #0
 80047f0:	77fb      	strb	r3, [r7, #31]
 80047f2:	e0a1      	b.n	8004938 <UART_SetConfig+0x348>
 80047f4:	2302      	movs	r3, #2
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	e09e      	b.n	8004938 <UART_SetConfig+0x348>
 80047fa:	2304      	movs	r3, #4
 80047fc:	77fb      	strb	r3, [r7, #31]
 80047fe:	e09b      	b.n	8004938 <UART_SetConfig+0x348>
 8004800:	2308      	movs	r3, #8
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e098      	b.n	8004938 <UART_SetConfig+0x348>
 8004806:	2310      	movs	r3, #16
 8004808:	77fb      	strb	r3, [r7, #31]
 800480a:	e095      	b.n	8004938 <UART_SetConfig+0x348>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a2f      	ldr	r2, [pc, #188]	; (80048d0 <UART_SetConfig+0x2e0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d125      	bne.n	8004862 <UART_SetConfig+0x272>
 8004816:	4b29      	ldr	r3, [pc, #164]	; (80048bc <UART_SetConfig+0x2cc>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004820:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004824:	d017      	beq.n	8004856 <UART_SetConfig+0x266>
 8004826:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800482a:	d817      	bhi.n	800485c <UART_SetConfig+0x26c>
 800482c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004830:	d00b      	beq.n	800484a <UART_SetConfig+0x25a>
 8004832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004836:	d811      	bhi.n	800485c <UART_SetConfig+0x26c>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <UART_SetConfig+0x254>
 800483c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004840:	d006      	beq.n	8004850 <UART_SetConfig+0x260>
 8004842:	e00b      	b.n	800485c <UART_SetConfig+0x26c>
 8004844:	2301      	movs	r3, #1
 8004846:	77fb      	strb	r3, [r7, #31]
 8004848:	e076      	b.n	8004938 <UART_SetConfig+0x348>
 800484a:	2302      	movs	r3, #2
 800484c:	77fb      	strb	r3, [r7, #31]
 800484e:	e073      	b.n	8004938 <UART_SetConfig+0x348>
 8004850:	2304      	movs	r3, #4
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e070      	b.n	8004938 <UART_SetConfig+0x348>
 8004856:	2308      	movs	r3, #8
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e06d      	b.n	8004938 <UART_SetConfig+0x348>
 800485c:	2310      	movs	r3, #16
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e06a      	b.n	8004938 <UART_SetConfig+0x348>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1b      	ldr	r2, [pc, #108]	; (80048d4 <UART_SetConfig+0x2e4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d138      	bne.n	80048de <UART_SetConfig+0x2ee>
 800486c:	4b13      	ldr	r3, [pc, #76]	; (80048bc <UART_SetConfig+0x2cc>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004872:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004876:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800487a:	d017      	beq.n	80048ac <UART_SetConfig+0x2bc>
 800487c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004880:	d82a      	bhi.n	80048d8 <UART_SetConfig+0x2e8>
 8004882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004886:	d00b      	beq.n	80048a0 <UART_SetConfig+0x2b0>
 8004888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488c:	d824      	bhi.n	80048d8 <UART_SetConfig+0x2e8>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <UART_SetConfig+0x2aa>
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004896:	d006      	beq.n	80048a6 <UART_SetConfig+0x2b6>
 8004898:	e01e      	b.n	80048d8 <UART_SetConfig+0x2e8>
 800489a:	2300      	movs	r3, #0
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e04b      	b.n	8004938 <UART_SetConfig+0x348>
 80048a0:	2302      	movs	r3, #2
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e048      	b.n	8004938 <UART_SetConfig+0x348>
 80048a6:	2304      	movs	r3, #4
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e045      	b.n	8004938 <UART_SetConfig+0x348>
 80048ac:	2308      	movs	r3, #8
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e042      	b.n	8004938 <UART_SetConfig+0x348>
 80048b2:	bf00      	nop
 80048b4:	efff69f3 	.word	0xefff69f3
 80048b8:	40011000 	.word	0x40011000
 80048bc:	40023800 	.word	0x40023800
 80048c0:	40004400 	.word	0x40004400
 80048c4:	40004800 	.word	0x40004800
 80048c8:	40004c00 	.word	0x40004c00
 80048cc:	40005000 	.word	0x40005000
 80048d0:	40011400 	.word	0x40011400
 80048d4:	40007800 	.word	0x40007800
 80048d8:	2310      	movs	r3, #16
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e02c      	b.n	8004938 <UART_SetConfig+0x348>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a72      	ldr	r2, [pc, #456]	; (8004aac <UART_SetConfig+0x4bc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d125      	bne.n	8004934 <UART_SetConfig+0x344>
 80048e8:	4b71      	ldr	r3, [pc, #452]	; (8004ab0 <UART_SetConfig+0x4c0>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048f6:	d017      	beq.n	8004928 <UART_SetConfig+0x338>
 80048f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048fc:	d817      	bhi.n	800492e <UART_SetConfig+0x33e>
 80048fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004902:	d00b      	beq.n	800491c <UART_SetConfig+0x32c>
 8004904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004908:	d811      	bhi.n	800492e <UART_SetConfig+0x33e>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <UART_SetConfig+0x326>
 800490e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004912:	d006      	beq.n	8004922 <UART_SetConfig+0x332>
 8004914:	e00b      	b.n	800492e <UART_SetConfig+0x33e>
 8004916:	2300      	movs	r3, #0
 8004918:	77fb      	strb	r3, [r7, #31]
 800491a:	e00d      	b.n	8004938 <UART_SetConfig+0x348>
 800491c:	2302      	movs	r3, #2
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e00a      	b.n	8004938 <UART_SetConfig+0x348>
 8004922:	2304      	movs	r3, #4
 8004924:	77fb      	strb	r3, [r7, #31]
 8004926:	e007      	b.n	8004938 <UART_SetConfig+0x348>
 8004928:	2308      	movs	r3, #8
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e004      	b.n	8004938 <UART_SetConfig+0x348>
 800492e:	2310      	movs	r3, #16
 8004930:	77fb      	strb	r3, [r7, #31]
 8004932:	e001      	b.n	8004938 <UART_SetConfig+0x348>
 8004934:	2310      	movs	r3, #16
 8004936:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004940:	d15b      	bne.n	80049fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004942:	7ffb      	ldrb	r3, [r7, #31]
 8004944:	2b08      	cmp	r3, #8
 8004946:	d828      	bhi.n	800499a <UART_SetConfig+0x3aa>
 8004948:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <UART_SetConfig+0x360>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004975 	.word	0x08004975
 8004954:	0800497d 	.word	0x0800497d
 8004958:	08004985 	.word	0x08004985
 800495c:	0800499b 	.word	0x0800499b
 8004960:	0800498b 	.word	0x0800498b
 8004964:	0800499b 	.word	0x0800499b
 8004968:	0800499b 	.word	0x0800499b
 800496c:	0800499b 	.word	0x0800499b
 8004970:	08004993 	.word	0x08004993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004974:	f7fe fd9e 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8004978:	61b8      	str	r0, [r7, #24]
        break;
 800497a:	e013      	b.n	80049a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800497c:	f7fe fdae 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8004980:	61b8      	str	r0, [r7, #24]
        break;
 8004982:	e00f      	b.n	80049a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004984:	4b4b      	ldr	r3, [pc, #300]	; (8004ab4 <UART_SetConfig+0x4c4>)
 8004986:	61bb      	str	r3, [r7, #24]
        break;
 8004988:	e00c      	b.n	80049a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800498a:	f7fe fc81 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 800498e:	61b8      	str	r0, [r7, #24]
        break;
 8004990:	e008      	b.n	80049a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004996:	61bb      	str	r3, [r7, #24]
        break;
 8004998:	e004      	b.n	80049a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	77bb      	strb	r3, [r7, #30]
        break;
 80049a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d074      	beq.n	8004a94 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	005a      	lsls	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	085b      	lsrs	r3, r3, #1
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80049be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	2b0f      	cmp	r3, #15
 80049c4:	d916      	bls.n	80049f4 <UART_SetConfig+0x404>
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049cc:	d212      	bcs.n	80049f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f023 030f 	bic.w	r3, r3, #15
 80049d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	b29b      	uxth	r3, r3
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	89fb      	ldrh	r3, [r7, #14]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	89fa      	ldrh	r2, [r7, #14]
 80049f0:	60da      	str	r2, [r3, #12]
 80049f2:	e04f      	b.n	8004a94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	77bb      	strb	r3, [r7, #30]
 80049f8:	e04c      	b.n	8004a94 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049fa:	7ffb      	ldrb	r3, [r7, #31]
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d828      	bhi.n	8004a52 <UART_SetConfig+0x462>
 8004a00:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <UART_SetConfig+0x418>)
 8004a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a06:	bf00      	nop
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004a35 	.word	0x08004a35
 8004a10:	08004a3d 	.word	0x08004a3d
 8004a14:	08004a53 	.word	0x08004a53
 8004a18:	08004a43 	.word	0x08004a43
 8004a1c:	08004a53 	.word	0x08004a53
 8004a20:	08004a53 	.word	0x08004a53
 8004a24:	08004a53 	.word	0x08004a53
 8004a28:	08004a4b 	.word	0x08004a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a2c:	f7fe fd42 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8004a30:	61b8      	str	r0, [r7, #24]
        break;
 8004a32:	e013      	b.n	8004a5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a34:	f7fe fd52 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8004a38:	61b8      	str	r0, [r7, #24]
        break;
 8004a3a:	e00f      	b.n	8004a5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a3c:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <UART_SetConfig+0x4c4>)
 8004a3e:	61bb      	str	r3, [r7, #24]
        break;
 8004a40:	e00c      	b.n	8004a5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a42:	f7fe fc25 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 8004a46:	61b8      	str	r0, [r7, #24]
        break;
 8004a48:	e008      	b.n	8004a5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a4e:	61bb      	str	r3, [r7, #24]
        break;
 8004a50:	e004      	b.n	8004a5c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	77bb      	strb	r3, [r7, #30]
        break;
 8004a5a:	bf00      	nop
    }

    if (pclk != 0U)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d018      	beq.n	8004a94 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	085a      	lsrs	r2, r3, #1
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	441a      	add	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b0f      	cmp	r3, #15
 8004a7a:	d909      	bls.n	8004a90 <UART_SetConfig+0x4a0>
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a82:	d205      	bcs.n	8004a90 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60da      	str	r2, [r3, #12]
 8004a8e:	e001      	b.n	8004a94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004aa0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40007c00 	.word	0x40007c00
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	00f42400 	.word	0x00f42400

08004ab8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	f003 0310 	and.w	r3, r3, #16
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01a      	beq.n	8004bce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bb6:	d10a      	bne.n	8004bce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c0c:	f7fc fb46 	bl	800129c <HAL_GetTick>
 8004c10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d10e      	bne.n	8004c3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f817 	bl	8004c62 <UART_WaitOnFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e00d      	b.n	8004c5a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b09c      	sub	sp, #112	; 0x70
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	603b      	str	r3, [r7, #0]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c72:	e0a5      	b.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	f000 80a1 	beq.w	8004dc0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7e:	f7fc fb0d 	bl	800129c <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d302      	bcc.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d13e      	bne.n	8004d12 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ca8:	667b      	str	r3, [r7, #100]	; 0x64
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cb4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e6      	bne.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3308      	adds	r3, #8
 8004ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	f023 0301 	bic.w	r3, r3, #1
 8004cdc:	663b      	str	r3, [r7, #96]	; 0x60
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ce6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ce8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1e5      	bne.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e067      	b.n	8004de2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d04f      	beq.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2e:	d147      	bne.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e6      	bne.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3308      	adds	r3, #8
 8004d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f023 0301 	bic.w	r3, r3, #1
 8004d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d8c:	623a      	str	r2, [r7, #32]
 8004d8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	69f9      	ldr	r1, [r7, #28]
 8004d92:	6a3a      	ldr	r2, [r7, #32]
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e5      	bne.n	8004d6c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e010      	b.n	8004de2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	f43f af4a 	beq.w	8004c74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3770      	adds	r7, #112	; 0x70
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 129;
 8004df2:	4b8d      	ldr	r3, [pc, #564]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004df4:	2281      	movs	r2, #129	; 0x81
 8004df6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 244;
 8004df8:	4b8b      	ldr	r3, [pc, #556]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004dfa:	22f4      	movs	r2, #244	; 0xf4
 8004dfc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 42;
 8004dfe:	4b8a      	ldr	r3, [pc, #552]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004e00:	222a      	movs	r2, #42	; 0x2a
 8004e02:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 51;
 8004e04:	4b88      	ldr	r3, [pc, #544]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004e06:	2233      	movs	r2, #51	; 0x33
 8004e08:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004e0a:	4b88      	ldr	r3, [pc, #544]	; (800502c <MX_LWIP_Init+0x240>)
 8004e0c:	22ff      	movs	r2, #255	; 0xff
 8004e0e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004e10:	4b86      	ldr	r3, [pc, #536]	; (800502c <MX_LWIP_Init+0x240>)
 8004e12:	22ff      	movs	r2, #255	; 0xff
 8004e14:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004e16:	4b85      	ldr	r3, [pc, #532]	; (800502c <MX_LWIP_Init+0x240>)
 8004e18:	22ff      	movs	r2, #255	; 0xff
 8004e1a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004e1c:	4b83      	ldr	r3, [pc, #524]	; (800502c <MX_LWIP_Init+0x240>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 129;
 8004e22:	4b83      	ldr	r3, [pc, #524]	; (8005030 <MX_LWIP_Init+0x244>)
 8004e24:	2281      	movs	r2, #129	; 0x81
 8004e26:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 244;
 8004e28:	4b81      	ldr	r3, [pc, #516]	; (8005030 <MX_LWIP_Init+0x244>)
 8004e2a:	22f4      	movs	r2, #244	; 0xf4
 8004e2c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 42;
 8004e2e:	4b80      	ldr	r3, [pc, #512]	; (8005030 <MX_LWIP_Init+0x244>)
 8004e30:	222a      	movs	r2, #42	; 0x2a
 8004e32:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004e34:	4b7e      	ldr	r3, [pc, #504]	; (8005030 <MX_LWIP_Init+0x244>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004e3a:	f000 fbff 	bl	800563c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004e3e:	4b7a      	ldr	r3, [pc, #488]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	061a      	lsls	r2, r3, #24
 8004e44:	4b78      	ldr	r3, [pc, #480]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	4b76      	ldr	r3, [pc, #472]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004e4e:	789b      	ldrb	r3, [r3, #2]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	4313      	orrs	r3, r2
 8004e54:	4a74      	ldr	r2, [pc, #464]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004e56:	78d2      	ldrb	r2, [r2, #3]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	061a      	lsls	r2, r3, #24
 8004e5c:	4b72      	ldr	r3, [pc, #456]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	0619      	lsls	r1, r3, #24
 8004e62:	4b71      	ldr	r3, [pc, #452]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004e64:	785b      	ldrb	r3, [r3, #1]
 8004e66:	041b      	lsls	r3, r3, #16
 8004e68:	4319      	orrs	r1, r3
 8004e6a:	4b6f      	ldr	r3, [pc, #444]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004e6c:	789b      	ldrb	r3, [r3, #2]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	430b      	orrs	r3, r1
 8004e72:	496d      	ldr	r1, [pc, #436]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004e74:	78c9      	ldrb	r1, [r1, #3]
 8004e76:	430b      	orrs	r3, r1
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	4b69      	ldr	r3, [pc, #420]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	0619      	lsls	r1, r3, #24
 8004e86:	4b68      	ldr	r3, [pc, #416]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004e88:	785b      	ldrb	r3, [r3, #1]
 8004e8a:	041b      	lsls	r3, r3, #16
 8004e8c:	4319      	orrs	r1, r3
 8004e8e:	4b66      	ldr	r3, [pc, #408]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004e90:	789b      	ldrb	r3, [r3, #2]
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	430b      	orrs	r3, r1
 8004e96:	4964      	ldr	r1, [pc, #400]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004e98:	78c9      	ldrb	r1, [r1, #3]
 8004e9a:	430b      	orrs	r3, r1
 8004e9c:	0a1b      	lsrs	r3, r3, #8
 8004e9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	4b60      	ldr	r3, [pc, #384]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	0619      	lsls	r1, r3, #24
 8004eaa:	4b5f      	ldr	r3, [pc, #380]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004eac:	785b      	ldrb	r3, [r3, #1]
 8004eae:	041b      	lsls	r3, r3, #16
 8004eb0:	4319      	orrs	r1, r3
 8004eb2:	4b5d      	ldr	r3, [pc, #372]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004eb4:	789b      	ldrb	r3, [r3, #2]
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	495b      	ldr	r1, [pc, #364]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004ebc:	78c9      	ldrb	r1, [r1, #3]
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	0e1b      	lsrs	r3, r3, #24
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	4a5b      	ldr	r2, [pc, #364]	; (8005034 <MX_LWIP_Init+0x248>)
 8004ec6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004ec8:	4b58      	ldr	r3, [pc, #352]	; (800502c <MX_LWIP_Init+0x240>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	061a      	lsls	r2, r3, #24
 8004ece:	4b57      	ldr	r3, [pc, #348]	; (800502c <MX_LWIP_Init+0x240>)
 8004ed0:	785b      	ldrb	r3, [r3, #1]
 8004ed2:	041b      	lsls	r3, r3, #16
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	4b55      	ldr	r3, [pc, #340]	; (800502c <MX_LWIP_Init+0x240>)
 8004ed8:	789b      	ldrb	r3, [r3, #2]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	4313      	orrs	r3, r2
 8004ede:	4a53      	ldr	r2, [pc, #332]	; (800502c <MX_LWIP_Init+0x240>)
 8004ee0:	78d2      	ldrb	r2, [r2, #3]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	061a      	lsls	r2, r3, #24
 8004ee6:	4b51      	ldr	r3, [pc, #324]	; (800502c <MX_LWIP_Init+0x240>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	0619      	lsls	r1, r3, #24
 8004eec:	4b4f      	ldr	r3, [pc, #316]	; (800502c <MX_LWIP_Init+0x240>)
 8004eee:	785b      	ldrb	r3, [r3, #1]
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	4319      	orrs	r1, r3
 8004ef4:	4b4d      	ldr	r3, [pc, #308]	; (800502c <MX_LWIP_Init+0x240>)
 8004ef6:	789b      	ldrb	r3, [r3, #2]
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	430b      	orrs	r3, r1
 8004efc:	494b      	ldr	r1, [pc, #300]	; (800502c <MX_LWIP_Init+0x240>)
 8004efe:	78c9      	ldrb	r1, [r1, #3]
 8004f00:	430b      	orrs	r3, r1
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	4b48      	ldr	r3, [pc, #288]	; (800502c <MX_LWIP_Init+0x240>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	0619      	lsls	r1, r3, #24
 8004f10:	4b46      	ldr	r3, [pc, #280]	; (800502c <MX_LWIP_Init+0x240>)
 8004f12:	785b      	ldrb	r3, [r3, #1]
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	4319      	orrs	r1, r3
 8004f18:	4b44      	ldr	r3, [pc, #272]	; (800502c <MX_LWIP_Init+0x240>)
 8004f1a:	789b      	ldrb	r3, [r3, #2]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	4942      	ldr	r1, [pc, #264]	; (800502c <MX_LWIP_Init+0x240>)
 8004f22:	78c9      	ldrb	r1, [r1, #3]
 8004f24:	430b      	orrs	r3, r1
 8004f26:	0a1b      	lsrs	r3, r3, #8
 8004f28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	4b3f      	ldr	r3, [pc, #252]	; (800502c <MX_LWIP_Init+0x240>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	0619      	lsls	r1, r3, #24
 8004f34:	4b3d      	ldr	r3, [pc, #244]	; (800502c <MX_LWIP_Init+0x240>)
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	041b      	lsls	r3, r3, #16
 8004f3a:	4319      	orrs	r1, r3
 8004f3c:	4b3b      	ldr	r3, [pc, #236]	; (800502c <MX_LWIP_Init+0x240>)
 8004f3e:	789b      	ldrb	r3, [r3, #2]
 8004f40:	021b      	lsls	r3, r3, #8
 8004f42:	430b      	orrs	r3, r1
 8004f44:	4939      	ldr	r1, [pc, #228]	; (800502c <MX_LWIP_Init+0x240>)
 8004f46:	78c9      	ldrb	r1, [r1, #3]
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	0e1b      	lsrs	r3, r3, #24
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	4a3a      	ldr	r2, [pc, #232]	; (8005038 <MX_LWIP_Init+0x24c>)
 8004f50:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004f52:	4b37      	ldr	r3, [pc, #220]	; (8005030 <MX_LWIP_Init+0x244>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	061a      	lsls	r2, r3, #24
 8004f58:	4b35      	ldr	r3, [pc, #212]	; (8005030 <MX_LWIP_Init+0x244>)
 8004f5a:	785b      	ldrb	r3, [r3, #1]
 8004f5c:	041b      	lsls	r3, r3, #16
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	4b33      	ldr	r3, [pc, #204]	; (8005030 <MX_LWIP_Init+0x244>)
 8004f62:	789b      	ldrb	r3, [r3, #2]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	4313      	orrs	r3, r2
 8004f68:	4a31      	ldr	r2, [pc, #196]	; (8005030 <MX_LWIP_Init+0x244>)
 8004f6a:	78d2      	ldrb	r2, [r2, #3]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	061a      	lsls	r2, r3, #24
 8004f70:	4b2f      	ldr	r3, [pc, #188]	; (8005030 <MX_LWIP_Init+0x244>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	0619      	lsls	r1, r3, #24
 8004f76:	4b2e      	ldr	r3, [pc, #184]	; (8005030 <MX_LWIP_Init+0x244>)
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	041b      	lsls	r3, r3, #16
 8004f7c:	4319      	orrs	r1, r3
 8004f7e:	4b2c      	ldr	r3, [pc, #176]	; (8005030 <MX_LWIP_Init+0x244>)
 8004f80:	789b      	ldrb	r3, [r3, #2]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	430b      	orrs	r3, r1
 8004f86:	492a      	ldr	r1, [pc, #168]	; (8005030 <MX_LWIP_Init+0x244>)
 8004f88:	78c9      	ldrb	r1, [r1, #3]
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f92:	431a      	orrs	r2, r3
 8004f94:	4b26      	ldr	r3, [pc, #152]	; (8005030 <MX_LWIP_Init+0x244>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	0619      	lsls	r1, r3, #24
 8004f9a:	4b25      	ldr	r3, [pc, #148]	; (8005030 <MX_LWIP_Init+0x244>)
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	041b      	lsls	r3, r3, #16
 8004fa0:	4319      	orrs	r1, r3
 8004fa2:	4b23      	ldr	r3, [pc, #140]	; (8005030 <MX_LWIP_Init+0x244>)
 8004fa4:	789b      	ldrb	r3, [r3, #2]
 8004fa6:	021b      	lsls	r3, r3, #8
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	4921      	ldr	r1, [pc, #132]	; (8005030 <MX_LWIP_Init+0x244>)
 8004fac:	78c9      	ldrb	r1, [r1, #3]
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	0a1b      	lsrs	r3, r3, #8
 8004fb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <MX_LWIP_Init+0x244>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	0619      	lsls	r1, r3, #24
 8004fbe:	4b1c      	ldr	r3, [pc, #112]	; (8005030 <MX_LWIP_Init+0x244>)
 8004fc0:	785b      	ldrb	r3, [r3, #1]
 8004fc2:	041b      	lsls	r3, r3, #16
 8004fc4:	4319      	orrs	r1, r3
 8004fc6:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <MX_LWIP_Init+0x244>)
 8004fc8:	789b      	ldrb	r3, [r3, #2]
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	4918      	ldr	r1, [pc, #96]	; (8005030 <MX_LWIP_Init+0x244>)
 8004fd0:	78c9      	ldrb	r1, [r1, #3]
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	0e1b      	lsrs	r3, r3, #24
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	4a18      	ldr	r2, [pc, #96]	; (800503c <MX_LWIP_Init+0x250>)
 8004fda:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004fdc:	4b18      	ldr	r3, [pc, #96]	; (8005040 <MX_LWIP_Init+0x254>)
 8004fde:	9302      	str	r3, [sp, #8]
 8004fe0:	4b18      	ldr	r3, [pc, #96]	; (8005044 <MX_LWIP_Init+0x258>)
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	4b14      	ldr	r3, [pc, #80]	; (800503c <MX_LWIP_Init+0x250>)
 8004fea:	4a13      	ldr	r2, [pc, #76]	; (8005038 <MX_LWIP_Init+0x24c>)
 8004fec:	4911      	ldr	r1, [pc, #68]	; (8005034 <MX_LWIP_Init+0x248>)
 8004fee:	4816      	ldr	r0, [pc, #88]	; (8005048 <MX_LWIP_Init+0x25c>)
 8004ff0:	f000 ffca 	bl	8005f88 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004ff4:	4814      	ldr	r0, [pc, #80]	; (8005048 <MX_LWIP_Init+0x25c>)
 8004ff6:	f001 f979 	bl	80062ec <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004ffa:	4b13      	ldr	r3, [pc, #76]	; (8005048 <MX_LWIP_Init+0x25c>)
 8004ffc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005000:	089b      	lsrs	r3, r3, #2
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800500c:	480e      	ldr	r0, [pc, #56]	; (8005048 <MX_LWIP_Init+0x25c>)
 800500e:	f001 f97d 	bl	800630c <netif_set_up>
 8005012:	e002      	b.n	800501a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005014:	480c      	ldr	r0, [pc, #48]	; (8005048 <MX_LWIP_Init+0x25c>)
 8005016:	f001 f9e5 	bl	80063e4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800501a:	490c      	ldr	r1, [pc, #48]	; (800504c <MX_LWIP_Init+0x260>)
 800501c:	480a      	ldr	r0, [pc, #40]	; (8005048 <MX_LWIP_Init+0x25c>)
 800501e:	f001 fa13 	bl	8006448 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005022:	bf00      	nop
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	200001b8 	.word	0x200001b8
 800502c:	200001bc 	.word	0x200001bc
 8005030:	200001c0 	.word	0x200001c0
 8005034:	200001ac 	.word	0x200001ac
 8005038:	200001b0 	.word	0x200001b0
 800503c:	200001b4 	.word	0x200001b4
 8005040:	0800f17d 	.word	0x0800f17d
 8005044:	08005469 	.word	0x08005469
 8005048:	20000178 	.word	0x20000178
 800504c:	080054d5 	.word	0x080054d5

08005050 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08e      	sub	sp, #56	; 0x38
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	605a      	str	r2, [r3, #4]
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	60da      	str	r2, [r3, #12]
 8005066:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a52      	ldr	r2, [pc, #328]	; (80051b8 <HAL_ETH_MspInit+0x168>)
 800506e:	4293      	cmp	r3, r2
 8005070:	f040 809e 	bne.w	80051b0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005074:	4b51      	ldr	r3, [pc, #324]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	4a50      	ldr	r2, [pc, #320]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 800507a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800507e:	6313      	str	r3, [r2, #48]	; 0x30
 8005080:	4b4e      	ldr	r3, [pc, #312]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005088:	623b      	str	r3, [r7, #32]
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	4b4b      	ldr	r3, [pc, #300]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	4a4a      	ldr	r2, [pc, #296]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 8005092:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005096:	6313      	str	r3, [r2, #48]	; 0x30
 8005098:	4b48      	ldr	r3, [pc, #288]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050a0:	61fb      	str	r3, [r7, #28]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	4b45      	ldr	r3, [pc, #276]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	4a44      	ldr	r2, [pc, #272]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 80050aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050ae:	6313      	str	r3, [r2, #48]	; 0x30
 80050b0:	4b42      	ldr	r3, [pc, #264]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050b8:	61bb      	str	r3, [r7, #24]
 80050ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050bc:	4b3f      	ldr	r3, [pc, #252]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	4a3e      	ldr	r2, [pc, #248]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 80050c2:	f043 0304 	orr.w	r3, r3, #4
 80050c6:	6313      	str	r3, [r2, #48]	; 0x30
 80050c8:	4b3c      	ldr	r3, [pc, #240]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d4:	4b39      	ldr	r3, [pc, #228]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	4a38      	ldr	r2, [pc, #224]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	6313      	str	r3, [r2, #48]	; 0x30
 80050e0:	4b36      	ldr	r3, [pc, #216]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ec:	4b33      	ldr	r3, [pc, #204]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	4a32      	ldr	r2, [pc, #200]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 80050f2:	f043 0302 	orr.w	r3, r3, #2
 80050f6:	6313      	str	r3, [r2, #48]	; 0x30
 80050f8:	4b30      	ldr	r3, [pc, #192]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005104:	4b2d      	ldr	r3, [pc, #180]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 8005106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005108:	4a2c      	ldr	r2, [pc, #176]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 800510a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800510e:	6313      	str	r3, [r2, #48]	; 0x30
 8005110:	4b2a      	ldr	r3, [pc, #168]	; (80051bc <HAL_ETH_MspInit+0x16c>)
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005118:	60bb      	str	r3, [r7, #8]
 800511a:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800511c:	2332      	movs	r3, #50	; 0x32
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005120:	2302      	movs	r3, #2
 8005122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005124:	2300      	movs	r3, #0
 8005126:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005128:	2303      	movs	r3, #3
 800512a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800512c:	230b      	movs	r3, #11
 800512e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005134:	4619      	mov	r1, r3
 8005136:	4822      	ldr	r0, [pc, #136]	; (80051c0 <HAL_ETH_MspInit+0x170>)
 8005138:	f7fd fae0 	bl	80026fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800513c:	2386      	movs	r3, #134	; 0x86
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005140:	2302      	movs	r3, #2
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005144:	2300      	movs	r3, #0
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005148:	2303      	movs	r3, #3
 800514a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800514c:	230b      	movs	r3, #11
 800514e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005154:	4619      	mov	r1, r3
 8005156:	481b      	ldr	r0, [pc, #108]	; (80051c4 <HAL_ETH_MspInit+0x174>)
 8005158:	f7fd fad0 	bl	80026fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 800515c:	f242 0301 	movw	r3, #8193	; 0x2001
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005162:	2302      	movs	r3, #2
 8005164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005166:	2300      	movs	r3, #0
 8005168:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800516a:	2303      	movs	r3, #3
 800516c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800516e:	230b      	movs	r3, #11
 8005170:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005176:	4619      	mov	r1, r3
 8005178:	4813      	ldr	r0, [pc, #76]	; (80051c8 <HAL_ETH_MspInit+0x178>)
 800517a:	f7fd fabf 	bl	80026fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800517e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005184:	2302      	movs	r3, #2
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005188:	2300      	movs	r3, #0
 800518a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800518c:	2303      	movs	r3, #3
 800518e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005190:	230b      	movs	r3, #11
 8005192:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005198:	4619      	mov	r1, r3
 800519a:	480c      	ldr	r0, [pc, #48]	; (80051cc <HAL_ETH_MspInit+0x17c>)
 800519c:	f7fd faae 	bl	80026fc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80051a0:	2200      	movs	r2, #0
 80051a2:	2100      	movs	r1, #0
 80051a4:	203d      	movs	r0, #61	; 0x3d
 80051a6:	f7fc f984 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80051aa:	203d      	movs	r0, #61	; 0x3d
 80051ac:	f7fc f99d 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80051b0:	bf00      	nop
 80051b2:	3738      	adds	r7, #56	; 0x38
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40028000 	.word	0x40028000
 80051bc:	40023800 	.word	0x40023800
 80051c0:	40020800 	.word	0x40020800
 80051c4:	40020000 	.word	0x40020000
 80051c8:	40020400 	.word	0x40020400
 80051cc:	40021800 	.word	0x40021800

080051d0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80051dc:	4b4d      	ldr	r3, [pc, #308]	; (8005314 <low_level_init+0x144>)
 80051de:	4a4e      	ldr	r2, [pc, #312]	; (8005318 <low_level_init+0x148>)
 80051e0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80051e2:	4b4c      	ldr	r3, [pc, #304]	; (8005314 <low_level_init+0x144>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80051e8:	4b4a      	ldr	r3, [pc, #296]	; (8005314 <low_level_init+0x144>)
 80051ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051ee:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80051f0:	4b48      	ldr	r3, [pc, #288]	; (8005314 <low_level_init+0x144>)
 80051f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051f6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80051f8:	4b46      	ldr	r3, [pc, #280]	; (8005314 <low_level_init+0x144>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80051fe:	2300      	movs	r3, #0
 8005200:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005202:	2380      	movs	r3, #128	; 0x80
 8005204:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005206:	23e1      	movs	r3, #225	; 0xe1
 8005208:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800520a:	2300      	movs	r3, #0
 800520c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800520e:	2300      	movs	r3, #0
 8005210:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005212:	2300      	movs	r3, #0
 8005214:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005216:	4a3f      	ldr	r2, [pc, #252]	; (8005314 <low_level_init+0x144>)
 8005218:	f107 0308 	add.w	r3, r7, #8
 800521c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800521e:	4b3d      	ldr	r3, [pc, #244]	; (8005314 <low_level_init+0x144>)
 8005220:	2200      	movs	r2, #0
 8005222:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005224:	4b3b      	ldr	r3, [pc, #236]	; (8005314 <low_level_init+0x144>)
 8005226:	2200      	movs	r2, #0
 8005228:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800522a:	4b3a      	ldr	r3, [pc, #232]	; (8005314 <low_level_init+0x144>)
 800522c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005230:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005232:	4838      	ldr	r0, [pc, #224]	; (8005314 <low_level_init+0x144>)
 8005234:	f7fc f974 	bl	8001520 <HAL_ETH_Init>
 8005238:	4603      	mov	r3, r0
 800523a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800523c:	7dfb      	ldrb	r3, [r7, #23]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d108      	bne.n	8005254 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005248:	f043 0304 	orr.w	r3, r3, #4
 800524c:	b2da      	uxtb	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005254:	2304      	movs	r3, #4
 8005256:	4a31      	ldr	r2, [pc, #196]	; (800531c <low_level_init+0x14c>)
 8005258:	4931      	ldr	r1, [pc, #196]	; (8005320 <low_level_init+0x150>)
 800525a:	482e      	ldr	r0, [pc, #184]	; (8005314 <low_level_init+0x144>)
 800525c:	f7fc faf8 	bl	8001850 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005260:	2304      	movs	r3, #4
 8005262:	4a30      	ldr	r2, [pc, #192]	; (8005324 <low_level_init+0x154>)
 8005264:	4930      	ldr	r1, [pc, #192]	; (8005328 <low_level_init+0x158>)
 8005266:	482b      	ldr	r0, [pc, #172]	; (8005314 <low_level_init+0x144>)
 8005268:	f7fc fb5a 	bl	8001920 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2206      	movs	r2, #6
 8005270:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005274:	4b27      	ldr	r3, [pc, #156]	; (8005314 <low_level_init+0x144>)
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	781a      	ldrb	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005280:	4b24      	ldr	r3, [pc, #144]	; (8005314 <low_level_init+0x144>)
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	785a      	ldrb	r2, [r3, #1]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800528c:	4b21      	ldr	r3, [pc, #132]	; (8005314 <low_level_init+0x144>)
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	789a      	ldrb	r2, [r3, #2]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005298:	4b1e      	ldr	r3, [pc, #120]	; (8005314 <low_level_init+0x144>)
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	78da      	ldrb	r2, [r3, #3]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80052a4:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <low_level_init+0x144>)
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	791a      	ldrb	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80052b0:	4b18      	ldr	r3, [pc, #96]	; (8005314 <low_level_init+0x144>)
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	795a      	ldrb	r2, [r3, #5]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80052c2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80052ca:	f043 030a 	orr.w	r3, r3, #10
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80052d6:	480f      	ldr	r0, [pc, #60]	; (8005314 <low_level_init+0x144>)
 80052d8:	f7fc fdc8 	bl	8001e6c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80052dc:	f107 0310 	add.w	r3, r7, #16
 80052e0:	461a      	mov	r2, r3
 80052e2:	211d      	movs	r1, #29
 80052e4:	480b      	ldr	r0, [pc, #44]	; (8005314 <low_level_init+0x144>)
 80052e6:	f7fc fcf3 	bl	8001cd0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f043 030b 	orr.w	r3, r3, #11
 80052f0:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	461a      	mov	r2, r3
 80052f6:	211d      	movs	r1, #29
 80052f8:	4806      	ldr	r0, [pc, #24]	; (8005314 <low_level_init+0x144>)
 80052fa:	f7fc fd51 	bl	8001da0 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80052fe:	f107 0310 	add.w	r3, r7, #16
 8005302:	461a      	mov	r2, r3
 8005304:	211d      	movs	r1, #29
 8005306:	4803      	ldr	r0, [pc, #12]	; (8005314 <low_level_init+0x144>)
 8005308:	f7fc fce2 	bl	8001cd0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800530c:	bf00      	nop
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20003264 	.word	0x20003264
 8005318:	40028000 	.word	0x40028000
 800531c:	20001a94 	.word	0x20001a94
 8005320:	20000244 	.word	0x20000244
 8005324:	200002c4 	.word	0x200002c4
 8005328:	200001c4 	.word	0x200001c4

0800532c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08a      	sub	sp, #40	; 0x28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005336:	4b4b      	ldr	r3, [pc, #300]	; (8005464 <low_level_output+0x138>)
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800534e:	4b45      	ldr	r3, [pc, #276]	; (8005464 <low_level_output+0x138>)
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	623b      	str	r3, [r7, #32]
 800535c:	e05a      	b.n	8005414 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	da03      	bge.n	800536e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005366:	23f8      	movs	r3, #248	; 0xf8
 8005368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800536c:	e05c      	b.n	8005428 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	895b      	ldrh	r3, [r3, #10]
 8005372:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005378:	e02f      	b.n	80053da <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	18d0      	adds	r0, r2, r3
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	18d1      	adds	r1, r2, r3
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	461a      	mov	r2, r3
 8005392:	f009 fffd 	bl	800f390 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	da03      	bge.n	80053ac <low_level_output+0x80>
        {
          errval = ERR_USE;
 80053a4:	23f8      	movs	r3, #248	; 0xf8
 80053a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80053aa:	e03d      	b.n	8005428 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80053bc:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80053c8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80053d4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	4413      	add	r3, r2
 80053e0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d8c8      	bhi.n	800537a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	18d0      	adds	r0, r2, r3
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4413      	add	r3, r2
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4619      	mov	r1, r3
 80053fa:	f009 ffc9 	bl	800f390 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	623b      	str	r3, [r7, #32]
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1a1      	bne.n	800535e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800541a:	6979      	ldr	r1, [r7, #20]
 800541c:	4811      	ldr	r0, [pc, #68]	; (8005464 <low_level_output+0x138>)
 800541e:	f7fc faeb 	bl	80019f8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005428:	4b0e      	ldr	r3, [pc, #56]	; (8005464 <low_level_output+0x138>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00d      	beq.n	8005456 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800543a:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <low_level_output+0x138>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005442:	461a      	mov	r2, r3
 8005444:	2320      	movs	r3, #32
 8005446:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005448:	4b06      	ldr	r3, [pc, #24]	; (8005464 <low_level_output+0x138>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005450:	461a      	mov	r2, r3
 8005452:	2300      	movs	r3, #0
 8005454:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8005456:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800545a:	4618      	mov	r0, r3
 800545c:	3728      	adds	r7, #40	; 0x28
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20003264 	.word	0x20003264

08005468 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <ethernetif_init+0x1c>
 8005476:	4b0e      	ldr	r3, [pc, #56]	; (80054b0 <ethernetif_init+0x48>)
 8005478:	f240 221a 	movw	r2, #538	; 0x21a
 800547c:	490d      	ldr	r1, [pc, #52]	; (80054b4 <ethernetif_init+0x4c>)
 800547e:	480e      	ldr	r0, [pc, #56]	; (80054b8 <ethernetif_init+0x50>)
 8005480:	f009 ff9c 	bl	800f3bc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2273      	movs	r2, #115	; 0x73
 8005488:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2274      	movs	r2, #116	; 0x74
 8005490:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a09      	ldr	r2, [pc, #36]	; (80054bc <ethernetif_init+0x54>)
 8005498:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a08      	ldr	r2, [pc, #32]	; (80054c0 <ethernetif_init+0x58>)
 800549e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff fe95 	bl	80051d0 <low_level_init>

  return ERR_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	080104f8 	.word	0x080104f8
 80054b4:	08010514 	.word	0x08010514
 80054b8:	08010524 	.word	0x08010524
 80054bc:	0800d515 	.word	0x0800d515
 80054c0:	0800532d 	.word	0x0800532d

080054c4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80054c8:	f7fb fee8 	bl	800129c <HAL_GetTick>
 80054cc:	4603      	mov	r3, r0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80054ea:	089b      	lsrs	r3, r3, #2
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d05d      	beq.n	80055b2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80054f6:	4b34      	ldr	r3, [pc, #208]	; (80055c8 <ethernetif_update_config+0xf4>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d03f      	beq.n	800557e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80054fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005502:	2100      	movs	r1, #0
 8005504:	4830      	ldr	r0, [pc, #192]	; (80055c8 <ethernetif_update_config+0xf4>)
 8005506:	f7fc fc4b 	bl	8001da0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800550a:	f7fb fec7 	bl	800129c <HAL_GetTick>
 800550e:	4603      	mov	r3, r0
 8005510:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005512:	f107 0308 	add.w	r3, r7, #8
 8005516:	461a      	mov	r2, r3
 8005518:	2101      	movs	r1, #1
 800551a:	482b      	ldr	r0, [pc, #172]	; (80055c8 <ethernetif_update_config+0xf4>)
 800551c:	f7fc fbd8 	bl	8001cd0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005520:	f7fb febc 	bl	800129c <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800552e:	d828      	bhi.n	8005582 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0eb      	beq.n	8005512 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800553a:	f107 0308 	add.w	r3, r7, #8
 800553e:	461a      	mov	r2, r3
 8005540:	2110      	movs	r1, #16
 8005542:	4821      	ldr	r0, [pc, #132]	; (80055c8 <ethernetif_update_config+0xf4>)
 8005544:	f7fc fbc4 	bl	8001cd0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	d004      	beq.n	800555c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005552:	4b1d      	ldr	r3, [pc, #116]	; (80055c8 <ethernetif_update_config+0xf4>)
 8005554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005558:	60da      	str	r2, [r3, #12]
 800555a:	e002      	b.n	8005562 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800555c:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <ethernetif_update_config+0xf4>)
 800555e:	2200      	movs	r2, #0
 8005560:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800556c:	4b16      	ldr	r3, [pc, #88]	; (80055c8 <ethernetif_update_config+0xf4>)
 800556e:	2200      	movs	r2, #0
 8005570:	609a      	str	r2, [r3, #8]
 8005572:	e016      	b.n	80055a2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005574:	4b14      	ldr	r3, [pc, #80]	; (80055c8 <ethernetif_update_config+0xf4>)
 8005576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800557a:	609a      	str	r2, [r3, #8]
 800557c:	e011      	b.n	80055a2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800557e:	bf00      	nop
 8005580:	e000      	b.n	8005584 <ethernetif_update_config+0xb0>
          goto error;
 8005582:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005584:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <ethernetif_update_config+0xf4>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	08db      	lsrs	r3, r3, #3
 800558a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800558c:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <ethernetif_update_config+0xf4>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005594:	4313      	orrs	r3, r2
 8005596:	b29b      	uxth	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	2100      	movs	r1, #0
 800559c:	480a      	ldr	r0, [pc, #40]	; (80055c8 <ethernetif_update_config+0xf4>)
 800559e:	f7fc fbff 	bl	8001da0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80055a2:	2100      	movs	r1, #0
 80055a4:	4808      	ldr	r0, [pc, #32]	; (80055c8 <ethernetif_update_config+0xf4>)
 80055a6:	f7fc fcbf 	bl	8001f28 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80055aa:	4807      	ldr	r0, [pc, #28]	; (80055c8 <ethernetif_update_config+0xf4>)
 80055ac:	f7fc fc5e 	bl	8001e6c <HAL_ETH_Start>
 80055b0:	e002      	b.n	80055b8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80055b2:	4805      	ldr	r0, [pc, #20]	; (80055c8 <ethernetif_update_config+0xf4>)
 80055b4:	f7fc fc89 	bl	8001eca <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f807 	bl	80055cc <ethernetif_notify_conn_changed>
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20003264 	.word	0x20003264

080055cc <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	021b      	lsls	r3, r3, #8
 80055ee:	b21a      	sxth	r2, r3
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	0a1b      	lsrs	r3, r3, #8
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	b21b      	sxth	r3, r3
 80055f8:	4313      	orrs	r3, r2
 80055fa:	b21b      	sxth	r3, r3
 80055fc:	b29b      	uxth	r3, r3
}
 80055fe:	4618      	mov	r0, r3
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	061a      	lsls	r2, r3, #24
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	021b      	lsls	r3, r3, #8
 800561a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	0a1b      	lsrs	r3, r3, #8
 8005624:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	0e1b      	lsrs	r3, r3, #24
 800562e:	4313      	orrs	r3, r2
}
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005646:	f000 f8d5 	bl	80057f4 <mem_init>
  memp_init();
 800564a:	f000 fbdb 	bl	8005e04 <memp_init>
  pbuf_init();
  netif_init();
 800564e:	f000 fc93 	bl	8005f78 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005652:	f007 f959 	bl	800c908 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005656:	f001 fce5 	bl	8007024 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800565a:	f007 f90d 	bl	800c878 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005672:	4b05      	ldr	r3, [pc, #20]	; (8005688 <ptr_to_mem+0x20>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	88fb      	ldrh	r3, [r7, #6]
 8005678:	4413      	add	r3, r2
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20005ad8 	.word	0x20005ad8

0800568c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005694:	4b05      	ldr	r3, [pc, #20]	; (80056ac <mem_to_ptr+0x20>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	b29b      	uxth	r3, r3
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	20005ad8 	.word	0x20005ad8

080056b0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80056b0:	b590      	push	{r4, r7, lr}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80056b8:	4b45      	ldr	r3, [pc, #276]	; (80057d0 <plug_holes+0x120>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d206      	bcs.n	80056d0 <plug_holes+0x20>
 80056c2:	4b44      	ldr	r3, [pc, #272]	; (80057d4 <plug_holes+0x124>)
 80056c4:	f240 12df 	movw	r2, #479	; 0x1df
 80056c8:	4943      	ldr	r1, [pc, #268]	; (80057d8 <plug_holes+0x128>)
 80056ca:	4844      	ldr	r0, [pc, #272]	; (80057dc <plug_holes+0x12c>)
 80056cc:	f009 fe76 	bl	800f3bc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80056d0:	4b43      	ldr	r3, [pc, #268]	; (80057e0 <plug_holes+0x130>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d306      	bcc.n	80056e8 <plug_holes+0x38>
 80056da:	4b3e      	ldr	r3, [pc, #248]	; (80057d4 <plug_holes+0x124>)
 80056dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80056e0:	4940      	ldr	r1, [pc, #256]	; (80057e4 <plug_holes+0x134>)
 80056e2:	483e      	ldr	r0, [pc, #248]	; (80057dc <plug_holes+0x12c>)
 80056e4:	f009 fe6a 	bl	800f3bc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	791b      	ldrb	r3, [r3, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d006      	beq.n	80056fe <plug_holes+0x4e>
 80056f0:	4b38      	ldr	r3, [pc, #224]	; (80057d4 <plug_holes+0x124>)
 80056f2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80056f6:	493c      	ldr	r1, [pc, #240]	; (80057e8 <plug_holes+0x138>)
 80056f8:	4838      	ldr	r0, [pc, #224]	; (80057dc <plug_holes+0x12c>)
 80056fa:	f009 fe5f 	bl	800f3bc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005706:	d906      	bls.n	8005716 <plug_holes+0x66>
 8005708:	4b32      	ldr	r3, [pc, #200]	; (80057d4 <plug_holes+0x124>)
 800570a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800570e:	4937      	ldr	r1, [pc, #220]	; (80057ec <plug_holes+0x13c>)
 8005710:	4832      	ldr	r0, [pc, #200]	; (80057dc <plug_holes+0x12c>)
 8005712:	f009 fe53 	bl	800f3bc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff ffa4 	bl	8005668 <ptr_to_mem>
 8005720:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	429a      	cmp	r2, r3
 8005728:	d024      	beq.n	8005774 <plug_holes+0xc4>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	791b      	ldrb	r3, [r3, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d120      	bne.n	8005774 <plug_holes+0xc4>
 8005732:	4b2b      	ldr	r3, [pc, #172]	; (80057e0 <plug_holes+0x130>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	429a      	cmp	r2, r3
 800573a:	d01b      	beq.n	8005774 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800573c:	4b2c      	ldr	r3, [pc, #176]	; (80057f0 <plug_holes+0x140>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	429a      	cmp	r2, r3
 8005744:	d102      	bne.n	800574c <plug_holes+0x9c>
      lfree = mem;
 8005746:	4a2a      	ldr	r2, [pc, #168]	; (80057f0 <plug_holes+0x140>)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	881a      	ldrh	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800575c:	d00a      	beq.n	8005774 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff ff80 	bl	8005668 <ptr_to_mem>
 8005768:	4604      	mov	r4, r0
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff ff8e 	bl	800568c <mem_to_ptr>
 8005770:	4603      	mov	r3, r0
 8005772:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	885b      	ldrh	r3, [r3, #2]
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff ff75 	bl	8005668 <ptr_to_mem>
 800577e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	429a      	cmp	r2, r3
 8005786:	d01f      	beq.n	80057c8 <plug_holes+0x118>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	791b      	ldrb	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d11b      	bne.n	80057c8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005790:	4b17      	ldr	r3, [pc, #92]	; (80057f0 <plug_holes+0x140>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	429a      	cmp	r2, r3
 8005798:	d102      	bne.n	80057a0 <plug_holes+0xf0>
      lfree = pmem;
 800579a:	4a15      	ldr	r2, [pc, #84]	; (80057f0 <plug_holes+0x140>)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	881a      	ldrh	r2, [r3, #0]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80057b0:	d00a      	beq.n	80057c8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff ff56 	bl	8005668 <ptr_to_mem>
 80057bc:	4604      	mov	r4, r0
 80057be:	68b8      	ldr	r0, [r7, #8]
 80057c0:	f7ff ff64 	bl	800568c <mem_to_ptr>
 80057c4:	4603      	mov	r3, r0
 80057c6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80057c8:	bf00      	nop
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd90      	pop	{r4, r7, pc}
 80057d0:	20005ad8 	.word	0x20005ad8
 80057d4:	0801054c 	.word	0x0801054c
 80057d8:	0801057c 	.word	0x0801057c
 80057dc:	08010594 	.word	0x08010594
 80057e0:	20005adc 	.word	0x20005adc
 80057e4:	080105bc 	.word	0x080105bc
 80057e8:	080105d8 	.word	0x080105d8
 80057ec:	080105f4 	.word	0x080105f4
 80057f0:	20005ae0 	.word	0x20005ae0

080057f4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80057fa:	4b18      	ldr	r3, [pc, #96]	; (800585c <mem_init+0x68>)
 80057fc:	3303      	adds	r3, #3
 80057fe:	f023 0303 	bic.w	r3, r3, #3
 8005802:	461a      	mov	r2, r3
 8005804:	4b16      	ldr	r3, [pc, #88]	; (8005860 <mem_init+0x6c>)
 8005806:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005808:	4b15      	ldr	r3, [pc, #84]	; (8005860 <mem_init+0x6c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005814:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005822:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8005826:	f7ff ff1f 	bl	8005668 <ptr_to_mem>
 800582a:	4603      	mov	r3, r0
 800582c:	4a0d      	ldr	r2, [pc, #52]	; (8005864 <mem_init+0x70>)
 800582e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005830:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <mem_init+0x70>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2201      	movs	r2, #1
 8005836:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005838:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <mem_init+0x70>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005840:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005842:	4b08      	ldr	r3, [pc, #32]	; (8005864 <mem_init+0x70>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800584a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800584c:	4b04      	ldr	r3, [pc, #16]	; (8005860 <mem_init+0x6c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a05      	ldr	r2, [pc, #20]	; (8005868 <mem_init+0x74>)
 8005852:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005854:	bf00      	nop
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	200032c4 	.word	0x200032c4
 8005860:	20005ad8 	.word	0x20005ad8
 8005864:	20005adc 	.word	0x20005adc
 8005868:	20005ae0 	.word	0x20005ae0

0800586c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7ff ff09 	bl	800568c <mem_to_ptr>
 800587a:	4603      	mov	r3, r0
 800587c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff fef0 	bl	8005668 <ptr_to_mem>
 8005888:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	885b      	ldrh	r3, [r3, #2]
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff feea 	bl	8005668 <ptr_to_mem>
 8005894:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800589e:	d818      	bhi.n	80058d2 <mem_link_valid+0x66>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	885b      	ldrh	r3, [r3, #2]
 80058a4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80058a8:	d813      	bhi.n	80058d2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80058ae:	8afa      	ldrh	r2, [r7, #22]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d004      	beq.n	80058be <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	8afa      	ldrh	r2, [r7, #22]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d109      	bne.n	80058d2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80058be:	4b08      	ldr	r3, [pc, #32]	; (80058e0 <mem_link_valid+0x74>)
 80058c0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d006      	beq.n	80058d6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	885b      	ldrh	r3, [r3, #2]
 80058cc:	8afa      	ldrh	r2, [r7, #22]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d001      	beq.n	80058d6 <mem_link_valid+0x6a>
    return 0;
 80058d2:	2300      	movs	r3, #0
 80058d4:	e000      	b.n	80058d8 <mem_link_valid+0x6c>
  }
  return 1;
 80058d6:	2301      	movs	r3, #1
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	20005adc 	.word	0x20005adc

080058e4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d04c      	beq.n	800598c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d007      	beq.n	800590c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80058fc:	4b25      	ldr	r3, [pc, #148]	; (8005994 <mem_free+0xb0>)
 80058fe:	f240 2273 	movw	r2, #627	; 0x273
 8005902:	4925      	ldr	r1, [pc, #148]	; (8005998 <mem_free+0xb4>)
 8005904:	4825      	ldr	r0, [pc, #148]	; (800599c <mem_free+0xb8>)
 8005906:	f009 fd59 	bl	800f3bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800590a:	e040      	b.n	800598e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3b08      	subs	r3, #8
 8005910:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005912:	4b23      	ldr	r3, [pc, #140]	; (80059a0 <mem_free+0xbc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	429a      	cmp	r2, r3
 800591a:	d306      	bcc.n	800592a <mem_free+0x46>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f103 020c 	add.w	r2, r3, #12
 8005922:	4b20      	ldr	r3, [pc, #128]	; (80059a4 <mem_free+0xc0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d907      	bls.n	800593a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800592a:	4b1a      	ldr	r3, [pc, #104]	; (8005994 <mem_free+0xb0>)
 800592c:	f240 227f 	movw	r2, #639	; 0x27f
 8005930:	491d      	ldr	r1, [pc, #116]	; (80059a8 <mem_free+0xc4>)
 8005932:	481a      	ldr	r0, [pc, #104]	; (800599c <mem_free+0xb8>)
 8005934:	f009 fd42 	bl	800f3bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005938:	e029      	b.n	800598e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	791b      	ldrb	r3, [r3, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d107      	bne.n	8005952 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005942:	4b14      	ldr	r3, [pc, #80]	; (8005994 <mem_free+0xb0>)
 8005944:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005948:	4918      	ldr	r1, [pc, #96]	; (80059ac <mem_free+0xc8>)
 800594a:	4814      	ldr	r0, [pc, #80]	; (800599c <mem_free+0xb8>)
 800594c:	f009 fd36 	bl	800f3bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005950:	e01d      	b.n	800598e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7ff ff8a 	bl	800586c <mem_link_valid>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d107      	bne.n	800596e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800595e:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <mem_free+0xb0>)
 8005960:	f240 2295 	movw	r2, #661	; 0x295
 8005964:	4912      	ldr	r1, [pc, #72]	; (80059b0 <mem_free+0xcc>)
 8005966:	480d      	ldr	r0, [pc, #52]	; (800599c <mem_free+0xb8>)
 8005968:	f009 fd28 	bl	800f3bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800596c:	e00f      	b.n	800598e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005974:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <mem_free+0xd0>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	429a      	cmp	r2, r3
 800597c:	d202      	bcs.n	8005984 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800597e:	4a0d      	ldr	r2, [pc, #52]	; (80059b4 <mem_free+0xd0>)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f7ff fe93 	bl	80056b0 <plug_holes>
 800598a:	e000      	b.n	800598e <mem_free+0xaa>
    return;
 800598c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	0801054c 	.word	0x0801054c
 8005998:	08010620 	.word	0x08010620
 800599c:	08010594 	.word	0x08010594
 80059a0:	20005ad8 	.word	0x20005ad8
 80059a4:	20005adc 	.word	0x20005adc
 80059a8:	08010644 	.word	0x08010644
 80059ac:	08010660 	.word	0x08010660
 80059b0:	08010688 	.word	0x08010688
 80059b4:	20005ae0 	.word	0x20005ae0

080059b8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80059c4:	887b      	ldrh	r3, [r7, #2]
 80059c6:	3303      	adds	r3, #3
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f023 0303 	bic.w	r3, r3, #3
 80059ce:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80059d0:	8bfb      	ldrh	r3, [r7, #30]
 80059d2:	2b0b      	cmp	r3, #11
 80059d4:	d801      	bhi.n	80059da <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80059d6:	230c      	movs	r3, #12
 80059d8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80059da:	8bfb      	ldrh	r3, [r7, #30]
 80059dc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80059e0:	d803      	bhi.n	80059ea <mem_trim+0x32>
 80059e2:	8bfa      	ldrh	r2, [r7, #30]
 80059e4:	887b      	ldrh	r3, [r7, #2]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d201      	bcs.n	80059ee <mem_trim+0x36>
    return NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e0cc      	b.n	8005b88 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80059ee:	4b68      	ldr	r3, [pc, #416]	; (8005b90 <mem_trim+0x1d8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d304      	bcc.n	8005a02 <mem_trim+0x4a>
 80059f8:	4b66      	ldr	r3, [pc, #408]	; (8005b94 <mem_trim+0x1dc>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d306      	bcc.n	8005a10 <mem_trim+0x58>
 8005a02:	4b65      	ldr	r3, [pc, #404]	; (8005b98 <mem_trim+0x1e0>)
 8005a04:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005a08:	4964      	ldr	r1, [pc, #400]	; (8005b9c <mem_trim+0x1e4>)
 8005a0a:	4865      	ldr	r0, [pc, #404]	; (8005ba0 <mem_trim+0x1e8>)
 8005a0c:	f009 fcd6 	bl	800f3bc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005a10:	4b5f      	ldr	r3, [pc, #380]	; (8005b90 <mem_trim+0x1d8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d304      	bcc.n	8005a24 <mem_trim+0x6c>
 8005a1a:	4b5e      	ldr	r3, [pc, #376]	; (8005b94 <mem_trim+0x1dc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d301      	bcc.n	8005a28 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	e0af      	b.n	8005b88 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3b08      	subs	r3, #8
 8005a2c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005a2e:	69b8      	ldr	r0, [r7, #24]
 8005a30:	f7ff fe2c 	bl	800568c <mem_to_ptr>
 8005a34:	4603      	mov	r3, r0
 8005a36:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	881a      	ldrh	r2, [r3, #0]
 8005a3c:	8afb      	ldrh	r3, [r7, #22]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b08      	subs	r3, #8
 8005a44:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005a46:	8bfa      	ldrh	r2, [r7, #30]
 8005a48:	8abb      	ldrh	r3, [r7, #20]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d906      	bls.n	8005a5c <mem_trim+0xa4>
 8005a4e:	4b52      	ldr	r3, [pc, #328]	; (8005b98 <mem_trim+0x1e0>)
 8005a50:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005a54:	4953      	ldr	r1, [pc, #332]	; (8005ba4 <mem_trim+0x1ec>)
 8005a56:	4852      	ldr	r0, [pc, #328]	; (8005ba0 <mem_trim+0x1e8>)
 8005a58:	f009 fcb0 	bl	800f3bc <iprintf>
  if (newsize > size) {
 8005a5c:	8bfa      	ldrh	r2, [r7, #30]
 8005a5e:	8abb      	ldrh	r3, [r7, #20]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d901      	bls.n	8005a68 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005a64:	2300      	movs	r3, #0
 8005a66:	e08f      	b.n	8005b88 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005a68:	8bfa      	ldrh	r2, [r7, #30]
 8005a6a:	8abb      	ldrh	r3, [r7, #20]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d101      	bne.n	8005a74 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	e089      	b.n	8005b88 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff fdf5 	bl	8005668 <ptr_to_mem>
 8005a7e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	791b      	ldrb	r3, [r3, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d13f      	bne.n	8005b08 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005a90:	d106      	bne.n	8005aa0 <mem_trim+0xe8>
 8005a92:	4b41      	ldr	r3, [pc, #260]	; (8005b98 <mem_trim+0x1e0>)
 8005a94:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005a98:	4943      	ldr	r1, [pc, #268]	; (8005ba8 <mem_trim+0x1f0>)
 8005a9a:	4841      	ldr	r0, [pc, #260]	; (8005ba0 <mem_trim+0x1e8>)
 8005a9c:	f009 fc8e 	bl	800f3bc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005aa6:	8afa      	ldrh	r2, [r7, #22]
 8005aa8:	8bfb      	ldrh	r3, [r7, #30]
 8005aaa:	4413      	add	r3, r2
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3308      	adds	r3, #8
 8005ab0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005ab2:	4b3e      	ldr	r3, [pc, #248]	; (8005bac <mem_trim+0x1f4>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d106      	bne.n	8005aca <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005abc:	89fb      	ldrh	r3, [r7, #14]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff fdd2 	bl	8005668 <ptr_to_mem>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	4a39      	ldr	r2, [pc, #228]	; (8005bac <mem_trim+0x1f4>)
 8005ac8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005aca:	89fb      	ldrh	r3, [r7, #14]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fdcb 	bl	8005668 <ptr_to_mem>
 8005ad2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	89ba      	ldrh	r2, [r7, #12]
 8005ade:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	8afa      	ldrh	r2, [r7, #22]
 8005ae4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	89fa      	ldrh	r2, [r7, #14]
 8005aea:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005af4:	d047      	beq.n	8005b86 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff fdb4 	bl	8005668 <ptr_to_mem>
 8005b00:	4602      	mov	r2, r0
 8005b02:	89fb      	ldrh	r3, [r7, #14]
 8005b04:	8053      	strh	r3, [r2, #2]
 8005b06:	e03e      	b.n	8005b86 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005b08:	8bfb      	ldrh	r3, [r7, #30]
 8005b0a:	f103 0214 	add.w	r2, r3, #20
 8005b0e:	8abb      	ldrh	r3, [r7, #20]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d838      	bhi.n	8005b86 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005b14:	8afa      	ldrh	r2, [r7, #22]
 8005b16:	8bfb      	ldrh	r3, [r7, #30]
 8005b18:	4413      	add	r3, r2
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005b28:	d106      	bne.n	8005b38 <mem_trim+0x180>
 8005b2a:	4b1b      	ldr	r3, [pc, #108]	; (8005b98 <mem_trim+0x1e0>)
 8005b2c:	f240 3216 	movw	r2, #790	; 0x316
 8005b30:	491d      	ldr	r1, [pc, #116]	; (8005ba8 <mem_trim+0x1f0>)
 8005b32:	481b      	ldr	r0, [pc, #108]	; (8005ba0 <mem_trim+0x1e8>)
 8005b34:	f009 fc42 	bl	800f3bc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005b38:	89fb      	ldrh	r3, [r7, #14]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff fd94 	bl	8005668 <ptr_to_mem>
 8005b40:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005b42:	4b1a      	ldr	r3, [pc, #104]	; (8005bac <mem_trim+0x1f4>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d202      	bcs.n	8005b52 <mem_trim+0x19a>
      lfree = mem2;
 8005b4c:	4a17      	ldr	r2, [pc, #92]	; (8005bac <mem_trim+0x1f4>)
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2200      	movs	r2, #0
 8005b56:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	881a      	ldrh	r2, [r3, #0]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	8afa      	ldrh	r2, [r7, #22]
 8005b64:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	89fa      	ldrh	r2, [r7, #14]
 8005b6a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005b74:	d007      	beq.n	8005b86 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff fd74 	bl	8005668 <ptr_to_mem>
 8005b80:	4602      	mov	r2, r0
 8005b82:	89fb      	ldrh	r3, [r7, #14]
 8005b84:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005b86:	687b      	ldr	r3, [r7, #4]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3720      	adds	r7, #32
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20005ad8 	.word	0x20005ad8
 8005b94:	20005adc 	.word	0x20005adc
 8005b98:	0801054c 	.word	0x0801054c
 8005b9c:	080106bc 	.word	0x080106bc
 8005ba0:	08010594 	.word	0x08010594
 8005ba4:	080106d4 	.word	0x080106d4
 8005ba8:	080106f4 	.word	0x080106f4
 8005bac:	20005ae0 	.word	0x20005ae0

08005bb0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005bba:	88fb      	ldrh	r3, [r7, #6]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <mem_malloc+0x14>
    return NULL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	e0d9      	b.n	8005d78 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	3303      	adds	r3, #3
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f023 0303 	bic.w	r3, r3, #3
 8005bce:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005bd0:	8bbb      	ldrh	r3, [r7, #28]
 8005bd2:	2b0b      	cmp	r3, #11
 8005bd4:	d801      	bhi.n	8005bda <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005bda:	8bbb      	ldrh	r3, [r7, #28]
 8005bdc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005be0:	d803      	bhi.n	8005bea <mem_malloc+0x3a>
 8005be2:	8bba      	ldrh	r2, [r7, #28]
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d201      	bcs.n	8005bee <mem_malloc+0x3e>
    return NULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	e0c4      	b.n	8005d78 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005bee:	4b64      	ldr	r3, [pc, #400]	; (8005d80 <mem_malloc+0x1d0>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff fd4a 	bl	800568c <mem_to_ptr>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	83fb      	strh	r3, [r7, #30]
 8005bfc:	e0b4      	b.n	8005d68 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005bfe:	8bfb      	ldrh	r3, [r7, #30]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff fd31 	bl	8005668 <ptr_to_mem>
 8005c06:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	791b      	ldrb	r3, [r3, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f040 80a4 	bne.w	8005d5a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	8bfb      	ldrh	r3, [r7, #30]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	f1a3 0208 	sub.w	r2, r3, #8
 8005c20:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005c22:	429a      	cmp	r2, r3
 8005c24:	f0c0 8099 	bcc.w	8005d5a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	8bfb      	ldrh	r3, [r7, #30]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f1a3 0208 	sub.w	r2, r3, #8
 8005c36:	8bbb      	ldrh	r3, [r7, #28]
 8005c38:	3314      	adds	r3, #20
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d333      	bcc.n	8005ca6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005c3e:	8bfa      	ldrh	r2, [r7, #30]
 8005c40:	8bbb      	ldrh	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3308      	adds	r3, #8
 8005c48:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005c4a:	8a7b      	ldrh	r3, [r7, #18]
 8005c4c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005c50:	d106      	bne.n	8005c60 <mem_malloc+0xb0>
 8005c52:	4b4c      	ldr	r3, [pc, #304]	; (8005d84 <mem_malloc+0x1d4>)
 8005c54:	f240 3287 	movw	r2, #903	; 0x387
 8005c58:	494b      	ldr	r1, [pc, #300]	; (8005d88 <mem_malloc+0x1d8>)
 8005c5a:	484c      	ldr	r0, [pc, #304]	; (8005d8c <mem_malloc+0x1dc>)
 8005c5c:	f009 fbae 	bl	800f3bc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005c60:	8a7b      	ldrh	r3, [r7, #18]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff fd00 	bl	8005668 <ptr_to_mem>
 8005c68:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	881a      	ldrh	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8bfa      	ldrh	r2, [r7, #30]
 8005c7c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	8a7a      	ldrh	r2, [r7, #18]
 8005c82:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2201      	movs	r2, #1
 8005c88:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005c92:	d00b      	beq.n	8005cac <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff fce5 	bl	8005668 <ptr_to_mem>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	8a7b      	ldrh	r3, [r7, #18]
 8005ca2:	8053      	strh	r3, [r2, #2]
 8005ca4:	e002      	b.n	8005cac <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005cac:	4b34      	ldr	r3, [pc, #208]	; (8005d80 <mem_malloc+0x1d0>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d127      	bne.n	8005d06 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005cb6:	4b32      	ldr	r3, [pc, #200]	; (8005d80 <mem_malloc+0x1d0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005cbc:	e005      	b.n	8005cca <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7ff fcd0 	bl	8005668 <ptr_to_mem>
 8005cc8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	791b      	ldrb	r3, [r3, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d004      	beq.n	8005cdc <mem_malloc+0x12c>
 8005cd2:	4b2f      	ldr	r3, [pc, #188]	; (8005d90 <mem_malloc+0x1e0>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d1f0      	bne.n	8005cbe <mem_malloc+0x10e>
          }
          lfree = cur;
 8005cdc:	4a28      	ldr	r2, [pc, #160]	; (8005d80 <mem_malloc+0x1d0>)
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005ce2:	4b27      	ldr	r3, [pc, #156]	; (8005d80 <mem_malloc+0x1d0>)
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4b2a      	ldr	r3, [pc, #168]	; (8005d90 <mem_malloc+0x1e0>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d00b      	beq.n	8005d06 <mem_malloc+0x156>
 8005cee:	4b24      	ldr	r3, [pc, #144]	; (8005d80 <mem_malloc+0x1d0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	791b      	ldrb	r3, [r3, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d006      	beq.n	8005d06 <mem_malloc+0x156>
 8005cf8:	4b22      	ldr	r3, [pc, #136]	; (8005d84 <mem_malloc+0x1d4>)
 8005cfa:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005cfe:	4925      	ldr	r1, [pc, #148]	; (8005d94 <mem_malloc+0x1e4>)
 8005d00:	4822      	ldr	r0, [pc, #136]	; (8005d8c <mem_malloc+0x1dc>)
 8005d02:	f009 fb5b 	bl	800f3bc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005d06:	8bba      	ldrh	r2, [r7, #28]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	4a20      	ldr	r2, [pc, #128]	; (8005d90 <mem_malloc+0x1e0>)
 8005d10:	6812      	ldr	r2, [r2, #0]
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d906      	bls.n	8005d24 <mem_malloc+0x174>
 8005d16:	4b1b      	ldr	r3, [pc, #108]	; (8005d84 <mem_malloc+0x1d4>)
 8005d18:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005d1c:	491e      	ldr	r1, [pc, #120]	; (8005d98 <mem_malloc+0x1e8>)
 8005d1e:	481b      	ldr	r0, [pc, #108]	; (8005d8c <mem_malloc+0x1dc>)
 8005d20:	f009 fb4c 	bl	800f3bc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d006      	beq.n	8005d3c <mem_malloc+0x18c>
 8005d2e:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <mem_malloc+0x1d4>)
 8005d30:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005d34:	4919      	ldr	r1, [pc, #100]	; (8005d9c <mem_malloc+0x1ec>)
 8005d36:	4815      	ldr	r0, [pc, #84]	; (8005d8c <mem_malloc+0x1dc>)
 8005d38:	f009 fb40 	bl	800f3bc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d006      	beq.n	8005d54 <mem_malloc+0x1a4>
 8005d46:	4b0f      	ldr	r3, [pc, #60]	; (8005d84 <mem_malloc+0x1d4>)
 8005d48:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005d4c:	4914      	ldr	r1, [pc, #80]	; (8005da0 <mem_malloc+0x1f0>)
 8005d4e:	480f      	ldr	r0, [pc, #60]	; (8005d8c <mem_malloc+0x1dc>)
 8005d50:	f009 fb34 	bl	800f3bc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	3308      	adds	r3, #8
 8005d58:	e00e      	b.n	8005d78 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005d5a:	8bfb      	ldrh	r3, [r7, #30]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff fc83 	bl	8005668 <ptr_to_mem>
 8005d62:	4603      	mov	r3, r0
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005d68:	8bfa      	ldrh	r2, [r7, #30]
 8005d6a:	8bbb      	ldrh	r3, [r7, #28]
 8005d6c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8005d70:	429a      	cmp	r2, r3
 8005d72:	f4ff af44 	bcc.w	8005bfe <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3720      	adds	r7, #32
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20005ae0 	.word	0x20005ae0
 8005d84:	0801054c 	.word	0x0801054c
 8005d88:	080106f4 	.word	0x080106f4
 8005d8c:	08010594 	.word	0x08010594
 8005d90:	20005adc 	.word	0x20005adc
 8005d94:	08010708 	.word	0x08010708
 8005d98:	08010724 	.word	0x08010724
 8005d9c:	08010754 	.word	0x08010754
 8005da0:	08010784 	.word	0x08010784

08005da4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	3303      	adds	r3, #3
 8005dba:	f023 0303 	bic.w	r3, r3, #3
 8005dbe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	e011      	b.n	8005dea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	4413      	add	r3, r2
 8005de2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3301      	adds	r3, #1
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	885b      	ldrh	r3, [r3, #2]
 8005dee:	461a      	mov	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4293      	cmp	r3, r2
 8005df4:	dbe7      	blt.n	8005dc6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005df6:	bf00      	nop
 8005df8:	bf00      	nop
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	80fb      	strh	r3, [r7, #6]
 8005e0e:	e009      	b.n	8005e24 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005e10:	88fb      	ldrh	r3, [r7, #6]
 8005e12:	4a08      	ldr	r2, [pc, #32]	; (8005e34 <memp_init+0x30>)
 8005e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff ffc3 	bl	8005da4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005e1e:	88fb      	ldrh	r3, [r7, #6]
 8005e20:	3301      	adds	r3, #1
 8005e22:	80fb      	strh	r3, [r7, #6]
 8005e24:	88fb      	ldrh	r3, [r7, #6]
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	d9f2      	bls.n	8005e10 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005e2a:	bf00      	nop
 8005e2c:	bf00      	nop
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	08012f5c 	.word	0x08012f5c

08005e38 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d012      	beq.n	8005e74 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d006      	beq.n	8005e70 <do_memp_malloc_pool+0x38>
 8005e62:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <do_memp_malloc_pool+0x48>)
 8005e64:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005e68:	4906      	ldr	r1, [pc, #24]	; (8005e84 <do_memp_malloc_pool+0x4c>)
 8005e6a:	4807      	ldr	r0, [pc, #28]	; (8005e88 <do_memp_malloc_pool+0x50>)
 8005e6c:	f009 faa6 	bl	800f3bc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	e000      	b.n	8005e76 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	080107a8 	.word	0x080107a8
 8005e84:	080107d8 	.word	0x080107d8
 8005e88:	080107fc 	.word	0x080107fc

08005e8c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005e96:	79fb      	ldrb	r3, [r7, #7]
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d908      	bls.n	8005eae <memp_malloc+0x22>
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <memp_malloc+0x3c>)
 8005e9e:	f240 1257 	movw	r2, #343	; 0x157
 8005ea2:	490a      	ldr	r1, [pc, #40]	; (8005ecc <memp_malloc+0x40>)
 8005ea4:	480a      	ldr	r0, [pc, #40]	; (8005ed0 <memp_malloc+0x44>)
 8005ea6:	f009 fa89 	bl	800f3bc <iprintf>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e008      	b.n	8005ec0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	4a08      	ldr	r2, [pc, #32]	; (8005ed4 <memp_malloc+0x48>)
 8005eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff ffbe 	bl	8005e38 <do_memp_malloc_pool>
 8005ebc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	080107a8 	.word	0x080107a8
 8005ecc:	08010838 	.word	0x08010838
 8005ed0:	080107fc 	.word	0x080107fc
 8005ed4:	08012f5c 	.word	0x08012f5c

08005ed8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	f003 0303 	and.w	r3, r3, #3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d006      	beq.n	8005efa <do_memp_free_pool+0x22>
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <do_memp_free_pool+0x40>)
 8005eee:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005ef2:	490a      	ldr	r1, [pc, #40]	; (8005f1c <do_memp_free_pool+0x44>)
 8005ef4:	480a      	ldr	r0, [pc, #40]	; (8005f20 <do_memp_free_pool+0x48>)
 8005ef6:	f009 fa61 	bl	800f3bc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005f10:	bf00      	nop
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	080107a8 	.word	0x080107a8
 8005f1c:	08010858 	.word	0x08010858
 8005f20:	080107fc 	.word	0x080107fc

08005f24 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	6039      	str	r1, [r7, #0]
 8005f2e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	2b08      	cmp	r3, #8
 8005f34:	d907      	bls.n	8005f46 <memp_free+0x22>
 8005f36:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <memp_free+0x44>)
 8005f38:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005f3c:	490b      	ldr	r1, [pc, #44]	; (8005f6c <memp_free+0x48>)
 8005f3e:	480c      	ldr	r0, [pc, #48]	; (8005f70 <memp_free+0x4c>)
 8005f40:	f009 fa3c 	bl	800f3bc <iprintf>
 8005f44:	e00c      	b.n	8005f60 <memp_free+0x3c>

  if (mem == NULL) {
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005f4c:	79fb      	ldrb	r3, [r7, #7]
 8005f4e:	4a09      	ldr	r2, [pc, #36]	; (8005f74 <memp_free+0x50>)
 8005f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff ffbe 	bl	8005ed8 <do_memp_free_pool>
 8005f5c:	e000      	b.n	8005f60 <memp_free+0x3c>
    return;
 8005f5e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	080107a8 	.word	0x080107a8
 8005f6c:	08010878 	.word	0x08010878
 8005f70:	080107fc 	.word	0x080107fc
 8005f74:	08012f5c 	.word	0x08012f5c

08005f78 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005f7c:	bf00      	nop
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
	...

08005f88 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d108      	bne.n	8005fae <netif_add+0x26>
 8005f9c:	4b57      	ldr	r3, [pc, #348]	; (80060fc <netif_add+0x174>)
 8005f9e:	f240 1227 	movw	r2, #295	; 0x127
 8005fa2:	4957      	ldr	r1, [pc, #348]	; (8006100 <netif_add+0x178>)
 8005fa4:	4857      	ldr	r0, [pc, #348]	; (8006104 <netif_add+0x17c>)
 8005fa6:	f009 fa09 	bl	800f3bc <iprintf>
 8005faa:	2300      	movs	r3, #0
 8005fac:	e0a2      	b.n	80060f4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d108      	bne.n	8005fc6 <netif_add+0x3e>
 8005fb4:	4b51      	ldr	r3, [pc, #324]	; (80060fc <netif_add+0x174>)
 8005fb6:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005fba:	4953      	ldr	r1, [pc, #332]	; (8006108 <netif_add+0x180>)
 8005fbc:	4851      	ldr	r0, [pc, #324]	; (8006104 <netif_add+0x17c>)
 8005fbe:	f009 f9fd 	bl	800f3bc <iprintf>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e096      	b.n	80060f4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005fcc:	4b4f      	ldr	r3, [pc, #316]	; (800610c <netif_add+0x184>)
 8005fce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005fd6:	4b4d      	ldr	r3, [pc, #308]	; (800610c <netif_add+0x184>)
 8005fd8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005fe0:	4b4a      	ldr	r3, [pc, #296]	; (800610c <netif_add+0x184>)
 8005fe2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4a45      	ldr	r2, [pc, #276]	; (8006110 <netif_add+0x188>)
 8005ffa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a3a      	ldr	r2, [r7, #32]
 8006014:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006016:	4b3f      	ldr	r3, [pc, #252]	; (8006114 <netif_add+0x18c>)
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006024:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f913 	bl	8006258 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	4798      	blx	r3
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <netif_add+0xba>
    return NULL;
 800603e:	2300      	movs	r3, #0
 8006040:	e058      	b.n	80060f4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006048:	2bff      	cmp	r3, #255	; 0xff
 800604a:	d103      	bne.n	8006054 <netif_add+0xcc>
        netif->num = 0;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006058:	4b2f      	ldr	r3, [pc, #188]	; (8006118 <netif_add+0x190>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e02b      	b.n	80060b8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	429a      	cmp	r2, r3
 8006066:	d106      	bne.n	8006076 <netif_add+0xee>
 8006068:	4b24      	ldr	r3, [pc, #144]	; (80060fc <netif_add+0x174>)
 800606a:	f240 128b 	movw	r2, #395	; 0x18b
 800606e:	492b      	ldr	r1, [pc, #172]	; (800611c <netif_add+0x194>)
 8006070:	4824      	ldr	r0, [pc, #144]	; (8006104 <netif_add+0x17c>)
 8006072:	f009 f9a3 	bl	800f3bc <iprintf>
        num_netifs++;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	3301      	adds	r3, #1
 800607a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2bff      	cmp	r3, #255	; 0xff
 8006080:	dd06      	ble.n	8006090 <netif_add+0x108>
 8006082:	4b1e      	ldr	r3, [pc, #120]	; (80060fc <netif_add+0x174>)
 8006084:	f240 128d 	movw	r2, #397	; 0x18d
 8006088:	4925      	ldr	r1, [pc, #148]	; (8006120 <netif_add+0x198>)
 800608a:	481e      	ldr	r0, [pc, #120]	; (8006104 <netif_add+0x17c>)
 800608c:	f009 f996 	bl	800f3bc <iprintf>
        if (netif2->num == netif->num) {
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800609c:	429a      	cmp	r2, r3
 800609e:	d108      	bne.n	80060b2 <netif_add+0x12a>
          netif->num++;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060a6:	3301      	adds	r3, #1
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80060b0:	e005      	b.n	80060be <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	617b      	str	r3, [r7, #20]
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1d0      	bne.n	8006060 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1be      	bne.n	8006042 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060ca:	2bfe      	cmp	r3, #254	; 0xfe
 80060cc:	d103      	bne.n	80060d6 <netif_add+0x14e>
    netif_num = 0;
 80060ce:	4b11      	ldr	r3, [pc, #68]	; (8006114 <netif_add+0x18c>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	e006      	b.n	80060e4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060dc:	3301      	adds	r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <netif_add+0x18c>)
 80060e2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80060e4:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <netif_add+0x190>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80060ec:	4a0a      	ldr	r2, [pc, #40]	; (8006118 <netif_add+0x190>)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80060f2:	68fb      	ldr	r3, [r7, #12]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	08010894 	.word	0x08010894
 8006100:	08010928 	.word	0x08010928
 8006104:	080108e4 	.word	0x080108e4
 8006108:	08010944 	.word	0x08010944
 800610c:	08012fc0 	.word	0x08012fc0
 8006110:	0800646b 	.word	0x0800646b
 8006114:	200089d8 	.word	0x200089d8
 8006118:	200089d0 	.word	0x200089d0
 800611c:	08010968 	.word	0x08010968
 8006120:	0801097c 	.word	0x0801097c

08006124 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f002 fccd 	bl	8008ad0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f006 fd6f 	bl	800cc1c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800613e:	bf00      	nop
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <netif_do_set_ipaddr+0x20>
 800615a:	4b1d      	ldr	r3, [pc, #116]	; (80061d0 <netif_do_set_ipaddr+0x88>)
 800615c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006160:	491c      	ldr	r1, [pc, #112]	; (80061d4 <netif_do_set_ipaddr+0x8c>)
 8006162:	481d      	ldr	r0, [pc, #116]	; (80061d8 <netif_do_set_ipaddr+0x90>)
 8006164:	f009 f92a 	bl	800f3bc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d106      	bne.n	800617c <netif_do_set_ipaddr+0x34>
 800616e:	4b18      	ldr	r3, [pc, #96]	; (80061d0 <netif_do_set_ipaddr+0x88>)
 8006170:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006174:	4917      	ldr	r1, [pc, #92]	; (80061d4 <netif_do_set_ipaddr+0x8c>)
 8006176:	4818      	ldr	r0, [pc, #96]	; (80061d8 <netif_do_set_ipaddr+0x90>)
 8006178:	f009 f920 	bl	800f3bc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3304      	adds	r3, #4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d01c      	beq.n	80061c4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3304      	adds	r3, #4
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800619a:	f107 0314 	add.w	r3, r7, #20
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7ff ffbf 	bl	8006124 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <netif_do_set_ipaddr+0x6a>
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	e000      	b.n	80061b4 <netif_do_set_ipaddr+0x6c>
 80061b2:	2300      	movs	r3, #0
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80061b8:	2101      	movs	r1, #1
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f8d2 	bl	8006364 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80061c0:	2301      	movs	r3, #1
 80061c2:	e000      	b.n	80061c6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	08010894 	.word	0x08010894
 80061d4:	080109ac 	.word	0x080109ac
 80061d8:	080108e4 	.word	0x080108e4

080061dc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3308      	adds	r3, #8
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d00a      	beq.n	800620c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <netif_do_set_netmask+0x26>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	e000      	b.n	8006204 <netif_do_set_netmask+0x28>
 8006202:	2300      	movs	r3, #0
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800621a:	b480      	push	{r7}
 800621c:	b085      	sub	sp, #20
 800621e:	af00      	add	r7, sp, #0
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	330c      	adds	r3, #12
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d00a      	beq.n	800624a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <netif_do_set_gw+0x26>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	e000      	b.n	8006242 <netif_do_set_gw+0x28>
 8006240:	2300      	movs	r3, #0
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006266:	2300      	movs	r3, #0
 8006268:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800626a:	2300      	movs	r3, #0
 800626c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006274:	4b1c      	ldr	r3, [pc, #112]	; (80062e8 <netif_set_addr+0x90>)
 8006276:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800627e:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <netif_set_addr+0x90>)
 8006280:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006288:	4b17      	ldr	r3, [pc, #92]	; (80062e8 <netif_set_addr+0x90>)
 800628a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <netif_set_addr+0x42>
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <netif_set_addr+0x46>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <netif_set_addr+0x48>
 800629e:	2300      	movs	r3, #0
 80062a0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d006      	beq.n	80062b6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80062a8:	f107 0310 	add.w	r3, r7, #16
 80062ac:	461a      	mov	r2, r3
 80062ae:	68b9      	ldr	r1, [r7, #8]
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f7ff ff49 	bl	8006148 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80062b6:	69fa      	ldr	r2, [r7, #28]
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f7ff ff8e 	bl	80061dc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f7ff ffa8 	bl	800621a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80062d0:	f107 0310 	add.w	r3, r7, #16
 80062d4:	461a      	mov	r2, r3
 80062d6:	68b9      	ldr	r1, [r7, #8]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f7ff ff35 	bl	8006148 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80062de:	bf00      	nop
 80062e0:	3720      	adds	r7, #32
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	08012fc0 	.word	0x08012fc0

080062ec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80062f4:	4a04      	ldr	r2, [pc, #16]	; (8006308 <netif_set_default+0x1c>)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	200089d4 	.word	0x200089d4

0800630c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d107      	bne.n	800632a <netif_set_up+0x1e>
 800631a:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <netif_set_up+0x4c>)
 800631c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006320:	490e      	ldr	r1, [pc, #56]	; (800635c <netif_set_up+0x50>)
 8006322:	480f      	ldr	r0, [pc, #60]	; (8006360 <netif_set_up+0x54>)
 8006324:	f009 f84a 	bl	800f3bc <iprintf>
 8006328:	e013      	b.n	8006352 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10c      	bne.n	8006352 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800633e:	f043 0301 	orr.w	r3, r3, #1
 8006342:	b2da      	uxtb	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800634a:	2103      	movs	r1, #3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f809 	bl	8006364 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	08010894 	.word	0x08010894
 800635c:	08010a1c 	.word	0x08010a1c
 8006360:	080108e4 	.word	0x080108e4

08006364 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d106      	bne.n	8006384 <netif_issue_reports+0x20>
 8006376:	4b18      	ldr	r3, [pc, #96]	; (80063d8 <netif_issue_reports+0x74>)
 8006378:	f240 326d 	movw	r2, #877	; 0x36d
 800637c:	4917      	ldr	r1, [pc, #92]	; (80063dc <netif_issue_reports+0x78>)
 800637e:	4818      	ldr	r0, [pc, #96]	; (80063e0 <netif_issue_reports+0x7c>)
 8006380:	f009 f81c 	bl	800f3bc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	2b00      	cmp	r3, #0
 8006390:	d01e      	beq.n	80063d0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006398:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800639c:	2b00      	cmp	r3, #0
 800639e:	d017      	beq.n	80063d0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d013      	beq.n	80063d2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3304      	adds	r3, #4
 80063ae:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00e      	beq.n	80063d2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3304      	adds	r3, #4
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f007 fb91 	bl	800daf0 <etharp_request>
 80063ce:	e000      	b.n	80063d2 <netif_issue_reports+0x6e>
    return;
 80063d0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	08010894 	.word	0x08010894
 80063dc:	08010a38 	.word	0x08010a38
 80063e0:	080108e4 	.word	0x080108e4

080063e4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d107      	bne.n	8006402 <netif_set_down+0x1e>
 80063f2:	4b12      	ldr	r3, [pc, #72]	; (800643c <netif_set_down+0x58>)
 80063f4:	f240 329b 	movw	r2, #923	; 0x39b
 80063f8:	4911      	ldr	r1, [pc, #68]	; (8006440 <netif_set_down+0x5c>)
 80063fa:	4812      	ldr	r0, [pc, #72]	; (8006444 <netif_set_down+0x60>)
 80063fc:	f008 ffde 	bl	800f3bc <iprintf>
 8006400:	e019      	b.n	8006436 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d012      	beq.n	8006436 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006416:	f023 0301 	bic.w	r3, r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006428:	f003 0308 	and.w	r3, r3, #8
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f006 ff1b 	bl	800d26c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	08010894 	.word	0x08010894
 8006440:	08010a5c 	.word	0x08010a5c
 8006444:	080108e4 	.word	0x080108e4

08006448 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	61da      	str	r2, [r3, #28]
  }
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800646a:	b480      	push	{r7}
 800646c:	b085      	sub	sp, #20
 800646e:	af00      	add	r7, sp, #0
 8006470:	60f8      	str	r0, [r7, #12]
 8006472:	60b9      	str	r1, [r7, #8]
 8006474:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006476:	f06f 030b 	mvn.w	r3, #11
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
	...

08006488 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006492:	79fb      	ldrb	r3, [r7, #7]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d013      	beq.n	80064c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006498:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <netif_get_by_index+0x48>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	e00c      	b.n	80064ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064a6:	3301      	adds	r3, #1
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	79fa      	ldrb	r2, [r7, #7]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d101      	bne.n	80064b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	e006      	b.n	80064c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1ef      	bne.n	80064a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	200089d0 	.word	0x200089d0

080064d4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80064d8:	4b03      	ldr	r3, [pc, #12]	; (80064e8 <pbuf_pool_is_empty+0x14>)
 80064da:	2201      	movs	r2, #1
 80064dc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80064de:	bf00      	nop
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	200089d9 	.word	0x200089d9

080064ec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	4611      	mov	r1, r2
 80064f8:	461a      	mov	r2, r3
 80064fa:	460b      	mov	r3, r1
 80064fc:	80fb      	strh	r3, [r7, #6]
 80064fe:	4613      	mov	r3, r2
 8006500:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	88fa      	ldrh	r2, [r7, #6]
 8006512:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	88ba      	ldrh	r2, [r7, #4]
 8006518:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800651a:	8b3b      	ldrh	r3, [r7, #24]
 800651c:	b2da      	uxtb	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	7f3a      	ldrb	r2, [r7, #28]
 8006526:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	73da      	strb	r2, [r3, #15]
}
 8006534:	bf00      	nop
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08c      	sub	sp, #48	; 0x30
 8006544:	af02      	add	r7, sp, #8
 8006546:	4603      	mov	r3, r0
 8006548:	71fb      	strb	r3, [r7, #7]
 800654a:	460b      	mov	r3, r1
 800654c:	80bb      	strh	r3, [r7, #4]
 800654e:	4613      	mov	r3, r2
 8006550:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006556:	887b      	ldrh	r3, [r7, #2]
 8006558:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800655c:	d07f      	beq.n	800665e <pbuf_alloc+0x11e>
 800655e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006562:	f300 80c8 	bgt.w	80066f6 <pbuf_alloc+0x1b6>
 8006566:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800656a:	d010      	beq.n	800658e <pbuf_alloc+0x4e>
 800656c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006570:	f300 80c1 	bgt.w	80066f6 <pbuf_alloc+0x1b6>
 8006574:	2b01      	cmp	r3, #1
 8006576:	d002      	beq.n	800657e <pbuf_alloc+0x3e>
 8006578:	2b41      	cmp	r3, #65	; 0x41
 800657a:	f040 80bc 	bne.w	80066f6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800657e:	887a      	ldrh	r2, [r7, #2]
 8006580:	88bb      	ldrh	r3, [r7, #4]
 8006582:	4619      	mov	r1, r3
 8006584:	2000      	movs	r0, #0
 8006586:	f000 f8d1 	bl	800672c <pbuf_alloc_reference>
 800658a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800658c:	e0bd      	b.n	800670a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800658e:	2300      	movs	r3, #0
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006596:	88bb      	ldrh	r3, [r7, #4]
 8006598:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800659a:	2008      	movs	r0, #8
 800659c:	f7ff fc76 	bl	8005e8c <memp_malloc>
 80065a0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80065a8:	f7ff ff94 	bl	80064d4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80065b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065b4:	f000 faa8 	bl	8006b08 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80065b8:	2300      	movs	r3, #0
 80065ba:	e0a7      	b.n	800670c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80065bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065be:	3303      	adds	r3, #3
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	f023 0303 	bic.w	r3, r3, #3
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	8b7a      	ldrh	r2, [r7, #26]
 80065d0:	4293      	cmp	r3, r2
 80065d2:	bf28      	it	cs
 80065d4:	4613      	movcs	r3, r2
 80065d6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80065d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065da:	3310      	adds	r3, #16
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4413      	add	r3, r2
 80065e0:	3303      	adds	r3, #3
 80065e2:	f023 0303 	bic.w	r3, r3, #3
 80065e6:	4618      	mov	r0, r3
 80065e8:	89f9      	ldrh	r1, [r7, #14]
 80065ea:	8b7a      	ldrh	r2, [r7, #26]
 80065ec:	2300      	movs	r3, #0
 80065ee:	9301      	str	r3, [sp, #4]
 80065f0:	887b      	ldrh	r3, [r7, #2]
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	460b      	mov	r3, r1
 80065f6:	4601      	mov	r1, r0
 80065f8:	6938      	ldr	r0, [r7, #16]
 80065fa:	f7ff ff77 	bl	80064ec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d006      	beq.n	8006618 <pbuf_alloc+0xd8>
 800660a:	4b42      	ldr	r3, [pc, #264]	; (8006714 <pbuf_alloc+0x1d4>)
 800660c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006610:	4941      	ldr	r1, [pc, #260]	; (8006718 <pbuf_alloc+0x1d8>)
 8006612:	4842      	ldr	r0, [pc, #264]	; (800671c <pbuf_alloc+0x1dc>)
 8006614:	f008 fed2 	bl	800f3bc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006618:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800661a:	3303      	adds	r3, #3
 800661c:	f023 0303 	bic.w	r3, r3, #3
 8006620:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006624:	d106      	bne.n	8006634 <pbuf_alloc+0xf4>
 8006626:	4b3b      	ldr	r3, [pc, #236]	; (8006714 <pbuf_alloc+0x1d4>)
 8006628:	f44f 7281 	mov.w	r2, #258	; 0x102
 800662c:	493c      	ldr	r1, [pc, #240]	; (8006720 <pbuf_alloc+0x1e0>)
 800662e:	483b      	ldr	r0, [pc, #236]	; (800671c <pbuf_alloc+0x1dc>)
 8006630:	f008 fec4 	bl	800f3bc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	2b00      	cmp	r3, #0
 8006638:	d102      	bne.n	8006640 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
 800663e:	e002      	b.n	8006646 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800664a:	8b7a      	ldrh	r2, [r7, #26]
 800664c:	89fb      	ldrh	r3, [r7, #14]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006656:	8b7b      	ldrh	r3, [r7, #26]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d19e      	bne.n	800659a <pbuf_alloc+0x5a>
      break;
 800665c:	e055      	b.n	800670a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800665e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006660:	3303      	adds	r3, #3
 8006662:	b29b      	uxth	r3, r3
 8006664:	f023 0303 	bic.w	r3, r3, #3
 8006668:	b29a      	uxth	r2, r3
 800666a:	88bb      	ldrh	r3, [r7, #4]
 800666c:	3303      	adds	r3, #3
 800666e:	b29b      	uxth	r3, r3
 8006670:	f023 0303 	bic.w	r3, r3, #3
 8006674:	b29b      	uxth	r3, r3
 8006676:	4413      	add	r3, r2
 8006678:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800667a:	8b3b      	ldrh	r3, [r7, #24]
 800667c:	3310      	adds	r3, #16
 800667e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006680:	8b3a      	ldrh	r2, [r7, #24]
 8006682:	88bb      	ldrh	r3, [r7, #4]
 8006684:	3303      	adds	r3, #3
 8006686:	f023 0303 	bic.w	r3, r3, #3
 800668a:	429a      	cmp	r2, r3
 800668c:	d306      	bcc.n	800669c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800668e:	8afa      	ldrh	r2, [r7, #22]
 8006690:	88bb      	ldrh	r3, [r7, #4]
 8006692:	3303      	adds	r3, #3
 8006694:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006698:	429a      	cmp	r2, r3
 800669a:	d201      	bcs.n	80066a0 <pbuf_alloc+0x160>
        return NULL;
 800669c:	2300      	movs	r3, #0
 800669e:	e035      	b.n	800670c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80066a0:	8afb      	ldrh	r3, [r7, #22]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7ff fa84 	bl	8005bb0 <mem_malloc>
 80066a8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <pbuf_alloc+0x174>
        return NULL;
 80066b0:	2300      	movs	r3, #0
 80066b2:	e02b      	b.n	800670c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80066b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80066b6:	3310      	adds	r3, #16
 80066b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ba:	4413      	add	r3, r2
 80066bc:	3303      	adds	r3, #3
 80066be:	f023 0303 	bic.w	r3, r3, #3
 80066c2:	4618      	mov	r0, r3
 80066c4:	88b9      	ldrh	r1, [r7, #4]
 80066c6:	88ba      	ldrh	r2, [r7, #4]
 80066c8:	2300      	movs	r3, #0
 80066ca:	9301      	str	r3, [sp, #4]
 80066cc:	887b      	ldrh	r3, [r7, #2]
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	460b      	mov	r3, r1
 80066d2:	4601      	mov	r1, r0
 80066d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066d6:	f7ff ff09 	bl	80064ec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f003 0303 	and.w	r3, r3, #3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d010      	beq.n	8006708 <pbuf_alloc+0x1c8>
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <pbuf_alloc+0x1d4>)
 80066e8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80066ec:	490d      	ldr	r1, [pc, #52]	; (8006724 <pbuf_alloc+0x1e4>)
 80066ee:	480b      	ldr	r0, [pc, #44]	; (800671c <pbuf_alloc+0x1dc>)
 80066f0:	f008 fe64 	bl	800f3bc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80066f4:	e008      	b.n	8006708 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80066f6:	4b07      	ldr	r3, [pc, #28]	; (8006714 <pbuf_alloc+0x1d4>)
 80066f8:	f240 1227 	movw	r2, #295	; 0x127
 80066fc:	490a      	ldr	r1, [pc, #40]	; (8006728 <pbuf_alloc+0x1e8>)
 80066fe:	4807      	ldr	r0, [pc, #28]	; (800671c <pbuf_alloc+0x1dc>)
 8006700:	f008 fe5c 	bl	800f3bc <iprintf>
      return NULL;
 8006704:	2300      	movs	r3, #0
 8006706:	e001      	b.n	800670c <pbuf_alloc+0x1cc>
      break;
 8006708:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800670c:	4618      	mov	r0, r3
 800670e:	3728      	adds	r7, #40	; 0x28
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	08010ac4 	.word	0x08010ac4
 8006718:	08010af4 	.word	0x08010af4
 800671c:	08010b24 	.word	0x08010b24
 8006720:	08010b4c 	.word	0x08010b4c
 8006724:	08010b80 	.word	0x08010b80
 8006728:	08010bac 	.word	0x08010bac

0800672c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af02      	add	r7, sp, #8
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	807b      	strh	r3, [r7, #2]
 8006738:	4613      	mov	r3, r2
 800673a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800673c:	883b      	ldrh	r3, [r7, #0]
 800673e:	2b41      	cmp	r3, #65	; 0x41
 8006740:	d009      	beq.n	8006756 <pbuf_alloc_reference+0x2a>
 8006742:	883b      	ldrh	r3, [r7, #0]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d006      	beq.n	8006756 <pbuf_alloc_reference+0x2a>
 8006748:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <pbuf_alloc_reference+0x5c>)
 800674a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800674e:	490f      	ldr	r1, [pc, #60]	; (800678c <pbuf_alloc_reference+0x60>)
 8006750:	480f      	ldr	r0, [pc, #60]	; (8006790 <pbuf_alloc_reference+0x64>)
 8006752:	f008 fe33 	bl	800f3bc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006756:	2007      	movs	r0, #7
 8006758:	f7ff fb98 	bl	8005e8c <memp_malloc>
 800675c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006764:	2300      	movs	r3, #0
 8006766:	e00b      	b.n	8006780 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006768:	8879      	ldrh	r1, [r7, #2]
 800676a:	887a      	ldrh	r2, [r7, #2]
 800676c:	2300      	movs	r3, #0
 800676e:	9301      	str	r3, [sp, #4]
 8006770:	883b      	ldrh	r3, [r7, #0]
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	460b      	mov	r3, r1
 8006776:	6879      	ldr	r1, [r7, #4]
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff feb7 	bl	80064ec <pbuf_init_alloced_pbuf>
  return p;
 800677e:	68fb      	ldr	r3, [r7, #12]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	08010ac4 	.word	0x08010ac4
 800678c:	08010bc8 	.word	0x08010bc8
 8006790:	08010b24 	.word	0x08010b24

08006794 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af02      	add	r7, sp, #8
 800679a:	607b      	str	r3, [r7, #4]
 800679c:	4603      	mov	r3, r0
 800679e:	73fb      	strb	r3, [r7, #15]
 80067a0:	460b      	mov	r3, r1
 80067a2:	81bb      	strh	r3, [r7, #12]
 80067a4:	4613      	mov	r3, r2
 80067a6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80067ac:	8a7b      	ldrh	r3, [r7, #18]
 80067ae:	3303      	adds	r3, #3
 80067b0:	f023 0203 	bic.w	r2, r3, #3
 80067b4:	89bb      	ldrh	r3, [r7, #12]
 80067b6:	441a      	add	r2, r3
 80067b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d901      	bls.n	80067c2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80067be:	2300      	movs	r3, #0
 80067c0:	e018      	b.n	80067f4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d007      	beq.n	80067d8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80067c8:	8a7b      	ldrh	r3, [r7, #18]
 80067ca:	3303      	adds	r3, #3
 80067cc:	f023 0303 	bic.w	r3, r3, #3
 80067d0:	6a3a      	ldr	r2, [r7, #32]
 80067d2:	4413      	add	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	e001      	b.n	80067dc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	89b9      	ldrh	r1, [r7, #12]
 80067e0:	89ba      	ldrh	r2, [r7, #12]
 80067e2:	2302      	movs	r3, #2
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	897b      	ldrh	r3, [r7, #10]
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	460b      	mov	r3, r1
 80067ec:	6979      	ldr	r1, [r7, #20]
 80067ee:	f7ff fe7d 	bl	80064ec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80067f2:	687b      	ldr	r3, [r7, #4]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d106      	bne.n	800681c <pbuf_realloc+0x20>
 800680e:	4b3a      	ldr	r3, [pc, #232]	; (80068f8 <pbuf_realloc+0xfc>)
 8006810:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006814:	4939      	ldr	r1, [pc, #228]	; (80068fc <pbuf_realloc+0x100>)
 8006816:	483a      	ldr	r0, [pc, #232]	; (8006900 <pbuf_realloc+0x104>)
 8006818:	f008 fdd0 	bl	800f3bc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	891b      	ldrh	r3, [r3, #8]
 8006820:	887a      	ldrh	r2, [r7, #2]
 8006822:	429a      	cmp	r2, r3
 8006824:	d263      	bcs.n	80068ee <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	891a      	ldrh	r2, [r3, #8]
 800682a:	887b      	ldrh	r3, [r7, #2]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006830:	887b      	ldrh	r3, [r7, #2]
 8006832:	817b      	strh	r3, [r7, #10]
  q = p;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006838:	e018      	b.n	800686c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	895b      	ldrh	r3, [r3, #10]
 800683e:	897a      	ldrh	r2, [r7, #10]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	891a      	ldrh	r2, [r3, #8]
 8006848:	893b      	ldrh	r3, [r7, #8]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d106      	bne.n	800686c <pbuf_realloc+0x70>
 800685e:	4b26      	ldr	r3, [pc, #152]	; (80068f8 <pbuf_realloc+0xfc>)
 8006860:	f240 12af 	movw	r2, #431	; 0x1af
 8006864:	4927      	ldr	r1, [pc, #156]	; (8006904 <pbuf_realloc+0x108>)
 8006866:	4826      	ldr	r0, [pc, #152]	; (8006900 <pbuf_realloc+0x104>)
 8006868:	f008 fda8 	bl	800f3bc <iprintf>
  while (rem_len > q->len) {
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	895b      	ldrh	r3, [r3, #10]
 8006870:	897a      	ldrh	r2, [r7, #10]
 8006872:	429a      	cmp	r2, r3
 8006874:	d8e1      	bhi.n	800683a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	7b1b      	ldrb	r3, [r3, #12]
 800687a:	f003 030f 	and.w	r3, r3, #15
 800687e:	2b00      	cmp	r3, #0
 8006880:	d121      	bne.n	80068c6 <pbuf_realloc+0xca>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	895b      	ldrh	r3, [r3, #10]
 8006886:	897a      	ldrh	r2, [r7, #10]
 8006888:	429a      	cmp	r2, r3
 800688a:	d01c      	beq.n	80068c6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	7b5b      	ldrb	r3, [r3, #13]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d116      	bne.n	80068c6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	897b      	ldrh	r3, [r7, #10]
 80068a4:	4413      	add	r3, r2
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	4619      	mov	r1, r3
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f7ff f884 	bl	80059b8 <mem_trim>
 80068b0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d106      	bne.n	80068c6 <pbuf_realloc+0xca>
 80068b8:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <pbuf_realloc+0xfc>)
 80068ba:	f240 12bd 	movw	r2, #445	; 0x1bd
 80068be:	4912      	ldr	r1, [pc, #72]	; (8006908 <pbuf_realloc+0x10c>)
 80068c0:	480f      	ldr	r0, [pc, #60]	; (8006900 <pbuf_realloc+0x104>)
 80068c2:	f008 fd7b 	bl	800f3bc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	897a      	ldrh	r2, [r7, #10]
 80068ca:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	895a      	ldrh	r2, [r3, #10]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d004      	beq.n	80068e6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 f911 	bl	8006b08 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	e000      	b.n	80068f0 <pbuf_realloc+0xf4>
    return;
 80068ee:	bf00      	nop

}
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	08010ac4 	.word	0x08010ac4
 80068fc:	08010bdc 	.word	0x08010bdc
 8006900:	08010b24 	.word	0x08010b24
 8006904:	08010bf4 	.word	0x08010bf4
 8006908:	08010c0c 	.word	0x08010c0c

0800690c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	4613      	mov	r3, r2
 8006918:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d106      	bne.n	800692e <pbuf_add_header_impl+0x22>
 8006920:	4b2b      	ldr	r3, [pc, #172]	; (80069d0 <pbuf_add_header_impl+0xc4>)
 8006922:	f240 12df 	movw	r2, #479	; 0x1df
 8006926:	492b      	ldr	r1, [pc, #172]	; (80069d4 <pbuf_add_header_impl+0xc8>)
 8006928:	482b      	ldr	r0, [pc, #172]	; (80069d8 <pbuf_add_header_impl+0xcc>)
 800692a:	f008 fd47 	bl	800f3bc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <pbuf_add_header_impl+0x30>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800693a:	d301      	bcc.n	8006940 <pbuf_add_header_impl+0x34>
    return 1;
 800693c:	2301      	movs	r3, #1
 800693e:	e043      	b.n	80069c8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <pbuf_add_header_impl+0x3e>
    return 0;
 8006946:	2300      	movs	r3, #0
 8006948:	e03e      	b.n	80069c8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	891a      	ldrh	r2, [r3, #8]
 8006952:	8a7b      	ldrh	r3, [r7, #18]
 8006954:	4413      	add	r3, r2
 8006956:	b29b      	uxth	r3, r3
 8006958:	8a7a      	ldrh	r2, [r7, #18]
 800695a:	429a      	cmp	r2, r3
 800695c:	d901      	bls.n	8006962 <pbuf_add_header_impl+0x56>
    return 1;
 800695e:	2301      	movs	r3, #1
 8006960:	e032      	b.n	80069c8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	7b1b      	ldrb	r3, [r3, #12]
 8006966:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006968:	8a3b      	ldrh	r3, [r7, #16]
 800696a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00c      	beq.n	800698c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	425b      	negs	r3, r3
 800697a:	4413      	add	r3, r2
 800697c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3310      	adds	r3, #16
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	429a      	cmp	r2, r3
 8006986:	d20d      	bcs.n	80069a4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006988:	2301      	movs	r3, #1
 800698a:	e01d      	b.n	80069c8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800698c:	79fb      	ldrb	r3, [r7, #7]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d006      	beq.n	80069a0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	425b      	negs	r3, r3
 800699a:	4413      	add	r3, r2
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	e001      	b.n	80069a4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e011      	b.n	80069c8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	895a      	ldrh	r2, [r3, #10]
 80069ae:	8a7b      	ldrh	r3, [r7, #18]
 80069b0:	4413      	add	r3, r2
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	891a      	ldrh	r2, [r3, #8]
 80069bc:	8a7b      	ldrh	r3, [r7, #18]
 80069be:	4413      	add	r3, r2
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	811a      	strh	r2, [r3, #8]


  return 0;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	08010ac4 	.word	0x08010ac4
 80069d4:	08010c28 	.word	0x08010c28
 80069d8:	08010b24 	.word	0x08010b24

080069dc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80069e6:	2200      	movs	r2, #0
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff ff8e 	bl	800690c <pbuf_add_header_impl>
 80069f0:	4603      	mov	r3, r0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
	...

080069fc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d106      	bne.n	8006a1a <pbuf_remove_header+0x1e>
 8006a0c:	4b20      	ldr	r3, [pc, #128]	; (8006a90 <pbuf_remove_header+0x94>)
 8006a0e:	f240 224b 	movw	r2, #587	; 0x24b
 8006a12:	4920      	ldr	r1, [pc, #128]	; (8006a94 <pbuf_remove_header+0x98>)
 8006a14:	4820      	ldr	r0, [pc, #128]	; (8006a98 <pbuf_remove_header+0x9c>)
 8006a16:	f008 fcd1 	bl	800f3bc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d003      	beq.n	8006a28 <pbuf_remove_header+0x2c>
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a26:	d301      	bcc.n	8006a2c <pbuf_remove_header+0x30>
    return 1;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e02c      	b.n	8006a86 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <pbuf_remove_header+0x3a>
    return 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	e027      	b.n	8006a86 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	895b      	ldrh	r3, [r3, #10]
 8006a3e:	89fa      	ldrh	r2, [r7, #14]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d908      	bls.n	8006a56 <pbuf_remove_header+0x5a>
 8006a44:	4b12      	ldr	r3, [pc, #72]	; (8006a90 <pbuf_remove_header+0x94>)
 8006a46:	f240 2255 	movw	r2, #597	; 0x255
 8006a4a:	4914      	ldr	r1, [pc, #80]	; (8006a9c <pbuf_remove_header+0xa0>)
 8006a4c:	4812      	ldr	r0, [pc, #72]	; (8006a98 <pbuf_remove_header+0x9c>)
 8006a4e:	f008 fcb5 	bl	800f3bc <iprintf>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e017      	b.n	8006a86 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	441a      	add	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	895a      	ldrh	r2, [r3, #10]
 8006a6c:	89fb      	ldrh	r3, [r7, #14]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	891a      	ldrh	r2, [r3, #8]
 8006a7a:	89fb      	ldrh	r3, [r7, #14]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	08010ac4 	.word	0x08010ac4
 8006a94:	08010c28 	.word	0x08010c28
 8006a98:	08010b24 	.word	0x08010b24
 8006a9c:	08010c34 	.word	0x08010c34

08006aa0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	807b      	strh	r3, [r7, #2]
 8006aac:	4613      	mov	r3, r2
 8006aae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006ab0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	da08      	bge.n	8006aca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006ab8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006abc:	425b      	negs	r3, r3
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff ff9b 	bl	80069fc <pbuf_remove_header>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	e007      	b.n	8006ada <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006aca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ace:	787a      	ldrb	r2, [r7, #1]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff ff1a 	bl	800690c <pbuf_add_header_impl>
 8006ad8:	4603      	mov	r3, r0
  }
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b082      	sub	sp, #8
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	460b      	mov	r3, r1
 8006aec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006aee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006af2:	2201      	movs	r2, #1
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff ffd2 	bl	8006aa0 <pbuf_header_impl>
 8006afc:	4603      	mov	r3, r0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10b      	bne.n	8006b2e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d106      	bne.n	8006b2a <pbuf_free+0x22>
 8006b1c:	4b38      	ldr	r3, [pc, #224]	; (8006c00 <pbuf_free+0xf8>)
 8006b1e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006b22:	4938      	ldr	r1, [pc, #224]	; (8006c04 <pbuf_free+0xfc>)
 8006b24:	4838      	ldr	r0, [pc, #224]	; (8006c08 <pbuf_free+0x100>)
 8006b26:	f008 fc49 	bl	800f3bc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	e063      	b.n	8006bf6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006b32:	e05c      	b.n	8006bee <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	7b9b      	ldrb	r3, [r3, #14]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d106      	bne.n	8006b4a <pbuf_free+0x42>
 8006b3c:	4b30      	ldr	r3, [pc, #192]	; (8006c00 <pbuf_free+0xf8>)
 8006b3e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006b42:	4932      	ldr	r1, [pc, #200]	; (8006c0c <pbuf_free+0x104>)
 8006b44:	4830      	ldr	r0, [pc, #192]	; (8006c08 <pbuf_free+0x100>)
 8006b46:	f008 fc39 	bl	800f3bc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	7b9b      	ldrb	r3, [r3, #14]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	739a      	strb	r2, [r3, #14]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	7b9b      	ldrb	r3, [r3, #14]
 8006b5a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006b5c:	7dbb      	ldrb	r3, [r7, #22]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d143      	bne.n	8006bea <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	7b1b      	ldrb	r3, [r3, #12]
 8006b6c:	f003 030f 	and.w	r3, r3, #15
 8006b70:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	7b5b      	ldrb	r3, [r3, #13]
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d011      	beq.n	8006ba2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d106      	bne.n	8006b98 <pbuf_free+0x90>
 8006b8a:	4b1d      	ldr	r3, [pc, #116]	; (8006c00 <pbuf_free+0xf8>)
 8006b8c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006b90:	491f      	ldr	r1, [pc, #124]	; (8006c10 <pbuf_free+0x108>)
 8006b92:	481d      	ldr	r0, [pc, #116]	; (8006c08 <pbuf_free+0x100>)
 8006b94:	f008 fc12 	bl	800f3bc <iprintf>
        pc->custom_free_function(p);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	4798      	blx	r3
 8006ba0:	e01d      	b.n	8006bde <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d104      	bne.n	8006bb2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006ba8:	6879      	ldr	r1, [r7, #4]
 8006baa:	2008      	movs	r0, #8
 8006bac:	f7ff f9ba 	bl	8005f24 <memp_free>
 8006bb0:	e015      	b.n	8006bde <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d104      	bne.n	8006bc2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	2007      	movs	r0, #7
 8006bbc:	f7ff f9b2 	bl	8005f24 <memp_free>
 8006bc0:	e00d      	b.n	8006bde <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d103      	bne.n	8006bd0 <pbuf_free+0xc8>
          mem_free(p);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7fe fe8b 	bl	80058e4 <mem_free>
 8006bce:	e006      	b.n	8006bde <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006bd0:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <pbuf_free+0xf8>)
 8006bd2:	f240 320f 	movw	r2, #783	; 0x30f
 8006bd6:	490f      	ldr	r1, [pc, #60]	; (8006c14 <pbuf_free+0x10c>)
 8006bd8:	480b      	ldr	r0, [pc, #44]	; (8006c08 <pbuf_free+0x100>)
 8006bda:	f008 fbef 	bl	800f3bc <iprintf>
        }
      }
      count++;
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
 8006be0:	3301      	adds	r3, #1
 8006be2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	607b      	str	r3, [r7, #4]
 8006be8:	e001      	b.n	8006bee <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d19f      	bne.n	8006b34 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	08010ac4 	.word	0x08010ac4
 8006c04:	08010c28 	.word	0x08010c28
 8006c08:	08010b24 	.word	0x08010b24
 8006c0c:	08010c54 	.word	0x08010c54
 8006c10:	08010c6c 	.word	0x08010c6c
 8006c14:	08010c90 	.word	0x08010c90

08006c18 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006c24:	e005      	b.n	8006c32 <pbuf_clen+0x1a>
    ++len;
 8006c26:	89fb      	ldrh	r3, [r7, #14]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1f6      	bne.n	8006c26 <pbuf_clen+0xe>
  }
  return len;
 8006c38:	89fb      	ldrh	r3, [r7, #14]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
	...

08006c48 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d010      	beq.n	8006c78 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	7b9b      	ldrb	r3, [r3, #14]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	7b9b      	ldrb	r3, [r3, #14]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <pbuf_ref+0x30>
 8006c6a:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <pbuf_ref+0x38>)
 8006c6c:	f240 3242 	movw	r2, #834	; 0x342
 8006c70:	4904      	ldr	r1, [pc, #16]	; (8006c84 <pbuf_ref+0x3c>)
 8006c72:	4805      	ldr	r0, [pc, #20]	; (8006c88 <pbuf_ref+0x40>)
 8006c74:	f008 fba2 	bl	800f3bc <iprintf>
  }
}
 8006c78:	bf00      	nop
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	08010ac4 	.word	0x08010ac4
 8006c84:	08010ca4 	.word	0x08010ca4
 8006c88:	08010b24 	.word	0x08010b24

08006c8c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <pbuf_cat+0x16>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d107      	bne.n	8006cb2 <pbuf_cat+0x26>
 8006ca2:	4b20      	ldr	r3, [pc, #128]	; (8006d24 <pbuf_cat+0x98>)
 8006ca4:	f240 3259 	movw	r2, #857	; 0x359
 8006ca8:	491f      	ldr	r1, [pc, #124]	; (8006d28 <pbuf_cat+0x9c>)
 8006caa:	4820      	ldr	r0, [pc, #128]	; (8006d2c <pbuf_cat+0xa0>)
 8006cac:	f008 fb86 	bl	800f3bc <iprintf>
 8006cb0:	e034      	b.n	8006d1c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	e00a      	b.n	8006cce <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	891a      	ldrh	r2, [r3, #8]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	891b      	ldrh	r3, [r3, #8]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1f0      	bne.n	8006cb8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	891a      	ldrh	r2, [r3, #8]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	895b      	ldrh	r3, [r3, #10]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d006      	beq.n	8006cf0 <pbuf_cat+0x64>
 8006ce2:	4b10      	ldr	r3, [pc, #64]	; (8006d24 <pbuf_cat+0x98>)
 8006ce4:	f240 3262 	movw	r2, #866	; 0x362
 8006ce8:	4911      	ldr	r1, [pc, #68]	; (8006d30 <pbuf_cat+0xa4>)
 8006cea:	4810      	ldr	r0, [pc, #64]	; (8006d2c <pbuf_cat+0xa0>)
 8006cec:	f008 fb66 	bl	800f3bc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d006      	beq.n	8006d06 <pbuf_cat+0x7a>
 8006cf8:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <pbuf_cat+0x98>)
 8006cfa:	f240 3263 	movw	r2, #867	; 0x363
 8006cfe:	490d      	ldr	r1, [pc, #52]	; (8006d34 <pbuf_cat+0xa8>)
 8006d00:	480a      	ldr	r0, [pc, #40]	; (8006d2c <pbuf_cat+0xa0>)
 8006d02:	f008 fb5b 	bl	800f3bc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	891a      	ldrh	r2, [r3, #8]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	891b      	ldrh	r3, [r3, #8]
 8006d0e:	4413      	add	r3, r2
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	08010ac4 	.word	0x08010ac4
 8006d28:	08010cb8 	.word	0x08010cb8
 8006d2c:	08010b24 	.word	0x08010b24
 8006d30:	08010cf0 	.word	0x08010cf0
 8006d34:	08010d20 	.word	0x08010d20

08006d38 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006d42:	2300      	movs	r3, #0
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	2300      	movs	r3, #0
 8006d48:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d008      	beq.n	8006d62 <pbuf_copy+0x2a>
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d005      	beq.n	8006d62 <pbuf_copy+0x2a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	891a      	ldrh	r2, [r3, #8]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	891b      	ldrh	r3, [r3, #8]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d209      	bcs.n	8006d76 <pbuf_copy+0x3e>
 8006d62:	4b57      	ldr	r3, [pc, #348]	; (8006ec0 <pbuf_copy+0x188>)
 8006d64:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006d68:	4956      	ldr	r1, [pc, #344]	; (8006ec4 <pbuf_copy+0x18c>)
 8006d6a:	4857      	ldr	r0, [pc, #348]	; (8006ec8 <pbuf_copy+0x190>)
 8006d6c:	f008 fb26 	bl	800f3bc <iprintf>
 8006d70:	f06f 030f 	mvn.w	r3, #15
 8006d74:	e09f      	b.n	8006eb6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	895b      	ldrh	r3, [r3, #10]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	1ad2      	subs	r2, r2, r3
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	895b      	ldrh	r3, [r3, #10]
 8006d84:	4619      	mov	r1, r3
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	1acb      	subs	r3, r1, r3
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d306      	bcc.n	8006d9c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	895b      	ldrh	r3, [r3, #10]
 8006d92:	461a      	mov	r2, r3
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	60fb      	str	r3, [r7, #12]
 8006d9a:	e005      	b.n	8006da8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	895b      	ldrh	r3, [r3, #10]
 8006da0:	461a      	mov	r2, r3
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	18d0      	adds	r0, r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	4413      	add	r3, r2
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	f008 fae8 	bl	800f390 <memcpy>
    offset_to += len;
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4413      	add	r3, r2
 8006dce:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	895b      	ldrh	r3, [r3, #10]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d906      	bls.n	8006dea <pbuf_copy+0xb2>
 8006ddc:	4b38      	ldr	r3, [pc, #224]	; (8006ec0 <pbuf_copy+0x188>)
 8006dde:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006de2:	493a      	ldr	r1, [pc, #232]	; (8006ecc <pbuf_copy+0x194>)
 8006de4:	4838      	ldr	r0, [pc, #224]	; (8006ec8 <pbuf_copy+0x190>)
 8006de6:	f008 fae9 	bl	800f3bc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	895b      	ldrh	r3, [r3, #10]
 8006dee:	461a      	mov	r2, r3
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d906      	bls.n	8006e04 <pbuf_copy+0xcc>
 8006df6:	4b32      	ldr	r3, [pc, #200]	; (8006ec0 <pbuf_copy+0x188>)
 8006df8:	f240 32da 	movw	r2, #986	; 0x3da
 8006dfc:	4934      	ldr	r1, [pc, #208]	; (8006ed0 <pbuf_copy+0x198>)
 8006dfe:	4832      	ldr	r0, [pc, #200]	; (8006ec8 <pbuf_copy+0x190>)
 8006e00:	f008 fadc 	bl	800f3bc <iprintf>
    if (offset_from >= p_from->len) {
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	895b      	ldrh	r3, [r3, #10]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d304      	bcc.n	8006e1a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	895b      	ldrh	r3, [r3, #10]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d114      	bne.n	8006e50 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10c      	bne.n	8006e50 <pbuf_copy+0x118>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d009      	beq.n	8006e50 <pbuf_copy+0x118>
 8006e3c:	4b20      	ldr	r3, [pc, #128]	; (8006ec0 <pbuf_copy+0x188>)
 8006e3e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006e42:	4924      	ldr	r1, [pc, #144]	; (8006ed4 <pbuf_copy+0x19c>)
 8006e44:	4820      	ldr	r0, [pc, #128]	; (8006ec8 <pbuf_copy+0x190>)
 8006e46:	f008 fab9 	bl	800f3bc <iprintf>
 8006e4a:	f06f 030f 	mvn.w	r3, #15
 8006e4e:	e032      	b.n	8006eb6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d013      	beq.n	8006e7e <pbuf_copy+0x146>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	895a      	ldrh	r2, [r3, #10]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	891b      	ldrh	r3, [r3, #8]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d10d      	bne.n	8006e7e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d009      	beq.n	8006e7e <pbuf_copy+0x146>
 8006e6a:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <pbuf_copy+0x188>)
 8006e6c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006e70:	4919      	ldr	r1, [pc, #100]	; (8006ed8 <pbuf_copy+0x1a0>)
 8006e72:	4815      	ldr	r0, [pc, #84]	; (8006ec8 <pbuf_copy+0x190>)
 8006e74:	f008 faa2 	bl	800f3bc <iprintf>
 8006e78:	f06f 0305 	mvn.w	r3, #5
 8006e7c:	e01b      	b.n	8006eb6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d013      	beq.n	8006eac <pbuf_copy+0x174>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	895a      	ldrh	r2, [r3, #10]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	891b      	ldrh	r3, [r3, #8]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d10d      	bne.n	8006eac <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d009      	beq.n	8006eac <pbuf_copy+0x174>
 8006e98:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <pbuf_copy+0x188>)
 8006e9a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006e9e:	490e      	ldr	r1, [pc, #56]	; (8006ed8 <pbuf_copy+0x1a0>)
 8006ea0:	4809      	ldr	r0, [pc, #36]	; (8006ec8 <pbuf_copy+0x190>)
 8006ea2:	f008 fa8b 	bl	800f3bc <iprintf>
 8006ea6:	f06f 0305 	mvn.w	r3, #5
 8006eaa:	e004      	b.n	8006eb6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f47f af61 	bne.w	8006d76 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	08010ac4 	.word	0x08010ac4
 8006ec4:	08010d6c 	.word	0x08010d6c
 8006ec8:	08010b24 	.word	0x08010b24
 8006ecc:	08010d9c 	.word	0x08010d9c
 8006ed0:	08010db4 	.word	0x08010db4
 8006ed4:	08010dd0 	.word	0x08010dd0
 8006ed8:	08010de0 	.word	0x08010de0

08006edc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	461a      	mov	r2, r3
 8006eea:	460b      	mov	r3, r1
 8006eec:	80fb      	strh	r3, [r7, #6]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d108      	bne.n	8006f12 <pbuf_copy_partial+0x36>
 8006f00:	4b2b      	ldr	r3, [pc, #172]	; (8006fb0 <pbuf_copy_partial+0xd4>)
 8006f02:	f240 420a 	movw	r2, #1034	; 0x40a
 8006f06:	492b      	ldr	r1, [pc, #172]	; (8006fb4 <pbuf_copy_partial+0xd8>)
 8006f08:	482b      	ldr	r0, [pc, #172]	; (8006fb8 <pbuf_copy_partial+0xdc>)
 8006f0a:	f008 fa57 	bl	800f3bc <iprintf>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	e04a      	b.n	8006fa8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d108      	bne.n	8006f2a <pbuf_copy_partial+0x4e>
 8006f18:	4b25      	ldr	r3, [pc, #148]	; (8006fb0 <pbuf_copy_partial+0xd4>)
 8006f1a:	f240 420b 	movw	r2, #1035	; 0x40b
 8006f1e:	4927      	ldr	r1, [pc, #156]	; (8006fbc <pbuf_copy_partial+0xe0>)
 8006f20:	4825      	ldr	r0, [pc, #148]	; (8006fb8 <pbuf_copy_partial+0xdc>)
 8006f22:	f008 fa4b 	bl	800f3bc <iprintf>
 8006f26:	2300      	movs	r3, #0
 8006f28:	e03e      	b.n	8006fa8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	61fb      	str	r3, [r7, #28]
 8006f2e:	e034      	b.n	8006f9a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006f30:	88bb      	ldrh	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <pbuf_copy_partial+0x70>
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	895b      	ldrh	r3, [r3, #10]
 8006f3a:	88ba      	ldrh	r2, [r7, #4]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d305      	bcc.n	8006f4c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	895b      	ldrh	r3, [r3, #10]
 8006f44:	88ba      	ldrh	r2, [r7, #4]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	80bb      	strh	r3, [r7, #4]
 8006f4a:	e023      	b.n	8006f94 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	895a      	ldrh	r2, [r3, #10]
 8006f50:	88bb      	ldrh	r3, [r7, #4]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006f56:	8b3a      	ldrh	r2, [r7, #24]
 8006f58:	88fb      	ldrh	r3, [r7, #6]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d901      	bls.n	8006f62 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
 8006f60:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006f62:	8b7b      	ldrh	r3, [r7, #26]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	18d0      	adds	r0, r2, r3
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	88bb      	ldrh	r3, [r7, #4]
 8006f6e:	4413      	add	r3, r2
 8006f70:	8b3a      	ldrh	r2, [r7, #24]
 8006f72:	4619      	mov	r1, r3
 8006f74:	f008 fa0c 	bl	800f390 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006f78:	8afa      	ldrh	r2, [r7, #22]
 8006f7a:	8b3b      	ldrh	r3, [r7, #24]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006f80:	8b7a      	ldrh	r2, [r7, #26]
 8006f82:	8b3b      	ldrh	r3, [r7, #24]
 8006f84:	4413      	add	r3, r2
 8006f86:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006f88:	88fa      	ldrh	r2, [r7, #6]
 8006f8a:	8b3b      	ldrh	r3, [r7, #24]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	61fb      	str	r3, [r7, #28]
 8006f9a:	88fb      	ldrh	r3, [r7, #6]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <pbuf_copy_partial+0xca>
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1c4      	bne.n	8006f30 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006fa6:	8afb      	ldrh	r3, [r7, #22]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3720      	adds	r7, #32
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	08010ac4 	.word	0x08010ac4
 8006fb4:	08010e0c 	.word	0x08010e0c
 8006fb8:	08010b24 	.word	0x08010b24
 8006fbc:	08010e2c 	.word	0x08010e2c

08006fc0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	603a      	str	r2, [r7, #0]
 8006fca:	71fb      	strb	r3, [r7, #7]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	8919      	ldrh	r1, [r3, #8]
 8006fd4:	88ba      	ldrh	r2, [r7, #4]
 8006fd6:	79fb      	ldrb	r3, [r7, #7]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff fab1 	bl	8006540 <pbuf_alloc>
 8006fde:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <pbuf_clone+0x2a>
    return NULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e011      	b.n	800700e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f7ff fea3 	bl	8006d38 <pbuf_copy>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006ff6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d006      	beq.n	800700c <pbuf_clone+0x4c>
 8006ffe:	4b06      	ldr	r3, [pc, #24]	; (8007018 <pbuf_clone+0x58>)
 8007000:	f240 5224 	movw	r2, #1316	; 0x524
 8007004:	4905      	ldr	r1, [pc, #20]	; (800701c <pbuf_clone+0x5c>)
 8007006:	4806      	ldr	r0, [pc, #24]	; (8007020 <pbuf_clone+0x60>)
 8007008:	f008 f9d8 	bl	800f3bc <iprintf>
  return q;
 800700c:	68fb      	ldr	r3, [r7, #12]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	08010ac4 	.word	0x08010ac4
 800701c:	08010f38 	.word	0x08010f38
 8007020:	08010b24 	.word	0x08010b24

08007024 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007028:	f008 f9e0 	bl	800f3ec <rand>
 800702c:	4603      	mov	r3, r0
 800702e:	b29b      	uxth	r3, r3
 8007030:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007034:	b29b      	uxth	r3, r3
 8007036:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800703a:	b29a      	uxth	r2, r3
 800703c:	4b01      	ldr	r3, [pc, #4]	; (8007044 <tcp_init+0x20>)
 800703e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007040:	bf00      	nop
 8007042:	bd80      	pop	{r7, pc}
 8007044:	2000000a 	.word	0x2000000a

08007048 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	7d1b      	ldrb	r3, [r3, #20]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d105      	bne.n	8007064 <tcp_free+0x1c>
 8007058:	4b06      	ldr	r3, [pc, #24]	; (8007074 <tcp_free+0x2c>)
 800705a:	22d4      	movs	r2, #212	; 0xd4
 800705c:	4906      	ldr	r1, [pc, #24]	; (8007078 <tcp_free+0x30>)
 800705e:	4807      	ldr	r0, [pc, #28]	; (800707c <tcp_free+0x34>)
 8007060:	f008 f9ac 	bl	800f3bc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	2001      	movs	r0, #1
 8007068:	f7fe ff5c 	bl	8005f24 <memp_free>
}
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	08010fc4 	.word	0x08010fc4
 8007078:	08010ff4 	.word	0x08010ff4
 800707c:	08011008 	.word	0x08011008

08007080 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	7d1b      	ldrb	r3, [r3, #20]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d105      	bne.n	800709c <tcp_free_listen+0x1c>
 8007090:	4b06      	ldr	r3, [pc, #24]	; (80070ac <tcp_free_listen+0x2c>)
 8007092:	22df      	movs	r2, #223	; 0xdf
 8007094:	4906      	ldr	r1, [pc, #24]	; (80070b0 <tcp_free_listen+0x30>)
 8007096:	4807      	ldr	r0, [pc, #28]	; (80070b4 <tcp_free_listen+0x34>)
 8007098:	f008 f990 	bl	800f3bc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	2002      	movs	r0, #2
 80070a0:	f7fe ff40 	bl	8005f24 <memp_free>
}
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	08010fc4 	.word	0x08010fc4
 80070b0:	08011030 	.word	0x08011030
 80070b4:	08011008 	.word	0x08011008

080070b8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80070bc:	f001 f800 	bl	80080c0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80070c0:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <tcp_tmr+0x28>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	3301      	adds	r3, #1
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <tcp_tmr+0x28>)
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <tcp_tmr+0x28>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80070d8:	f000 fcb2 	bl	8007a40 <tcp_slowtmr>
  }
}
 80070dc:	bf00      	nop
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	200089f1 	.word	0x200089f1

080070e4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d105      	bne.n	8007100 <tcp_remove_listener+0x1c>
 80070f4:	4b0d      	ldr	r3, [pc, #52]	; (800712c <tcp_remove_listener+0x48>)
 80070f6:	22ff      	movs	r2, #255	; 0xff
 80070f8:	490d      	ldr	r1, [pc, #52]	; (8007130 <tcp_remove_listener+0x4c>)
 80070fa:	480e      	ldr	r0, [pc, #56]	; (8007134 <tcp_remove_listener+0x50>)
 80070fc:	f008 f95e 	bl	800f3bc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	e00a      	b.n	800711c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d102      	bne.n	8007116 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f1      	bne.n	8007106 <tcp_remove_listener+0x22>
    }
  }
}
 8007122:	bf00      	nop
 8007124:	bf00      	nop
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	08010fc4 	.word	0x08010fc4
 8007130:	0801104c 	.word	0x0801104c
 8007134:	08011008 	.word	0x08011008

08007138 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <tcp_listen_closed+0x1c>
 8007146:	4b14      	ldr	r3, [pc, #80]	; (8007198 <tcp_listen_closed+0x60>)
 8007148:	f240 1211 	movw	r2, #273	; 0x111
 800714c:	4913      	ldr	r1, [pc, #76]	; (800719c <tcp_listen_closed+0x64>)
 800714e:	4814      	ldr	r0, [pc, #80]	; (80071a0 <tcp_listen_closed+0x68>)
 8007150:	f008 f934 	bl	800f3bc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	7d1b      	ldrb	r3, [r3, #20]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d006      	beq.n	800716a <tcp_listen_closed+0x32>
 800715c:	4b0e      	ldr	r3, [pc, #56]	; (8007198 <tcp_listen_closed+0x60>)
 800715e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007162:	4910      	ldr	r1, [pc, #64]	; (80071a4 <tcp_listen_closed+0x6c>)
 8007164:	480e      	ldr	r0, [pc, #56]	; (80071a0 <tcp_listen_closed+0x68>)
 8007166:	f008 f929 	bl	800f3bc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800716a:	2301      	movs	r3, #1
 800716c:	60fb      	str	r3, [r7, #12]
 800716e:	e00b      	b.n	8007188 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007170:	4a0d      	ldr	r2, [pc, #52]	; (80071a8 <tcp_listen_closed+0x70>)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6879      	ldr	r1, [r7, #4]
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff ffb1 	bl	80070e4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3301      	adds	r3, #1
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2b03      	cmp	r3, #3
 800718c:	d9f0      	bls.n	8007170 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800718e:	bf00      	nop
 8007190:	bf00      	nop
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	08010fc4 	.word	0x08010fc4
 800719c:	08011074 	.word	0x08011074
 80071a0:	08011008 	.word	0x08011008
 80071a4:	08011080 	.word	0x08011080
 80071a8:	08012f98 	.word	0x08012f98

080071ac <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80071ac:	b5b0      	push	{r4, r5, r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af04      	add	r7, sp, #16
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d106      	bne.n	80071cc <tcp_close_shutdown+0x20>
 80071be:	4b63      	ldr	r3, [pc, #396]	; (800734c <tcp_close_shutdown+0x1a0>)
 80071c0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80071c4:	4962      	ldr	r1, [pc, #392]	; (8007350 <tcp_close_shutdown+0x1a4>)
 80071c6:	4863      	ldr	r0, [pc, #396]	; (8007354 <tcp_close_shutdown+0x1a8>)
 80071c8:	f008 f8f8 	bl	800f3bc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80071cc:	78fb      	ldrb	r3, [r7, #3]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d066      	beq.n	80072a0 <tcp_close_shutdown+0xf4>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	7d1b      	ldrb	r3, [r3, #20]
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d003      	beq.n	80071e2 <tcp_close_shutdown+0x36>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	7d1b      	ldrb	r3, [r3, #20]
 80071de:	2b07      	cmp	r3, #7
 80071e0:	d15e      	bne.n	80072a0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d104      	bne.n	80071f4 <tcp_close_shutdown+0x48>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80071f2:	d055      	beq.n	80072a0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	8b5b      	ldrh	r3, [r3, #26]
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d106      	bne.n	800720e <tcp_close_shutdown+0x62>
 8007200:	4b52      	ldr	r3, [pc, #328]	; (800734c <tcp_close_shutdown+0x1a0>)
 8007202:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8007206:	4954      	ldr	r1, [pc, #336]	; (8007358 <tcp_close_shutdown+0x1ac>)
 8007208:	4852      	ldr	r0, [pc, #328]	; (8007354 <tcp_close_shutdown+0x1a8>)
 800720a:	f008 f8d7 	bl	800f3bc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007216:	687d      	ldr	r5, [r7, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	3304      	adds	r3, #4
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	8ad2      	ldrh	r2, [r2, #22]
 8007220:	6879      	ldr	r1, [r7, #4]
 8007222:	8b09      	ldrh	r1, [r1, #24]
 8007224:	9102      	str	r1, [sp, #8]
 8007226:	9201      	str	r2, [sp, #4]
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	462b      	mov	r3, r5
 800722c:	4622      	mov	r2, r4
 800722e:	4601      	mov	r1, r0
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f005 f89f 	bl	800c374 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 fad4 	bl	80087e4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800723c:	4b47      	ldr	r3, [pc, #284]	; (800735c <tcp_close_shutdown+0x1b0>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	429a      	cmp	r2, r3
 8007244:	d105      	bne.n	8007252 <tcp_close_shutdown+0xa6>
 8007246:	4b45      	ldr	r3, [pc, #276]	; (800735c <tcp_close_shutdown+0x1b0>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	4a43      	ldr	r2, [pc, #268]	; (800735c <tcp_close_shutdown+0x1b0>)
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	e013      	b.n	800727a <tcp_close_shutdown+0xce>
 8007252:	4b42      	ldr	r3, [pc, #264]	; (800735c <tcp_close_shutdown+0x1b0>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	e00c      	b.n	8007274 <tcp_close_shutdown+0xc8>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	429a      	cmp	r2, r3
 8007262:	d104      	bne.n	800726e <tcp_close_shutdown+0xc2>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	60da      	str	r2, [r3, #12]
 800726c:	e005      	b.n	800727a <tcp_close_shutdown+0xce>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1ef      	bne.n	800725a <tcp_close_shutdown+0xae>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	60da      	str	r2, [r3, #12]
 8007280:	4b37      	ldr	r3, [pc, #220]	; (8007360 <tcp_close_shutdown+0x1b4>)
 8007282:	2201      	movs	r2, #1
 8007284:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007286:	4b37      	ldr	r3, [pc, #220]	; (8007364 <tcp_close_shutdown+0x1b8>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	429a      	cmp	r2, r3
 800728e:	d102      	bne.n	8007296 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007290:	f003 ff6c 	bl	800b16c <tcp_trigger_input_pcb_close>
 8007294:	e002      	b.n	800729c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff fed6 	bl	8007048 <tcp_free>
      }
      return ERR_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	e050      	b.n	8007342 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	7d1b      	ldrb	r3, [r3, #20]
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d03b      	beq.n	8007320 <tcp_close_shutdown+0x174>
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	dc44      	bgt.n	8007336 <tcp_close_shutdown+0x18a>
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <tcp_close_shutdown+0x10a>
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d02a      	beq.n	800730a <tcp_close_shutdown+0x15e>
 80072b4:	e03f      	b.n	8007336 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	8adb      	ldrh	r3, [r3, #22]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d021      	beq.n	8007302 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80072be:	4b2a      	ldr	r3, [pc, #168]	; (8007368 <tcp_close_shutdown+0x1bc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d105      	bne.n	80072d4 <tcp_close_shutdown+0x128>
 80072c8:	4b27      	ldr	r3, [pc, #156]	; (8007368 <tcp_close_shutdown+0x1bc>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	4a26      	ldr	r2, [pc, #152]	; (8007368 <tcp_close_shutdown+0x1bc>)
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	e013      	b.n	80072fc <tcp_close_shutdown+0x150>
 80072d4:	4b24      	ldr	r3, [pc, #144]	; (8007368 <tcp_close_shutdown+0x1bc>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	60bb      	str	r3, [r7, #8]
 80072da:	e00c      	b.n	80072f6 <tcp_close_shutdown+0x14a>
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d104      	bne.n	80072f0 <tcp_close_shutdown+0x144>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68da      	ldr	r2, [r3, #12]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	60da      	str	r2, [r3, #12]
 80072ee:	e005      	b.n	80072fc <tcp_close_shutdown+0x150>
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	60bb      	str	r3, [r7, #8]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1ef      	bne.n	80072dc <tcp_close_shutdown+0x130>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff fea0 	bl	8007048 <tcp_free>
      break;
 8007308:	e01a      	b.n	8007340 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f7ff ff14 	bl	8007138 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	4816      	ldr	r0, [pc, #88]	; (800736c <tcp_close_shutdown+0x1c0>)
 8007314:	f001 fab6 	bl	8008884 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7ff feb1 	bl	8007080 <tcp_free_listen>
      break;
 800731e:	e00f      	b.n	8007340 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	480e      	ldr	r0, [pc, #56]	; (800735c <tcp_close_shutdown+0x1b0>)
 8007324:	f001 faae 	bl	8008884 <tcp_pcb_remove>
 8007328:	4b0d      	ldr	r3, [pc, #52]	; (8007360 <tcp_close_shutdown+0x1b4>)
 800732a:	2201      	movs	r2, #1
 800732c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff fe8a 	bl	8007048 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007334:	e004      	b.n	8007340 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f81a 	bl	8007370 <tcp_close_shutdown_fin>
 800733c:	4603      	mov	r3, r0
 800733e:	e000      	b.n	8007342 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bdb0      	pop	{r4, r5, r7, pc}
 800734a:	bf00      	nop
 800734c:	08010fc4 	.word	0x08010fc4
 8007350:	08011098 	.word	0x08011098
 8007354:	08011008 	.word	0x08011008
 8007358:	080110b8 	.word	0x080110b8
 800735c:	200089e8 	.word	0x200089e8
 8007360:	200089f0 	.word	0x200089f0
 8007364:	20008a28 	.word	0x20008a28
 8007368:	200089e0 	.word	0x200089e0
 800736c:	200089e4 	.word	0x200089e4

08007370 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d106      	bne.n	800738c <tcp_close_shutdown_fin+0x1c>
 800737e:	4b2e      	ldr	r3, [pc, #184]	; (8007438 <tcp_close_shutdown_fin+0xc8>)
 8007380:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007384:	492d      	ldr	r1, [pc, #180]	; (800743c <tcp_close_shutdown_fin+0xcc>)
 8007386:	482e      	ldr	r0, [pc, #184]	; (8007440 <tcp_close_shutdown_fin+0xd0>)
 8007388:	f008 f818 	bl	800f3bc <iprintf>

  switch (pcb->state) {
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	7d1b      	ldrb	r3, [r3, #20]
 8007390:	2b07      	cmp	r3, #7
 8007392:	d020      	beq.n	80073d6 <tcp_close_shutdown_fin+0x66>
 8007394:	2b07      	cmp	r3, #7
 8007396:	dc2b      	bgt.n	80073f0 <tcp_close_shutdown_fin+0x80>
 8007398:	2b03      	cmp	r3, #3
 800739a:	d002      	beq.n	80073a2 <tcp_close_shutdown_fin+0x32>
 800739c:	2b04      	cmp	r3, #4
 800739e:	d00d      	beq.n	80073bc <tcp_close_shutdown_fin+0x4c>
 80073a0:	e026      	b.n	80073f0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f004 f8f4 	bl	800b590 <tcp_send_fin>
 80073a8:	4603      	mov	r3, r0
 80073aa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80073ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d11f      	bne.n	80073f4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2205      	movs	r2, #5
 80073b8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80073ba:	e01b      	b.n	80073f4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f004 f8e7 	bl	800b590 <tcp_send_fin>
 80073c2:	4603      	mov	r3, r0
 80073c4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80073c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d114      	bne.n	80073f8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2205      	movs	r2, #5
 80073d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80073d4:	e010      	b.n	80073f8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f004 f8da 	bl	800b590 <tcp_send_fin>
 80073dc:	4603      	mov	r3, r0
 80073de:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80073e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d109      	bne.n	80073fc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2209      	movs	r2, #9
 80073ec:	751a      	strb	r2, [r3, #20]
      }
      break;
 80073ee:	e005      	b.n	80073fc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	e01c      	b.n	800742e <tcp_close_shutdown_fin+0xbe>
      break;
 80073f4:	bf00      	nop
 80073f6:	e002      	b.n	80073fe <tcp_close_shutdown_fin+0x8e>
      break;
 80073f8:	bf00      	nop
 80073fa:	e000      	b.n	80073fe <tcp_close_shutdown_fin+0x8e>
      break;
 80073fc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80073fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d103      	bne.n	800740e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f004 fa00 	bl	800b80c <tcp_output>
 800740c:	e00d      	b.n	800742a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800740e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007416:	d108      	bne.n	800742a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	8b5b      	ldrh	r3, [r3, #26]
 800741c:	f043 0308 	orr.w	r3, r3, #8
 8007420:	b29a      	uxth	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	e001      	b.n	800742e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800742a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	08010fc4 	.word	0x08010fc4
 800743c:	08011074 	.word	0x08011074
 8007440:	08011008 	.word	0x08011008

08007444 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d109      	bne.n	8007466 <tcp_close+0x22>
 8007452:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <tcp_close+0x4c>)
 8007454:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007458:	490e      	ldr	r1, [pc, #56]	; (8007494 <tcp_close+0x50>)
 800745a:	480f      	ldr	r0, [pc, #60]	; (8007498 <tcp_close+0x54>)
 800745c:	f007 ffae 	bl	800f3bc <iprintf>
 8007460:	f06f 030f 	mvn.w	r3, #15
 8007464:	e00f      	b.n	8007486 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	7d1b      	ldrb	r3, [r3, #20]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d006      	beq.n	800747c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	8b5b      	ldrh	r3, [r3, #26]
 8007472:	f043 0310 	orr.w	r3, r3, #16
 8007476:	b29a      	uxth	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800747c:	2101      	movs	r1, #1
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7ff fe94 	bl	80071ac <tcp_close_shutdown>
 8007484:	4603      	mov	r3, r0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	08010fc4 	.word	0x08010fc4
 8007494:	080110d4 	.word	0x080110d4
 8007498:	08011008 	.word	0x08011008

0800749c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08e      	sub	sp, #56	; 0x38
 80074a0:	af04      	add	r7, sp, #16
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d107      	bne.n	80074bc <tcp_abandon+0x20>
 80074ac:	4b52      	ldr	r3, [pc, #328]	; (80075f8 <tcp_abandon+0x15c>)
 80074ae:	f240 223d 	movw	r2, #573	; 0x23d
 80074b2:	4952      	ldr	r1, [pc, #328]	; (80075fc <tcp_abandon+0x160>)
 80074b4:	4852      	ldr	r0, [pc, #328]	; (8007600 <tcp_abandon+0x164>)
 80074b6:	f007 ff81 	bl	800f3bc <iprintf>
 80074ba:	e099      	b.n	80075f0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	7d1b      	ldrb	r3, [r3, #20]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d106      	bne.n	80074d2 <tcp_abandon+0x36>
 80074c4:	4b4c      	ldr	r3, [pc, #304]	; (80075f8 <tcp_abandon+0x15c>)
 80074c6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80074ca:	494e      	ldr	r1, [pc, #312]	; (8007604 <tcp_abandon+0x168>)
 80074cc:	484c      	ldr	r0, [pc, #304]	; (8007600 <tcp_abandon+0x164>)
 80074ce:	f007 ff75 	bl	800f3bc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	7d1b      	ldrb	r3, [r3, #20]
 80074d6:	2b0a      	cmp	r3, #10
 80074d8:	d107      	bne.n	80074ea <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	484a      	ldr	r0, [pc, #296]	; (8007608 <tcp_abandon+0x16c>)
 80074de:	f001 f9d1 	bl	8008884 <tcp_pcb_remove>
    tcp_free(pcb);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff fdb0 	bl	8007048 <tcp_free>
 80074e8:	e082      	b.n	80075f0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80074ea:	2300      	movs	r3, #0
 80074ec:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80074ee:	2300      	movs	r3, #0
 80074f0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007504:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	7d1b      	ldrb	r3, [r3, #20]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d126      	bne.n	8007562 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	8adb      	ldrh	r3, [r3, #22]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d02e      	beq.n	800757a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800751c:	4b3b      	ldr	r3, [pc, #236]	; (800760c <tcp_abandon+0x170>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	429a      	cmp	r2, r3
 8007524:	d105      	bne.n	8007532 <tcp_abandon+0x96>
 8007526:	4b39      	ldr	r3, [pc, #228]	; (800760c <tcp_abandon+0x170>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	4a37      	ldr	r2, [pc, #220]	; (800760c <tcp_abandon+0x170>)
 800752e:	6013      	str	r3, [r2, #0]
 8007530:	e013      	b.n	800755a <tcp_abandon+0xbe>
 8007532:	4b36      	ldr	r3, [pc, #216]	; (800760c <tcp_abandon+0x170>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	e00c      	b.n	8007554 <tcp_abandon+0xb8>
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	429a      	cmp	r2, r3
 8007542:	d104      	bne.n	800754e <tcp_abandon+0xb2>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	60da      	str	r2, [r3, #12]
 800754c:	e005      	b.n	800755a <tcp_abandon+0xbe>
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	61fb      	str	r3, [r7, #28]
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1ef      	bne.n	800753a <tcp_abandon+0x9e>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	60da      	str	r2, [r3, #12]
 8007560:	e00b      	b.n	800757a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	8adb      	ldrh	r3, [r3, #22]
 800756a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800756c:	6879      	ldr	r1, [r7, #4]
 800756e:	4828      	ldr	r0, [pc, #160]	; (8007610 <tcp_abandon+0x174>)
 8007570:	f001 f988 	bl	8008884 <tcp_pcb_remove>
 8007574:	4b27      	ldr	r3, [pc, #156]	; (8007614 <tcp_abandon+0x178>)
 8007576:	2201      	movs	r2, #1
 8007578:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800757e:	2b00      	cmp	r3, #0
 8007580:	d004      	beq.n	800758c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fe7a 	bl	8008280 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007590:	2b00      	cmp	r3, #0
 8007592:	d004      	beq.n	800759e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007598:	4618      	mov	r0, r3
 800759a:	f000 fe71 	bl	8008280 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d004      	beq.n	80075b0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fe68 	bl	8008280 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00e      	beq.n	80075d4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80075b6:	6879      	ldr	r1, [r7, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3304      	adds	r3, #4
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	8b12      	ldrh	r2, [r2, #24]
 80075c0:	9202      	str	r2, [sp, #8]
 80075c2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80075c4:	9201      	str	r2, [sp, #4]
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	460b      	mov	r3, r1
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	69b9      	ldr	r1, [r7, #24]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f004 fed0 	bl	800c374 <tcp_rst>
    }
    last_state = pcb->state;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	7d1b      	ldrb	r3, [r3, #20]
 80075d8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff fd34 	bl	8007048 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d004      	beq.n	80075f0 <tcp_abandon+0x154>
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f06f 010c 	mvn.w	r1, #12
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	4798      	blx	r3
  }
}
 80075f0:	3728      	adds	r7, #40	; 0x28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	08010fc4 	.word	0x08010fc4
 80075fc:	08011108 	.word	0x08011108
 8007600:	08011008 	.word	0x08011008
 8007604:	08011124 	.word	0x08011124
 8007608:	200089ec 	.word	0x200089ec
 800760c:	200089e0 	.word	0x200089e0
 8007610:	200089e8 	.word	0x200089e8
 8007614:	200089f0 	.word	0x200089f0

08007618 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007620:	2101      	movs	r1, #1
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff ff3a 	bl	800749c <tcp_abandon>
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d106      	bne.n	800764c <tcp_update_rcv_ann_wnd+0x1c>
 800763e:	4b25      	ldr	r3, [pc, #148]	; (80076d4 <tcp_update_rcv_ann_wnd+0xa4>)
 8007640:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007644:	4924      	ldr	r1, [pc, #144]	; (80076d8 <tcp_update_rcv_ann_wnd+0xa8>)
 8007646:	4825      	ldr	r0, [pc, #148]	; (80076dc <tcp_update_rcv_ann_wnd+0xac>)
 8007648:	f007 feb8 	bl	800f3bc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007654:	4413      	add	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007660:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007664:	bf28      	it	cs
 8007666:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800766a:	b292      	uxth	r2, r2
 800766c:	4413      	add	r3, r2
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	db08      	blt.n	8007688 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	e020      	b.n	80076ca <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	dd03      	ble.n	800769e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800769c:	e014      	b.n	80076c8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b0:	d306      	bcc.n	80076c0 <tcp_update_rcv_ann_wnd+0x90>
 80076b2:	4b08      	ldr	r3, [pc, #32]	; (80076d4 <tcp_update_rcv_ann_wnd+0xa4>)
 80076b4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80076b8:	4909      	ldr	r1, [pc, #36]	; (80076e0 <tcp_update_rcv_ann_wnd+0xb0>)
 80076ba:	4808      	ldr	r0, [pc, #32]	; (80076dc <tcp_update_rcv_ann_wnd+0xac>)
 80076bc:	f007 fe7e 	bl	800f3bc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80076c8:	2300      	movs	r3, #0
  }
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	08010fc4 	.word	0x08010fc4
 80076d8:	08011220 	.word	0x08011220
 80076dc:	08011008 	.word	0x08011008
 80076e0:	08011244 	.word	0x08011244

080076e4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d107      	bne.n	8007706 <tcp_recved+0x22>
 80076f6:	4b1f      	ldr	r3, [pc, #124]	; (8007774 <tcp_recved+0x90>)
 80076f8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80076fc:	491e      	ldr	r1, [pc, #120]	; (8007778 <tcp_recved+0x94>)
 80076fe:	481f      	ldr	r0, [pc, #124]	; (800777c <tcp_recved+0x98>)
 8007700:	f007 fe5c 	bl	800f3bc <iprintf>
 8007704:	e032      	b.n	800776c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	7d1b      	ldrb	r3, [r3, #20]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d106      	bne.n	800771c <tcp_recved+0x38>
 800770e:	4b19      	ldr	r3, [pc, #100]	; (8007774 <tcp_recved+0x90>)
 8007710:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007714:	491a      	ldr	r1, [pc, #104]	; (8007780 <tcp_recved+0x9c>)
 8007716:	4819      	ldr	r0, [pc, #100]	; (800777c <tcp_recved+0x98>)
 8007718:	f007 fe50 	bl	800f3bc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007720:	887b      	ldrh	r3, [r7, #2]
 8007722:	4413      	add	r3, r2
 8007724:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007726:	89fb      	ldrh	r3, [r7, #14]
 8007728:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800772c:	d804      	bhi.n	8007738 <tcp_recved+0x54>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007732:	89fa      	ldrh	r2, [r7, #14]
 8007734:	429a      	cmp	r2, r3
 8007736:	d204      	bcs.n	8007742 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800773e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007740:	e002      	b.n	8007748 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	89fa      	ldrh	r2, [r7, #14]
 8007746:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff ff71 	bl	8007630 <tcp_update_rcv_ann_wnd>
 800774e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007756:	d309      	bcc.n	800776c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	8b5b      	ldrh	r3, [r3, #26]
 800775c:	f043 0302 	orr.w	r3, r3, #2
 8007760:	b29a      	uxth	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f004 f850 	bl	800b80c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	08010fc4 	.word	0x08010fc4
 8007778:	08011260 	.word	0x08011260
 800777c:	08011008 	.word	0x08011008
 8007780:	08011278 	.word	0x08011278

08007784 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800778e:	4b1e      	ldr	r3, [pc, #120]	; (8007808 <tcp_new_port+0x84>)
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	3301      	adds	r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	4b1c      	ldr	r3, [pc, #112]	; (8007808 <tcp_new_port+0x84>)
 8007798:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800779a:	4b1b      	ldr	r3, [pc, #108]	; (8007808 <tcp_new_port+0x84>)
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d103      	bne.n	80077ae <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80077a6:	4b18      	ldr	r3, [pc, #96]	; (8007808 <tcp_new_port+0x84>)
 80077a8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80077ac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80077ae:	2300      	movs	r3, #0
 80077b0:	71fb      	strb	r3, [r7, #7]
 80077b2:	e01e      	b.n	80077f2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	4a15      	ldr	r2, [pc, #84]	; (800780c <tcp_new_port+0x88>)
 80077b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	603b      	str	r3, [r7, #0]
 80077c0:	e011      	b.n	80077e6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	8ada      	ldrh	r2, [r3, #22]
 80077c6:	4b10      	ldr	r3, [pc, #64]	; (8007808 <tcp_new_port+0x84>)
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d108      	bne.n	80077e0 <tcp_new_port+0x5c>
        n++;
 80077ce:	88bb      	ldrh	r3, [r7, #4]
 80077d0:	3301      	adds	r3, #1
 80077d2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80077d4:	88bb      	ldrh	r3, [r7, #4]
 80077d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077da:	d3d8      	bcc.n	800778e <tcp_new_port+0xa>
          return 0;
 80077dc:	2300      	movs	r3, #0
 80077de:	e00d      	b.n	80077fc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	603b      	str	r3, [r7, #0]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1ea      	bne.n	80077c2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80077ec:	79fb      	ldrb	r3, [r7, #7]
 80077ee:	3301      	adds	r3, #1
 80077f0:	71fb      	strb	r3, [r7, #7]
 80077f2:	79fb      	ldrb	r3, [r7, #7]
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d9dd      	bls.n	80077b4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80077f8:	4b03      	ldr	r3, [pc, #12]	; (8007808 <tcp_new_port+0x84>)
 80077fa:	881b      	ldrh	r3, [r3, #0]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	2000000a 	.word	0x2000000a
 800780c:	08012f98 	.word	0x08012f98

08007810 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08a      	sub	sp, #40	; 0x28
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	4613      	mov	r3, r2
 800781e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8007820:	2300      	movs	r3, #0
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d109      	bne.n	800783e <tcp_connect+0x2e>
 800782a:	4b7d      	ldr	r3, [pc, #500]	; (8007a20 <tcp_connect+0x210>)
 800782c:	f240 4235 	movw	r2, #1077	; 0x435
 8007830:	497c      	ldr	r1, [pc, #496]	; (8007a24 <tcp_connect+0x214>)
 8007832:	487d      	ldr	r0, [pc, #500]	; (8007a28 <tcp_connect+0x218>)
 8007834:	f007 fdc2 	bl	800f3bc <iprintf>
 8007838:	f06f 030f 	mvn.w	r3, #15
 800783c:	e0ec      	b.n	8007a18 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d109      	bne.n	8007858 <tcp_connect+0x48>
 8007844:	4b76      	ldr	r3, [pc, #472]	; (8007a20 <tcp_connect+0x210>)
 8007846:	f240 4236 	movw	r2, #1078	; 0x436
 800784a:	4978      	ldr	r1, [pc, #480]	; (8007a2c <tcp_connect+0x21c>)
 800784c:	4876      	ldr	r0, [pc, #472]	; (8007a28 <tcp_connect+0x218>)
 800784e:	f007 fdb5 	bl	800f3bc <iprintf>
 8007852:	f06f 030f 	mvn.w	r3, #15
 8007856:	e0df      	b.n	8007a18 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	7d1b      	ldrb	r3, [r3, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d009      	beq.n	8007874 <tcp_connect+0x64>
 8007860:	4b6f      	ldr	r3, [pc, #444]	; (8007a20 <tcp_connect+0x210>)
 8007862:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8007866:	4972      	ldr	r1, [pc, #456]	; (8007a30 <tcp_connect+0x220>)
 8007868:	486f      	ldr	r0, [pc, #444]	; (8007a28 <tcp_connect+0x218>)
 800786a:	f007 fda7 	bl	800f3bc <iprintf>
 800786e:	f06f 0309 	mvn.w	r3, #9
 8007872:	e0d1      	b.n	8007a18 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <tcp_connect+0x70>
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	e000      	b.n	8007882 <tcp_connect+0x72>
 8007880:	2300      	movs	r3, #0
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	88fa      	ldrh	r2, [r7, #6]
 800788a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	7a1b      	ldrb	r3, [r3, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d006      	beq.n	80078a2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	7a1b      	ldrb	r3, [r3, #8]
 8007898:	4618      	mov	r0, r3
 800789a:	f7fe fdf5 	bl	8006488 <netif_get_by_index>
 800789e:	6278      	str	r0, [r7, #36]	; 0x24
 80078a0:	e005      	b.n	80078ae <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	3304      	adds	r3, #4
 80078a6:	4618      	mov	r0, r3
 80078a8:	f006 fac2 	bl	800de30 <ip4_route>
 80078ac:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 80078b4:	f06f 0303 	mvn.w	r3, #3
 80078b8:	e0ae      	b.n	8007a18 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <tcp_connect+0xb8>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d111      	bne.n	80078ec <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d002      	beq.n	80078d4 <tcp_connect+0xc4>
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	3304      	adds	r3, #4
 80078d2:	e000      	b.n	80078d6 <tcp_connect+0xc6>
 80078d4:	2300      	movs	r3, #0
 80078d6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d102      	bne.n	80078e4 <tcp_connect+0xd4>
      return ERR_RTE;
 80078de:	f06f 0303 	mvn.w	r3, #3
 80078e2:	e099      	b.n	8007a18 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8adb      	ldrh	r3, [r3, #22]
 80078f0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8adb      	ldrh	r3, [r3, #22]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10c      	bne.n	8007914 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 80078fa:	f7ff ff43 	bl	8007784 <tcp_new_port>
 80078fe:	4603      	mov	r3, r0
 8007900:	461a      	mov	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8adb      	ldrh	r3, [r3, #22]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d102      	bne.n	8007914 <tcp_connect+0x104>
      return ERR_BUF;
 800790e:	f06f 0301 	mvn.w	r3, #1
 8007912:	e081      	b.n	8007a18 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f001 f849 	bl	80089ac <tcp_next_iss>
 800791a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	1e5a      	subs	r2, r3, #1
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	1e5a      	subs	r2, r3, #1
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	1e5a      	subs	r2, r3, #1
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007946:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800795e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007968:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3304      	adds	r3, #4
 8007972:	461a      	mov	r2, r3
 8007974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007976:	f001 f83f 	bl	80089f8 <tcp_eff_send_mss_netif>
 800797a:	4603      	mov	r3, r0
 800797c:	461a      	mov	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2201      	movs	r2, #1
 8007986:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8007992:	2102      	movs	r1, #2
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f003 fe4b 	bl	800b630 <tcp_enqueue_flags>
 800799a:	4603      	mov	r3, r0
 800799c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800799e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d136      	bne.n	8007a14 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2202      	movs	r2, #2
 80079aa:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80079ac:	8b7b      	ldrh	r3, [r7, #26]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d021      	beq.n	80079f6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80079b2:	4b20      	ldr	r3, [pc, #128]	; (8007a34 <tcp_connect+0x224>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d105      	bne.n	80079c8 <tcp_connect+0x1b8>
 80079bc:	4b1d      	ldr	r3, [pc, #116]	; (8007a34 <tcp_connect+0x224>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	4a1c      	ldr	r2, [pc, #112]	; (8007a34 <tcp_connect+0x224>)
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	e013      	b.n	80079f0 <tcp_connect+0x1e0>
 80079c8:	4b1a      	ldr	r3, [pc, #104]	; (8007a34 <tcp_connect+0x224>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	623b      	str	r3, [r7, #32]
 80079ce:	e00c      	b.n	80079ea <tcp_connect+0x1da>
 80079d0:	6a3b      	ldr	r3, [r7, #32]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d104      	bne.n	80079e4 <tcp_connect+0x1d4>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	68da      	ldr	r2, [r3, #12]
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	60da      	str	r2, [r3, #12]
 80079e2:	e005      	b.n	80079f0 <tcp_connect+0x1e0>
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	623b      	str	r3, [r7, #32]
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1ef      	bne.n	80079d0 <tcp_connect+0x1c0>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80079f6:	4b10      	ldr	r3, [pc, #64]	; (8007a38 <tcp_connect+0x228>)
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	60da      	str	r2, [r3, #12]
 80079fe:	4a0e      	ldr	r2, [pc, #56]	; (8007a38 <tcp_connect+0x228>)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	f004 fe78 	bl	800c6f8 <tcp_timer_needed>
 8007a08:	4b0c      	ldr	r3, [pc, #48]	; (8007a3c <tcp_connect+0x22c>)
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f003 fefc 	bl	800b80c <tcp_output>
  }
  return ret;
 8007a14:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3728      	adds	r7, #40	; 0x28
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	08010fc4 	.word	0x08010fc4
 8007a24:	080112a0 	.word	0x080112a0
 8007a28:	08011008 	.word	0x08011008
 8007a2c:	080112bc 	.word	0x080112bc
 8007a30:	080112d8 	.word	0x080112d8
 8007a34:	200089e0 	.word	0x200089e0
 8007a38:	200089e8 	.word	0x200089e8
 8007a3c:	200089f0 	.word	0x200089f0

08007a40 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007a40:	b5b0      	push	{r4, r5, r7, lr}
 8007a42:	b090      	sub	sp, #64	; 0x40
 8007a44:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007a4c:	4b94      	ldr	r3, [pc, #592]	; (8007ca0 <tcp_slowtmr+0x260>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3301      	adds	r3, #1
 8007a52:	4a93      	ldr	r2, [pc, #588]	; (8007ca0 <tcp_slowtmr+0x260>)
 8007a54:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007a56:	4b93      	ldr	r3, [pc, #588]	; (8007ca4 <tcp_slowtmr+0x264>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	4b91      	ldr	r3, [pc, #580]	; (8007ca4 <tcp_slowtmr+0x264>)
 8007a60:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007a62:	2300      	movs	r3, #0
 8007a64:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007a66:	4b90      	ldr	r3, [pc, #576]	; (8007ca8 <tcp_slowtmr+0x268>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007a6c:	e29d      	b.n	8007faa <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a70:	7d1b      	ldrb	r3, [r3, #20]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d106      	bne.n	8007a84 <tcp_slowtmr+0x44>
 8007a76:	4b8d      	ldr	r3, [pc, #564]	; (8007cac <tcp_slowtmr+0x26c>)
 8007a78:	f240 42be 	movw	r2, #1214	; 0x4be
 8007a7c:	498c      	ldr	r1, [pc, #560]	; (8007cb0 <tcp_slowtmr+0x270>)
 8007a7e:	488d      	ldr	r0, [pc, #564]	; (8007cb4 <tcp_slowtmr+0x274>)
 8007a80:	f007 fc9c 	bl	800f3bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	7d1b      	ldrb	r3, [r3, #20]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d106      	bne.n	8007a9a <tcp_slowtmr+0x5a>
 8007a8c:	4b87      	ldr	r3, [pc, #540]	; (8007cac <tcp_slowtmr+0x26c>)
 8007a8e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007a92:	4989      	ldr	r1, [pc, #548]	; (8007cb8 <tcp_slowtmr+0x278>)
 8007a94:	4887      	ldr	r0, [pc, #540]	; (8007cb4 <tcp_slowtmr+0x274>)
 8007a96:	f007 fc91 	bl	800f3bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9c:	7d1b      	ldrb	r3, [r3, #20]
 8007a9e:	2b0a      	cmp	r3, #10
 8007aa0:	d106      	bne.n	8007ab0 <tcp_slowtmr+0x70>
 8007aa2:	4b82      	ldr	r3, [pc, #520]	; (8007cac <tcp_slowtmr+0x26c>)
 8007aa4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007aa8:	4984      	ldr	r1, [pc, #528]	; (8007cbc <tcp_slowtmr+0x27c>)
 8007aaa:	4882      	ldr	r0, [pc, #520]	; (8007cb4 <tcp_slowtmr+0x274>)
 8007aac:	f007 fc86 	bl	800f3bc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab2:	7f9a      	ldrb	r2, [r3, #30]
 8007ab4:	4b7b      	ldr	r3, [pc, #492]	; (8007ca4 <tcp_slowtmr+0x264>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d105      	bne.n	8007ac8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007ac6:	e270      	b.n	8007faa <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007ac8:	4b76      	ldr	r3, [pc, #472]	; (8007ca4 <tcp_slowtmr+0x264>)
 8007aca:	781a      	ldrb	r2, [r3, #0]
 8007acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ace:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	7d1b      	ldrb	r3, [r3, #20]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d10a      	bne.n	8007afa <tcp_slowtmr+0xba>
 8007ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007aea:	2b05      	cmp	r3, #5
 8007aec:	d905      	bls.n	8007afa <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007af2:	3301      	adds	r3, #1
 8007af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007af8:	e11e      	b.n	8007d38 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b00:	2b0b      	cmp	r3, #11
 8007b02:	d905      	bls.n	8007b10 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b08:	3301      	adds	r3, #1
 8007b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b0e:	e113      	b.n	8007d38 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d075      	beq.n	8007c06 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d006      	beq.n	8007b30 <tcp_slowtmr+0xf0>
 8007b22:	4b62      	ldr	r3, [pc, #392]	; (8007cac <tcp_slowtmr+0x26c>)
 8007b24:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007b28:	4965      	ldr	r1, [pc, #404]	; (8007cc0 <tcp_slowtmr+0x280>)
 8007b2a:	4862      	ldr	r0, [pc, #392]	; (8007cb4 <tcp_slowtmr+0x274>)
 8007b2c:	f007 fc46 	bl	800f3bc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d106      	bne.n	8007b46 <tcp_slowtmr+0x106>
 8007b38:	4b5c      	ldr	r3, [pc, #368]	; (8007cac <tcp_slowtmr+0x26c>)
 8007b3a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007b3e:	4961      	ldr	r1, [pc, #388]	; (8007cc4 <tcp_slowtmr+0x284>)
 8007b40:	485c      	ldr	r0, [pc, #368]	; (8007cb4 <tcp_slowtmr+0x274>)
 8007b42:	f007 fc3b 	bl	800f3bc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b48:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007b4c:	2b0b      	cmp	r3, #11
 8007b4e:	d905      	bls.n	8007b5c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b54:	3301      	adds	r3, #1
 8007b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b5a:	e0ed      	b.n	8007d38 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007b62:	3b01      	subs	r3, #1
 8007b64:	4a58      	ldr	r2, [pc, #352]	; (8007cc8 <tcp_slowtmr+0x288>)
 8007b66:	5cd3      	ldrb	r3, [r2, r3]
 8007b68:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007b70:	7c7a      	ldrb	r2, [r7, #17]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d907      	bls.n	8007b86 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b82:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b88:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007b8c:	7c7a      	ldrb	r2, [r7, #17]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	f200 80d2 	bhi.w	8007d38 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007b94:	2301      	movs	r3, #1
 8007b96:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d108      	bne.n	8007bb4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007ba2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ba4:	f004 fcda 	bl	800c55c <tcp_zero_window_probe>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d014      	beq.n	8007bd8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007bae:	2300      	movs	r3, #0
 8007bb0:	623b      	str	r3, [r7, #32]
 8007bb2:	e011      	b.n	8007bd8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bbe:	f003 fb9f 	bl	800b300 <tcp_split_unsent_seg>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d107      	bne.n	8007bd8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007bc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bca:	f003 fe1f 	bl	800b80c <tcp_output>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 80ac 	beq.w	8007d38 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007bee:	2b06      	cmp	r3, #6
 8007bf0:	f200 80a2 	bhi.w	8007d38 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007c04:	e098      	b.n	8007d38 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	db0f      	blt.n	8007c30 <tcp_slowtmr+0x1f0>
 8007c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c12:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007c16:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d008      	beq.n	8007c30 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	3301      	adds	r3, #1
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	b21a      	sxth	r2, r3
 8007c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c32:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	db7b      	blt.n	8007d38 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c42:	f004 f8d5 	bl	800bdf0 <tcp_rexmit_rto_prepare>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d007      	beq.n	8007c5c <tcp_slowtmr+0x21c>
 8007c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d171      	bne.n	8007d38 <tcp_slowtmr+0x2f8>
 8007c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d06d      	beq.n	8007d38 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	7d1b      	ldrb	r3, [r3, #20]
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d03a      	beq.n	8007cda <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c6a:	2b0c      	cmp	r3, #12
 8007c6c:	bf28      	it	cs
 8007c6e:	230c      	movcs	r3, #12
 8007c70:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007c78:	10db      	asrs	r3, r3, #3
 8007c7a:	b21b      	sxth	r3, r3
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c80:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007c84:	4413      	add	r3, r2
 8007c86:	7efa      	ldrb	r2, [r7, #27]
 8007c88:	4910      	ldr	r1, [pc, #64]	; (8007ccc <tcp_slowtmr+0x28c>)
 8007c8a:	5c8a      	ldrb	r2, [r1, r2]
 8007c8c:	4093      	lsls	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007c96:	4293      	cmp	r3, r2
 8007c98:	dc1a      	bgt.n	8007cd0 <tcp_slowtmr+0x290>
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	b21a      	sxth	r2, r3
 8007c9e:	e019      	b.n	8007cd4 <tcp_slowtmr+0x294>
 8007ca0:	200089dc 	.word	0x200089dc
 8007ca4:	200089f2 	.word	0x200089f2
 8007ca8:	200089e8 	.word	0x200089e8
 8007cac:	08010fc4 	.word	0x08010fc4
 8007cb0:	08011308 	.word	0x08011308
 8007cb4:	08011008 	.word	0x08011008
 8007cb8:	08011334 	.word	0x08011334
 8007cbc:	08011360 	.word	0x08011360
 8007cc0:	08011390 	.word	0x08011390
 8007cc4:	080113c4 	.word	0x080113c4
 8007cc8:	08012f90 	.word	0x08012f90
 8007ccc:	08012f80 	.word	0x08012f80
 8007cd0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	2200      	movs	r2, #0
 8007cde:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007cec:	4293      	cmp	r3, r2
 8007cee:	bf28      	it	cs
 8007cf0:	4613      	movcs	r3, r2
 8007cf2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007cf4:	8a7b      	ldrh	r3, [r7, #18]
 8007cf6:	085b      	lsrs	r3, r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d206      	bcs.n	8007d20 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d22:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007d32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d34:	f004 f8cc 	bl	800bed0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	7d1b      	ldrb	r3, [r3, #20]
 8007d3c:	2b06      	cmp	r3, #6
 8007d3e:	d111      	bne.n	8007d64 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	8b5b      	ldrh	r3, [r3, #26]
 8007d44:	f003 0310 	and.w	r3, r3, #16
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007d4c:	4b9c      	ldr	r3, [pc, #624]	; (8007fc0 <tcp_slowtmr+0x580>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	2b28      	cmp	r3, #40	; 0x28
 8007d58:	d904      	bls.n	8007d64 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d5e:	3301      	adds	r3, #1
 8007d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d66:	7a5b      	ldrb	r3, [r3, #9]
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d04a      	beq.n	8007e06 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d003      	beq.n	8007d80 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007d7c:	2b07      	cmp	r3, #7
 8007d7e:	d142      	bne.n	8007e06 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007d80:	4b8f      	ldr	r3, [pc, #572]	; (8007fc0 <tcp_slowtmr+0x580>)
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007d90:	4b8c      	ldr	r3, [pc, #560]	; (8007fc4 <tcp_slowtmr+0x584>)
 8007d92:	440b      	add	r3, r1
 8007d94:	498c      	ldr	r1, [pc, #560]	; (8007fc8 <tcp_slowtmr+0x588>)
 8007d96:	fba1 1303 	umull	r1, r3, r1, r3
 8007d9a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d90a      	bls.n	8007db6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007da4:	3301      	adds	r3, #1
 8007da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007daa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007dae:	3301      	adds	r3, #1
 8007db0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007db4:	e027      	b.n	8007e06 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007db6:	4b82      	ldr	r3, [pc, #520]	; (8007fc0 <tcp_slowtmr+0x580>)
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007dcc:	4618      	mov	r0, r3
 8007dce:	4b7f      	ldr	r3, [pc, #508]	; (8007fcc <tcp_slowtmr+0x58c>)
 8007dd0:	fb00 f303 	mul.w	r3, r0, r3
 8007dd4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007dd6:	497c      	ldr	r1, [pc, #496]	; (8007fc8 <tcp_slowtmr+0x588>)
 8007dd8:	fba1 1303 	umull	r1, r3, r1, r3
 8007ddc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d911      	bls.n	8007e06 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8007de2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007de4:	f004 fb7a 	bl	800c4dc <tcp_keepalive>
 8007de8:	4603      	mov	r3, r0
 8007dea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007dee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d107      	bne.n	8007e06 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e02:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d011      	beq.n	8007e32 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007e0e:	4b6c      	ldr	r3, [pc, #432]	; (8007fc0 <tcp_slowtmr+0x580>)
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	1ad2      	subs	r2, r2, r3
 8007e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007e1e:	4619      	mov	r1, r3
 8007e20:	460b      	mov	r3, r1
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	440b      	add	r3, r1
 8007e26:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d302      	bcc.n	8007e32 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007e2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e2e:	f000 fe8d 	bl	8008b4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e34:	7d1b      	ldrb	r3, [r3, #20]
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	d10b      	bne.n	8007e52 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e3a:	4b61      	ldr	r3, [pc, #388]	; (8007fc0 <tcp_slowtmr+0x580>)
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	2b28      	cmp	r3, #40	; 0x28
 8007e46:	d904      	bls.n	8007e52 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e54:	7d1b      	ldrb	r3, [r3, #20]
 8007e56:	2b09      	cmp	r3, #9
 8007e58:	d10b      	bne.n	8007e72 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007e5a:	4b59      	ldr	r3, [pc, #356]	; (8007fc0 <tcp_slowtmr+0x580>)
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2bf0      	cmp	r3, #240	; 0xf0
 8007e66:	d904      	bls.n	8007e72 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d060      	beq.n	8007f3c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e80:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007e82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e84:	f000 fcae 	bl	80087e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d010      	beq.n	8007eb0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007e8e:	4b50      	ldr	r3, [pc, #320]	; (8007fd0 <tcp_slowtmr+0x590>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d106      	bne.n	8007ea6 <tcp_slowtmr+0x466>
 8007e98:	4b4e      	ldr	r3, [pc, #312]	; (8007fd4 <tcp_slowtmr+0x594>)
 8007e9a:	f240 526d 	movw	r2, #1389	; 0x56d
 8007e9e:	494e      	ldr	r1, [pc, #312]	; (8007fd8 <tcp_slowtmr+0x598>)
 8007ea0:	484e      	ldr	r0, [pc, #312]	; (8007fdc <tcp_slowtmr+0x59c>)
 8007ea2:	f007 fa8b 	bl	800f3bc <iprintf>
        prev->next = pcb->next;
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea8:	68da      	ldr	r2, [r3, #12]
 8007eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eac:	60da      	str	r2, [r3, #12]
 8007eae:	e00f      	b.n	8007ed0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007eb0:	4b47      	ldr	r3, [pc, #284]	; (8007fd0 <tcp_slowtmr+0x590>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d006      	beq.n	8007ec8 <tcp_slowtmr+0x488>
 8007eba:	4b46      	ldr	r3, [pc, #280]	; (8007fd4 <tcp_slowtmr+0x594>)
 8007ebc:	f240 5271 	movw	r2, #1393	; 0x571
 8007ec0:	4947      	ldr	r1, [pc, #284]	; (8007fe0 <tcp_slowtmr+0x5a0>)
 8007ec2:	4846      	ldr	r0, [pc, #280]	; (8007fdc <tcp_slowtmr+0x59c>)
 8007ec4:	f007 fa7a 	bl	800f3bc <iprintf>
        tcp_active_pcbs = pcb->next;
 8007ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	4a40      	ldr	r2, [pc, #256]	; (8007fd0 <tcp_slowtmr+0x590>)
 8007ece:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007ed0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d013      	beq.n	8007f00 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eda:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ede:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007ee0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ee8:	8ad2      	ldrh	r2, [r2, #22]
 8007eea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007eec:	8b09      	ldrh	r1, [r1, #24]
 8007eee:	9102      	str	r1, [sp, #8]
 8007ef0:	9201      	str	r2, [sp, #4]
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	462b      	mov	r3, r5
 8007ef6:	4622      	mov	r2, r4
 8007ef8:	4601      	mov	r1, r0
 8007efa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007efc:	f004 fa3a 	bl	800c374 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f08:	7d1b      	ldrb	r3, [r3, #20]
 8007f0a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007f16:	6838      	ldr	r0, [r7, #0]
 8007f18:	f7ff f896 	bl	8007048 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007f1c:	4b31      	ldr	r3, [pc, #196]	; (8007fe4 <tcp_slowtmr+0x5a4>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d004      	beq.n	8007f32 <tcp_slowtmr+0x4f2>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f06f 010c 	mvn.w	r1, #12
 8007f2e:	68b8      	ldr	r0, [r7, #8]
 8007f30:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007f32:	4b2c      	ldr	r3, [pc, #176]	; (8007fe4 <tcp_slowtmr+0x5a4>)
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d037      	beq.n	8007faa <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8007f3a:	e592      	b.n	8007a62 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f48:	7f1b      	ldrb	r3, [r3, #28]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f54:	7f1a      	ldrb	r2, [r3, #28]
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	7f5b      	ldrb	r3, [r3, #29]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d325      	bcc.n	8007faa <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8007f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f60:	2200      	movs	r2, #0
 8007f62:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007f64:	4b1f      	ldr	r3, [pc, #124]	; (8007fe4 <tcp_slowtmr+0x5a4>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00b      	beq.n	8007f8c <tcp_slowtmr+0x54c>
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f7c:	6912      	ldr	r2, [r2, #16]
 8007f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f80:	4610      	mov	r0, r2
 8007f82:	4798      	blx	r3
 8007f84:	4603      	mov	r3, r0
 8007f86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007f8a:	e002      	b.n	8007f92 <tcp_slowtmr+0x552>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007f92:	4b14      	ldr	r3, [pc, #80]	; (8007fe4 <tcp_slowtmr+0x5a4>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d000      	beq.n	8007f9c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8007f9a:	e562      	b.n	8007a62 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007f9c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d102      	bne.n	8007faa <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8007fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fa6:	f003 fc31 	bl	800b80c <tcp_output>
  while (pcb != NULL) {
 8007faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f47f ad5e 	bne.w	8007a6e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007fb6:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <tcp_slowtmr+0x5a8>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007fbc:	e069      	b.n	8008092 <tcp_slowtmr+0x652>
 8007fbe:	bf00      	nop
 8007fc0:	200089dc 	.word	0x200089dc
 8007fc4:	000a4cb8 	.word	0x000a4cb8
 8007fc8:	10624dd3 	.word	0x10624dd3
 8007fcc:	000124f8 	.word	0x000124f8
 8007fd0:	200089e8 	.word	0x200089e8
 8007fd4:	08010fc4 	.word	0x08010fc4
 8007fd8:	080113fc 	.word	0x080113fc
 8007fdc:	08011008 	.word	0x08011008
 8007fe0:	08011428 	.word	0x08011428
 8007fe4:	200089f0 	.word	0x200089f0
 8007fe8:	200089ec 	.word	0x200089ec
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fee:	7d1b      	ldrb	r3, [r3, #20]
 8007ff0:	2b0a      	cmp	r3, #10
 8007ff2:	d006      	beq.n	8008002 <tcp_slowtmr+0x5c2>
 8007ff4:	4b2b      	ldr	r3, [pc, #172]	; (80080a4 <tcp_slowtmr+0x664>)
 8007ff6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007ffa:	492b      	ldr	r1, [pc, #172]	; (80080a8 <tcp_slowtmr+0x668>)
 8007ffc:	482b      	ldr	r0, [pc, #172]	; (80080ac <tcp_slowtmr+0x66c>)
 8007ffe:	f007 f9dd 	bl	800f3bc <iprintf>
    pcb_remove = 0;
 8008002:	2300      	movs	r3, #0
 8008004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008008:	4b29      	ldr	r3, [pc, #164]	; (80080b0 <tcp_slowtmr+0x670>)
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2bf0      	cmp	r3, #240	; 0xf0
 8008014:	d904      	bls.n	8008020 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800801a:	3301      	adds	r3, #1
 800801c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008024:	2b00      	cmp	r3, #0
 8008026:	d02f      	beq.n	8008088 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800802a:	f000 fbdb 	bl	80087e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800802e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008030:	2b00      	cmp	r3, #0
 8008032:	d010      	beq.n	8008056 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008034:	4b1f      	ldr	r3, [pc, #124]	; (80080b4 <tcp_slowtmr+0x674>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800803a:	429a      	cmp	r2, r3
 800803c:	d106      	bne.n	800804c <tcp_slowtmr+0x60c>
 800803e:	4b19      	ldr	r3, [pc, #100]	; (80080a4 <tcp_slowtmr+0x664>)
 8008040:	f240 52af 	movw	r2, #1455	; 0x5af
 8008044:	491c      	ldr	r1, [pc, #112]	; (80080b8 <tcp_slowtmr+0x678>)
 8008046:	4819      	ldr	r0, [pc, #100]	; (80080ac <tcp_slowtmr+0x66c>)
 8008048:	f007 f9b8 	bl	800f3bc <iprintf>
        prev->next = pcb->next;
 800804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804e:	68da      	ldr	r2, [r3, #12]
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	60da      	str	r2, [r3, #12]
 8008054:	e00f      	b.n	8008076 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008056:	4b17      	ldr	r3, [pc, #92]	; (80080b4 <tcp_slowtmr+0x674>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800805c:	429a      	cmp	r2, r3
 800805e:	d006      	beq.n	800806e <tcp_slowtmr+0x62e>
 8008060:	4b10      	ldr	r3, [pc, #64]	; (80080a4 <tcp_slowtmr+0x664>)
 8008062:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008066:	4915      	ldr	r1, [pc, #84]	; (80080bc <tcp_slowtmr+0x67c>)
 8008068:	4810      	ldr	r0, [pc, #64]	; (80080ac <tcp_slowtmr+0x66c>)
 800806a:	f007 f9a7 	bl	800f3bc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	4a10      	ldr	r2, [pc, #64]	; (80080b4 <tcp_slowtmr+0x674>)
 8008074:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008078:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800807a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008080:	69f8      	ldr	r0, [r7, #28]
 8008082:	f7fe ffe1 	bl	8007048 <tcp_free>
 8008086:	e004      	b.n	8008092 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800808c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1a9      	bne.n	8007fec <tcp_slowtmr+0x5ac>
    }
  }
}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	3730      	adds	r7, #48	; 0x30
 800809e:	46bd      	mov	sp, r7
 80080a0:	bdb0      	pop	{r4, r5, r7, pc}
 80080a2:	bf00      	nop
 80080a4:	08010fc4 	.word	0x08010fc4
 80080a8:	08011454 	.word	0x08011454
 80080ac:	08011008 	.word	0x08011008
 80080b0:	200089dc 	.word	0x200089dc
 80080b4:	200089ec 	.word	0x200089ec
 80080b8:	08011484 	.word	0x08011484
 80080bc:	080114ac 	.word	0x080114ac

080080c0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80080c6:	4b2d      	ldr	r3, [pc, #180]	; (800817c <tcp_fasttmr+0xbc>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	3301      	adds	r3, #1
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	4b2b      	ldr	r3, [pc, #172]	; (800817c <tcp_fasttmr+0xbc>)
 80080d0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80080d2:	4b2b      	ldr	r3, [pc, #172]	; (8008180 <tcp_fasttmr+0xc0>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80080d8:	e048      	b.n	800816c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	7f9a      	ldrb	r2, [r3, #30]
 80080de:	4b27      	ldr	r3, [pc, #156]	; (800817c <tcp_fasttmr+0xbc>)
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d03f      	beq.n	8008166 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80080e6:	4b25      	ldr	r3, [pc, #148]	; (800817c <tcp_fasttmr+0xbc>)
 80080e8:	781a      	ldrb	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	8b5b      	ldrh	r3, [r3, #26]
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d010      	beq.n	800811c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	8b5b      	ldrh	r3, [r3, #26]
 80080fe:	f043 0302 	orr.w	r3, r3, #2
 8008102:	b29a      	uxth	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f003 fb7f 	bl	800b80c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	8b5b      	ldrh	r3, [r3, #26]
 8008112:	f023 0303 	bic.w	r3, r3, #3
 8008116:	b29a      	uxth	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	8b5b      	ldrh	r3, [r3, #26]
 8008120:	f003 0308 	and.w	r3, r3, #8
 8008124:	2b00      	cmp	r3, #0
 8008126:	d009      	beq.n	800813c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	8b5b      	ldrh	r3, [r3, #26]
 800812c:	f023 0308 	bic.w	r3, r3, #8
 8008130:	b29a      	uxth	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7ff f91a 	bl	8007370 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800814a:	4b0e      	ldr	r3, [pc, #56]	; (8008184 <tcp_fasttmr+0xc4>)
 800814c:	2200      	movs	r2, #0
 800814e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f819 	bl	8008188 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008156:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <tcp_fasttmr+0xc4>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d000      	beq.n	8008160 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800815e:	e7b8      	b.n	80080d2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	607b      	str	r3, [r7, #4]
 8008164:	e002      	b.n	800816c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1b3      	bne.n	80080da <tcp_fasttmr+0x1a>
    }
  }
}
 8008172:	bf00      	nop
 8008174:	bf00      	nop
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	200089f2 	.word	0x200089f2
 8008180:	200089e8 	.word	0x200089e8
 8008184:	200089f0 	.word	0x200089f0

08008188 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008188:	b590      	push	{r4, r7, lr}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d109      	bne.n	80081aa <tcp_process_refused_data+0x22>
 8008196:	4b37      	ldr	r3, [pc, #220]	; (8008274 <tcp_process_refused_data+0xec>)
 8008198:	f240 6209 	movw	r2, #1545	; 0x609
 800819c:	4936      	ldr	r1, [pc, #216]	; (8008278 <tcp_process_refused_data+0xf0>)
 800819e:	4837      	ldr	r0, [pc, #220]	; (800827c <tcp_process_refused_data+0xf4>)
 80081a0:	f007 f90c 	bl	800f3bc <iprintf>
 80081a4:	f06f 030f 	mvn.w	r3, #15
 80081a8:	e060      	b.n	800826c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081ae:	7b5b      	ldrb	r3, [r3, #13]
 80081b0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081b6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00b      	beq.n	80081e0 <tcp_process_refused_data+0x58>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6918      	ldr	r0, [r3, #16]
 80081d2:	2300      	movs	r3, #0
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	6879      	ldr	r1, [r7, #4]
 80081d8:	47a0      	blx	r4
 80081da:	4603      	mov	r3, r0
 80081dc:	73fb      	strb	r3, [r7, #15]
 80081de:	e007      	b.n	80081f0 <tcp_process_refused_data+0x68>
 80081e0:	2300      	movs	r3, #0
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	2000      	movs	r0, #0
 80081e8:	f000 f8a4 	bl	8008334 <tcp_recv_null>
 80081ec:	4603      	mov	r3, r0
 80081ee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80081f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d12a      	bne.n	800824e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
 80081fa:	f003 0320 	and.w	r3, r3, #32
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d033      	beq.n	800826a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008206:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800820a:	d005      	beq.n	8008218 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008210:	3301      	adds	r3, #1
 8008212:	b29a      	uxth	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00b      	beq.n	800823a <tcp_process_refused_data+0xb2>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6918      	ldr	r0, [r3, #16]
 800822c:	2300      	movs	r3, #0
 800822e:	2200      	movs	r2, #0
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	47a0      	blx	r4
 8008234:	4603      	mov	r3, r0
 8008236:	73fb      	strb	r3, [r7, #15]
 8008238:	e001      	b.n	800823e <tcp_process_refused_data+0xb6>
 800823a:	2300      	movs	r3, #0
 800823c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800823e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008242:	f113 0f0d 	cmn.w	r3, #13
 8008246:	d110      	bne.n	800826a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008248:	f06f 030c 	mvn.w	r3, #12
 800824c:	e00e      	b.n	800826c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800824e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008252:	f113 0f0d 	cmn.w	r3, #13
 8008256:	d102      	bne.n	800825e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008258:	f06f 030c 	mvn.w	r3, #12
 800825c:	e006      	b.n	800826c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008264:	f06f 0304 	mvn.w	r3, #4
 8008268:	e000      	b.n	800826c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	bd90      	pop	{r4, r7, pc}
 8008274:	08010fc4 	.word	0x08010fc4
 8008278:	080114d4 	.word	0x080114d4
 800827c:	08011008 	.word	0x08011008

08008280 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008288:	e007      	b.n	800829a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f80a 	bl	80082aa <tcp_seg_free>
    seg = next;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1f4      	bne.n	800828a <tcp_segs_free+0xa>
  }
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00c      	beq.n	80082d2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d004      	beq.n	80082ca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fe fc1f 	bl	8006b08 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80082ca:	6879      	ldr	r1, [r7, #4]
 80082cc:	2003      	movs	r0, #3
 80082ce:	f7fd fe29 	bl	8005f24 <memp_free>
  }
}
 80082d2:	bf00      	nop
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d106      	bne.n	80082f8 <tcp_seg_copy+0x1c>
 80082ea:	4b0f      	ldr	r3, [pc, #60]	; (8008328 <tcp_seg_copy+0x4c>)
 80082ec:	f240 6282 	movw	r2, #1666	; 0x682
 80082f0:	490e      	ldr	r1, [pc, #56]	; (800832c <tcp_seg_copy+0x50>)
 80082f2:	480f      	ldr	r0, [pc, #60]	; (8008330 <tcp_seg_copy+0x54>)
 80082f4:	f007 f862 	bl	800f3bc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80082f8:	2003      	movs	r0, #3
 80082fa:	f7fd fdc7 	bl	8005e8c <memp_malloc>
 80082fe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <tcp_seg_copy+0x2e>
    return NULL;
 8008306:	2300      	movs	r3, #0
 8008308:	e00a      	b.n	8008320 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800830a:	2210      	movs	r2, #16
 800830c:	6879      	ldr	r1, [r7, #4]
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f007 f83e 	bl	800f390 <memcpy>
  pbuf_ref(cseg->p);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe fc95 	bl	8006c48 <pbuf_ref>
  return cseg;
 800831e:	68fb      	ldr	r3, [r7, #12]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	08010fc4 	.word	0x08010fc4
 800832c:	08011518 	.word	0x08011518
 8008330:	08011008 	.word	0x08011008

08008334 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d109      	bne.n	800835c <tcp_recv_null+0x28>
 8008348:	4b12      	ldr	r3, [pc, #72]	; (8008394 <tcp_recv_null+0x60>)
 800834a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800834e:	4912      	ldr	r1, [pc, #72]	; (8008398 <tcp_recv_null+0x64>)
 8008350:	4812      	ldr	r0, [pc, #72]	; (800839c <tcp_recv_null+0x68>)
 8008352:	f007 f833 	bl	800f3bc <iprintf>
 8008356:	f06f 030f 	mvn.w	r3, #15
 800835a:	e016      	b.n	800838a <tcp_recv_null+0x56>

  if (p != NULL) {
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d009      	beq.n	8008376 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	891b      	ldrh	r3, [r3, #8]
 8008366:	4619      	mov	r1, r3
 8008368:	68b8      	ldr	r0, [r7, #8]
 800836a:	f7ff f9bb 	bl	80076e4 <tcp_recved>
    pbuf_free(p);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7fe fbca 	bl	8006b08 <pbuf_free>
 8008374:	e008      	b.n	8008388 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d104      	bne.n	8008388 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800837e:	68b8      	ldr	r0, [r7, #8]
 8008380:	f7ff f860 	bl	8007444 <tcp_close>
 8008384:	4603      	mov	r3, r0
 8008386:	e000      	b.n	800838a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	08010fc4 	.word	0x08010fc4
 8008398:	08011534 	.word	0x08011534
 800839c:	08011008 	.word	0x08011008

080083a0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80083aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	db01      	blt.n	80083b6 <tcp_kill_prio+0x16>
 80083b2:	79fb      	ldrb	r3, [r7, #7]
 80083b4:	e000      	b.n	80083b8 <tcp_kill_prio+0x18>
 80083b6:	237f      	movs	r3, #127	; 0x7f
 80083b8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80083ba:	7afb      	ldrb	r3, [r7, #11]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d034      	beq.n	800842a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80083c0:	7afb      	ldrb	r3, [r7, #11]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80083ca:	2300      	movs	r3, #0
 80083cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80083ce:	4b19      	ldr	r3, [pc, #100]	; (8008434 <tcp_kill_prio+0x94>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	e01f      	b.n	8008416 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	7d5b      	ldrb	r3, [r3, #21]
 80083da:	7afa      	ldrb	r2, [r7, #11]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d80c      	bhi.n	80083fa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80083e4:	7afa      	ldrb	r2, [r7, #11]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d112      	bne.n	8008410 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80083ea:	4b13      	ldr	r3, [pc, #76]	; (8008438 <tcp_kill_prio+0x98>)
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d80a      	bhi.n	8008410 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80083fa:	4b0f      	ldr	r3, [pc, #60]	; (8008438 <tcp_kill_prio+0x98>)
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	7d5b      	ldrb	r3, [r3, #21]
 800840e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1dc      	bne.n	80083d6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d004      	beq.n	800842c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008422:	6938      	ldr	r0, [r7, #16]
 8008424:	f7ff f8f8 	bl	8007618 <tcp_abort>
 8008428:	e000      	b.n	800842c <tcp_kill_prio+0x8c>
    return;
 800842a:	bf00      	nop
  }
}
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	200089e8 	.word	0x200089e8
 8008438:	200089dc 	.word	0x200089dc

0800843c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008446:	79fb      	ldrb	r3, [r7, #7]
 8008448:	2b08      	cmp	r3, #8
 800844a:	d009      	beq.n	8008460 <tcp_kill_state+0x24>
 800844c:	79fb      	ldrb	r3, [r7, #7]
 800844e:	2b09      	cmp	r3, #9
 8008450:	d006      	beq.n	8008460 <tcp_kill_state+0x24>
 8008452:	4b1a      	ldr	r3, [pc, #104]	; (80084bc <tcp_kill_state+0x80>)
 8008454:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008458:	4919      	ldr	r1, [pc, #100]	; (80084c0 <tcp_kill_state+0x84>)
 800845a:	481a      	ldr	r0, [pc, #104]	; (80084c4 <tcp_kill_state+0x88>)
 800845c:	f006 ffae 	bl	800f3bc <iprintf>

  inactivity = 0;
 8008460:	2300      	movs	r3, #0
 8008462:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008464:	2300      	movs	r3, #0
 8008466:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008468:	4b17      	ldr	r3, [pc, #92]	; (80084c8 <tcp_kill_state+0x8c>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	617b      	str	r3, [r7, #20]
 800846e:	e017      	b.n	80084a0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	7d1b      	ldrb	r3, [r3, #20]
 8008474:	79fa      	ldrb	r2, [r7, #7]
 8008476:	429a      	cmp	r2, r3
 8008478:	d10f      	bne.n	800849a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800847a:	4b14      	ldr	r3, [pc, #80]	; (80084cc <tcp_kill_state+0x90>)
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	429a      	cmp	r2, r3
 8008488:	d807      	bhi.n	800849a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800848a:	4b10      	ldr	r3, [pc, #64]	; (80084cc <tcp_kill_state+0x90>)
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	617b      	str	r3, [r7, #20]
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1e4      	bne.n	8008470 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80084ac:	2100      	movs	r1, #0
 80084ae:	6938      	ldr	r0, [r7, #16]
 80084b0:	f7fe fff4 	bl	800749c <tcp_abandon>
  }
}
 80084b4:	bf00      	nop
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	08010fc4 	.word	0x08010fc4
 80084c0:	08011550 	.word	0x08011550
 80084c4:	08011008 	.word	0x08011008
 80084c8:	200089e8 	.word	0x200089e8
 80084cc:	200089dc 	.word	0x200089dc

080084d0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80084de:	4b12      	ldr	r3, [pc, #72]	; (8008528 <tcp_kill_timewait+0x58>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	e012      	b.n	800850c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80084e6:	4b11      	ldr	r3, [pc, #68]	; (800852c <tcp_kill_timewait+0x5c>)
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d807      	bhi.n	8008506 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80084f6:	4b0d      	ldr	r3, [pc, #52]	; (800852c <tcp_kill_timewait+0x5c>)
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	60fb      	str	r3, [r7, #12]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1e9      	bne.n	80084e6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008518:	68b8      	ldr	r0, [r7, #8]
 800851a:	f7ff f87d 	bl	8007618 <tcp_abort>
  }
}
 800851e:	bf00      	nop
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	200089ec 	.word	0x200089ec
 800852c:	200089dc 	.word	0x200089dc

08008530 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008536:	4b10      	ldr	r3, [pc, #64]	; (8008578 <tcp_handle_closepend+0x48>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800853c:	e014      	b.n	8008568 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	8b5b      	ldrh	r3, [r3, #26]
 8008548:	f003 0308 	and.w	r3, r3, #8
 800854c:	2b00      	cmp	r3, #0
 800854e:	d009      	beq.n	8008564 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	8b5b      	ldrh	r3, [r3, #26]
 8008554:	f023 0308 	bic.w	r3, r3, #8
 8008558:	b29a      	uxth	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7fe ff06 	bl	8007370 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1e7      	bne.n	800853e <tcp_handle_closepend+0xe>
  }
}
 800856e:	bf00      	nop
 8008570:	bf00      	nop
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	200089e8 	.word	0x200089e8

0800857c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008586:	2001      	movs	r0, #1
 8008588:	f7fd fc80 	bl	8005e8c <memp_malloc>
 800858c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d126      	bne.n	80085e2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008594:	f7ff ffcc 	bl	8008530 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008598:	f7ff ff9a 	bl	80084d0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800859c:	2001      	movs	r0, #1
 800859e:	f7fd fc75 	bl	8005e8c <memp_malloc>
 80085a2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d11b      	bne.n	80085e2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80085aa:	2009      	movs	r0, #9
 80085ac:	f7ff ff46 	bl	800843c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80085b0:	2001      	movs	r0, #1
 80085b2:	f7fd fc6b 	bl	8005e8c <memp_malloc>
 80085b6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d111      	bne.n	80085e2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80085be:	2008      	movs	r0, #8
 80085c0:	f7ff ff3c 	bl	800843c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80085c4:	2001      	movs	r0, #1
 80085c6:	f7fd fc61 	bl	8005e8c <memp_malloc>
 80085ca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d107      	bne.n	80085e2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7ff fee3 	bl	80083a0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80085da:	2001      	movs	r0, #1
 80085dc:	f7fd fc56 	bl	8005e8c <memp_malloc>
 80085e0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d03f      	beq.n	8008668 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80085e8:	229c      	movs	r2, #156	; 0x9c
 80085ea:	2100      	movs	r1, #0
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f006 fedd 	bl	800f3ac <memset>
    pcb->prio = prio;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	79fa      	ldrb	r2, [r7, #7]
 80085f6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80085fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008608:	855a      	strh	r2, [r3, #42]	; 0x2a
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	22ff      	movs	r2, #255	; 0xff
 8008616:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800861e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2206      	movs	r2, #6
 8008624:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2206      	movs	r2, #6
 800862c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008634:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2201      	movs	r2, #1
 800863a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800863e:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <tcp_alloc+0xf8>)
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008646:	4b0c      	ldr	r3, [pc, #48]	; (8008678 <tcp_alloc+0xfc>)
 8008648:	781a      	ldrb	r2, [r3, #0]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008654:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	4a08      	ldr	r2, [pc, #32]	; (800867c <tcp_alloc+0x100>)
 800865c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4a07      	ldr	r2, [pc, #28]	; (8008680 <tcp_alloc+0x104>)
 8008664:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008668:	68fb      	ldr	r3, [r7, #12]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	200089dc 	.word	0x200089dc
 8008678:	200089f2 	.word	0x200089f2
 800867c:	08008335 	.word	0x08008335
 8008680:	006ddd00 	.word	0x006ddd00

08008684 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8008688:	2040      	movs	r0, #64	; 0x40
 800868a:	f7ff ff77 	bl	800857c <tcp_alloc>
 800868e:	4603      	mov	r3, r0
}
 8008690:	4618      	mov	r0, r3
 8008692:	bd80      	pop	{r7, pc}

08008694 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	611a      	str	r2, [r3, #16]
  }
}
 80086aa:	bf00      	nop
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
	...

080086b8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00e      	beq.n	80086e6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	7d1b      	ldrb	r3, [r3, #20]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d106      	bne.n	80086de <tcp_recv+0x26>
 80086d0:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <tcp_recv+0x38>)
 80086d2:	f240 72df 	movw	r2, #2015	; 0x7df
 80086d6:	4907      	ldr	r1, [pc, #28]	; (80086f4 <tcp_recv+0x3c>)
 80086d8:	4807      	ldr	r0, [pc, #28]	; (80086f8 <tcp_recv+0x40>)
 80086da:	f006 fe6f 	bl	800f3bc <iprintf>
    pcb->recv = recv;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80086e6:	bf00      	nop
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	08010fc4 	.word	0x08010fc4
 80086f4:	08011560 	.word	0x08011560
 80086f8:	08011008 	.word	0x08011008

080086fc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00e      	beq.n	800872a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	7d1b      	ldrb	r3, [r3, #20]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d106      	bne.n	8008722 <tcp_sent+0x26>
 8008714:	4b07      	ldr	r3, [pc, #28]	; (8008734 <tcp_sent+0x38>)
 8008716:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800871a:	4907      	ldr	r1, [pc, #28]	; (8008738 <tcp_sent+0x3c>)
 800871c:	4807      	ldr	r0, [pc, #28]	; (800873c <tcp_sent+0x40>)
 800871e:	f006 fe4d 	bl	800f3bc <iprintf>
    pcb->sent = sent;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800872a:	bf00      	nop
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	08010fc4 	.word	0x08010fc4
 8008738:	08011588 	.word	0x08011588
 800873c:	08011008 	.word	0x08011008

08008740 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00e      	beq.n	800876e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7d1b      	ldrb	r3, [r3, #20]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d106      	bne.n	8008766 <tcp_err+0x26>
 8008758:	4b07      	ldr	r3, [pc, #28]	; (8008778 <tcp_err+0x38>)
 800875a:	f640 020d 	movw	r2, #2061	; 0x80d
 800875e:	4907      	ldr	r1, [pc, #28]	; (800877c <tcp_err+0x3c>)
 8008760:	4807      	ldr	r0, [pc, #28]	; (8008780 <tcp_err+0x40>)
 8008762:	f006 fe2b 	bl	800f3bc <iprintf>
    pcb->errf = err;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800876e:	bf00      	nop
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	08010fc4 	.word	0x08010fc4
 800877c:	080115b0 	.word	0x080115b0
 8008780:	08011008 	.word	0x08011008

08008784 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	4613      	mov	r3, r2
 8008790:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d107      	bne.n	80087a8 <tcp_poll+0x24>
 8008798:	4b0e      	ldr	r3, [pc, #56]	; (80087d4 <tcp_poll+0x50>)
 800879a:	f640 023d 	movw	r2, #2109	; 0x83d
 800879e:	490e      	ldr	r1, [pc, #56]	; (80087d8 <tcp_poll+0x54>)
 80087a0:	480e      	ldr	r0, [pc, #56]	; (80087dc <tcp_poll+0x58>)
 80087a2:	f006 fe0b 	bl	800f3bc <iprintf>
 80087a6:	e011      	b.n	80087cc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	7d1b      	ldrb	r3, [r3, #20]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d106      	bne.n	80087be <tcp_poll+0x3a>
 80087b0:	4b08      	ldr	r3, [pc, #32]	; (80087d4 <tcp_poll+0x50>)
 80087b2:	f640 023e 	movw	r2, #2110	; 0x83e
 80087b6:	490a      	ldr	r1, [pc, #40]	; (80087e0 <tcp_poll+0x5c>)
 80087b8:	4808      	ldr	r0, [pc, #32]	; (80087dc <tcp_poll+0x58>)
 80087ba:	f006 fdff 	bl	800f3bc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	79fa      	ldrb	r2, [r7, #7]
 80087ca:	775a      	strb	r2, [r3, #29]
}
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	08010fc4 	.word	0x08010fc4
 80087d8:	080115d8 	.word	0x080115d8
 80087dc:	08011008 	.word	0x08011008
 80087e0:	080115f0 	.word	0x080115f0

080087e4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d107      	bne.n	8008802 <tcp_pcb_purge+0x1e>
 80087f2:	4b21      	ldr	r3, [pc, #132]	; (8008878 <tcp_pcb_purge+0x94>)
 80087f4:	f640 0251 	movw	r2, #2129	; 0x851
 80087f8:	4920      	ldr	r1, [pc, #128]	; (800887c <tcp_pcb_purge+0x98>)
 80087fa:	4821      	ldr	r0, [pc, #132]	; (8008880 <tcp_pcb_purge+0x9c>)
 80087fc:	f006 fdde 	bl	800f3bc <iprintf>
 8008800:	e037      	b.n	8008872 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	7d1b      	ldrb	r3, [r3, #20]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d033      	beq.n	8008872 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800880e:	2b0a      	cmp	r3, #10
 8008810:	d02f      	beq.n	8008872 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008816:	2b01      	cmp	r3, #1
 8008818:	d02b      	beq.n	8008872 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800881e:	2b00      	cmp	r3, #0
 8008820:	d007      	beq.n	8008832 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe f96e 	bl	8006b08 <pbuf_free>
      pcb->refused_data = NULL;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008836:	2b00      	cmp	r3, #0
 8008838:	d002      	beq.n	8008840 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f986 	bl	8008b4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008846:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800884c:	4618      	mov	r0, r3
 800884e:	f7ff fd17 	bl	8008280 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008856:	4618      	mov	r0, r3
 8008858:	f7ff fd12 	bl	8008280 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	66da      	str	r2, [r3, #108]	; 0x6c
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	08010fc4 	.word	0x08010fc4
 800887c:	08011610 	.word	0x08011610
 8008880:	08011008 	.word	0x08011008

08008884 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d106      	bne.n	80088a2 <tcp_pcb_remove+0x1e>
 8008894:	4b3e      	ldr	r3, [pc, #248]	; (8008990 <tcp_pcb_remove+0x10c>)
 8008896:	f640 0283 	movw	r2, #2179	; 0x883
 800889a:	493e      	ldr	r1, [pc, #248]	; (8008994 <tcp_pcb_remove+0x110>)
 800889c:	483e      	ldr	r0, [pc, #248]	; (8008998 <tcp_pcb_remove+0x114>)
 800889e:	f006 fd8d 	bl	800f3bc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d106      	bne.n	80088b6 <tcp_pcb_remove+0x32>
 80088a8:	4b39      	ldr	r3, [pc, #228]	; (8008990 <tcp_pcb_remove+0x10c>)
 80088aa:	f640 0284 	movw	r2, #2180	; 0x884
 80088ae:	493b      	ldr	r1, [pc, #236]	; (800899c <tcp_pcb_remove+0x118>)
 80088b0:	4839      	ldr	r0, [pc, #228]	; (8008998 <tcp_pcb_remove+0x114>)
 80088b2:	f006 fd83 	bl	800f3bc <iprintf>

  TCP_RMV(pcblist, pcb);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d105      	bne.n	80088cc <tcp_pcb_remove+0x48>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	601a      	str	r2, [r3, #0]
 80088ca:	e013      	b.n	80088f4 <tcp_pcb_remove+0x70>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	60fb      	str	r3, [r7, #12]
 80088d2:	e00c      	b.n	80088ee <tcp_pcb_remove+0x6a>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d104      	bne.n	80088e8 <tcp_pcb_remove+0x64>
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	68da      	ldr	r2, [r3, #12]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	60da      	str	r2, [r3, #12]
 80088e6:	e005      	b.n	80088f4 <tcp_pcb_remove+0x70>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1ef      	bne.n	80088d4 <tcp_pcb_remove+0x50>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	2200      	movs	r2, #0
 80088f8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80088fa:	6838      	ldr	r0, [r7, #0]
 80088fc:	f7ff ff72 	bl	80087e4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	7d1b      	ldrb	r3, [r3, #20]
 8008904:	2b0a      	cmp	r3, #10
 8008906:	d013      	beq.n	8008930 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800890c:	2b01      	cmp	r3, #1
 800890e:	d00f      	beq.n	8008930 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	8b5b      	ldrh	r3, [r3, #26]
 8008914:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008918:	2b00      	cmp	r3, #0
 800891a:	d009      	beq.n	8008930 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	8b5b      	ldrh	r3, [r3, #26]
 8008920:	f043 0302 	orr.w	r3, r3, #2
 8008924:	b29a      	uxth	r2, r3
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800892a:	6838      	ldr	r0, [r7, #0]
 800892c:	f002 ff6e 	bl	800b80c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	7d1b      	ldrb	r3, [r3, #20]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d020      	beq.n	800897a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800893c:	2b00      	cmp	r3, #0
 800893e:	d006      	beq.n	800894e <tcp_pcb_remove+0xca>
 8008940:	4b13      	ldr	r3, [pc, #76]	; (8008990 <tcp_pcb_remove+0x10c>)
 8008942:	f640 0293 	movw	r2, #2195	; 0x893
 8008946:	4916      	ldr	r1, [pc, #88]	; (80089a0 <tcp_pcb_remove+0x11c>)
 8008948:	4813      	ldr	r0, [pc, #76]	; (8008998 <tcp_pcb_remove+0x114>)
 800894a:	f006 fd37 	bl	800f3bc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008952:	2b00      	cmp	r3, #0
 8008954:	d006      	beq.n	8008964 <tcp_pcb_remove+0xe0>
 8008956:	4b0e      	ldr	r3, [pc, #56]	; (8008990 <tcp_pcb_remove+0x10c>)
 8008958:	f640 0294 	movw	r2, #2196	; 0x894
 800895c:	4911      	ldr	r1, [pc, #68]	; (80089a4 <tcp_pcb_remove+0x120>)
 800895e:	480e      	ldr	r0, [pc, #56]	; (8008998 <tcp_pcb_remove+0x114>)
 8008960:	f006 fd2c 	bl	800f3bc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008968:	2b00      	cmp	r3, #0
 800896a:	d006      	beq.n	800897a <tcp_pcb_remove+0xf6>
 800896c:	4b08      	ldr	r3, [pc, #32]	; (8008990 <tcp_pcb_remove+0x10c>)
 800896e:	f640 0296 	movw	r2, #2198	; 0x896
 8008972:	490d      	ldr	r1, [pc, #52]	; (80089a8 <tcp_pcb_remove+0x124>)
 8008974:	4808      	ldr	r0, [pc, #32]	; (8008998 <tcp_pcb_remove+0x114>)
 8008976:	f006 fd21 	bl	800f3bc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2200      	movs	r2, #0
 800897e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2200      	movs	r2, #0
 8008984:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	08010fc4 	.word	0x08010fc4
 8008994:	0801162c 	.word	0x0801162c
 8008998:	08011008 	.word	0x08011008
 800899c:	08011648 	.word	0x08011648
 80089a0:	08011668 	.word	0x08011668
 80089a4:	08011680 	.word	0x08011680
 80089a8:	0801169c 	.word	0x0801169c

080089ac <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d106      	bne.n	80089c8 <tcp_next_iss+0x1c>
 80089ba:	4b0a      	ldr	r3, [pc, #40]	; (80089e4 <tcp_next_iss+0x38>)
 80089bc:	f640 02af 	movw	r2, #2223	; 0x8af
 80089c0:	4909      	ldr	r1, [pc, #36]	; (80089e8 <tcp_next_iss+0x3c>)
 80089c2:	480a      	ldr	r0, [pc, #40]	; (80089ec <tcp_next_iss+0x40>)
 80089c4:	f006 fcfa 	bl	800f3bc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80089c8:	4b09      	ldr	r3, [pc, #36]	; (80089f0 <tcp_next_iss+0x44>)
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	4b09      	ldr	r3, [pc, #36]	; (80089f4 <tcp_next_iss+0x48>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4413      	add	r3, r2
 80089d2:	4a07      	ldr	r2, [pc, #28]	; (80089f0 <tcp_next_iss+0x44>)
 80089d4:	6013      	str	r3, [r2, #0]
  return iss;
 80089d6:	4b06      	ldr	r3, [pc, #24]	; (80089f0 <tcp_next_iss+0x44>)
 80089d8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	08010fc4 	.word	0x08010fc4
 80089e8:	080116b4 	.word	0x080116b4
 80089ec:	08011008 	.word	0x08011008
 80089f0:	2000000c 	.word	0x2000000c
 80089f4:	200089dc 	.word	0x200089dc

080089f8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d106      	bne.n	8008a1a <tcp_eff_send_mss_netif+0x22>
 8008a0c:	4b14      	ldr	r3, [pc, #80]	; (8008a60 <tcp_eff_send_mss_netif+0x68>)
 8008a0e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008a12:	4914      	ldr	r1, [pc, #80]	; (8008a64 <tcp_eff_send_mss_netif+0x6c>)
 8008a14:	4814      	ldr	r0, [pc, #80]	; (8008a68 <tcp_eff_send_mss_netif+0x70>)
 8008a16:	f006 fcd1 	bl	800f3bc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008a20:	89fb      	ldrh	r3, [r7, #14]
 8008a22:	e019      	b.n	8008a58 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a28:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008a2a:	8afb      	ldrh	r3, [r7, #22]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d012      	beq.n	8008a56 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008a30:	2328      	movs	r3, #40	; 0x28
 8008a32:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008a34:	8afa      	ldrh	r2, [r7, #22]
 8008a36:	8abb      	ldrh	r3, [r7, #20]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d904      	bls.n	8008a46 <tcp_eff_send_mss_netif+0x4e>
 8008a3c:	8afa      	ldrh	r2, [r7, #22]
 8008a3e:	8abb      	ldrh	r3, [r7, #20]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	e000      	b.n	8008a48 <tcp_eff_send_mss_netif+0x50>
 8008a46:	2300      	movs	r3, #0
 8008a48:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008a4a:	8a7a      	ldrh	r2, [r7, #18]
 8008a4c:	89fb      	ldrh	r3, [r7, #14]
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	bf28      	it	cs
 8008a52:	4613      	movcs	r3, r2
 8008a54:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008a56:	89fb      	ldrh	r3, [r7, #14]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	08010fc4 	.word	0x08010fc4
 8008a64:	080116d0 	.word	0x080116d0
 8008a68:	08011008 	.word	0x08011008

08008a6c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d119      	bne.n	8008ab4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008a80:	4b10      	ldr	r3, [pc, #64]	; (8008ac4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008a82:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008a86:	4910      	ldr	r1, [pc, #64]	; (8008ac8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008a88:	4810      	ldr	r0, [pc, #64]	; (8008acc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008a8a:	f006 fc97 	bl	800f3bc <iprintf>

  while (pcb != NULL) {
 8008a8e:	e011      	b.n	8008ab4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d108      	bne.n	8008aae <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f7fe fdb8 	bl	8007618 <tcp_abort>
      pcb = next;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	60fb      	str	r3, [r7, #12]
 8008aac:	e002      	b.n	8008ab4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1ea      	bne.n	8008a90 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008aba:	bf00      	nop
 8008abc:	bf00      	nop
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	08010fc4 	.word	0x08010fc4
 8008ac8:	080116f8 	.word	0x080116f8
 8008acc:	08011008 	.word	0x08011008

08008ad0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d02a      	beq.n	8008b36 <tcp_netif_ip_addr_changed+0x66>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d026      	beq.n	8008b36 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008ae8:	4b15      	ldr	r3, [pc, #84]	; (8008b40 <tcp_netif_ip_addr_changed+0x70>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4619      	mov	r1, r3
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7ff ffbc 	bl	8008a6c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008af4:	4b13      	ldr	r3, [pc, #76]	; (8008b44 <tcp_netif_ip_addr_changed+0x74>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7ff ffb6 	bl	8008a6c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d017      	beq.n	8008b36 <tcp_netif_ip_addr_changed+0x66>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d013      	beq.n	8008b36 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008b0e:	4b0e      	ldr	r3, [pc, #56]	; (8008b48 <tcp_netif_ip_addr_changed+0x78>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	e00c      	b.n	8008b30 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d103      	bne.n	8008b2a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1ef      	bne.n	8008b16 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008b36:	bf00      	nop
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	200089e8 	.word	0x200089e8
 8008b44:	200089e0 	.word	0x200089e0
 8008b48:	200089e4 	.word	0x200089e4

08008b4c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d007      	beq.n	8008b6c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff fb8d 	bl	8008280 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008b6c:	bf00      	nop
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008b74:	b590      	push	{r4, r7, lr}
 8008b76:	b08d      	sub	sp, #52	; 0x34
 8008b78:	af04      	add	r7, sp, #16
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d105      	bne.n	8008b90 <tcp_input+0x1c>
 8008b84:	4b9b      	ldr	r3, [pc, #620]	; (8008df4 <tcp_input+0x280>)
 8008b86:	2283      	movs	r2, #131	; 0x83
 8008b88:	499b      	ldr	r1, [pc, #620]	; (8008df8 <tcp_input+0x284>)
 8008b8a:	489c      	ldr	r0, [pc, #624]	; (8008dfc <tcp_input+0x288>)
 8008b8c:	f006 fc16 	bl	800f3bc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	4a9a      	ldr	r2, [pc, #616]	; (8008e00 <tcp_input+0x28c>)
 8008b96:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	895b      	ldrh	r3, [r3, #10]
 8008b9c:	2b13      	cmp	r3, #19
 8008b9e:	f240 83d1 	bls.w	8009344 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008ba2:	4b98      	ldr	r3, [pc, #608]	; (8008e04 <tcp_input+0x290>)
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	4a97      	ldr	r2, [pc, #604]	; (8008e04 <tcp_input+0x290>)
 8008ba8:	6812      	ldr	r2, [r2, #0]
 8008baa:	4611      	mov	r1, r2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f005 fbd5 	bl	800e35c <ip4_addr_isbroadcast_u32>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f040 83c7 	bne.w	8009348 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008bba:	4b92      	ldr	r3, [pc, #584]	; (8008e04 <tcp_input+0x290>)
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008bc2:	2be0      	cmp	r3, #224	; 0xe0
 8008bc4:	f000 83c0 	beq.w	8009348 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008bc8:	4b8d      	ldr	r3, [pc, #564]	; (8008e00 <tcp_input+0x28c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	899b      	ldrh	r3, [r3, #12]
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fc fd05 	bl	80055e0 <lwip_htons>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	0b1b      	lsrs	r3, r3, #12
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008be2:	7cbb      	ldrb	r3, [r7, #18]
 8008be4:	2b13      	cmp	r3, #19
 8008be6:	f240 83b1 	bls.w	800934c <tcp_input+0x7d8>
 8008bea:	7cbb      	ldrb	r3, [r7, #18]
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	891b      	ldrh	r3, [r3, #8]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	f200 83aa 	bhi.w	800934c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008bf8:	7cbb      	ldrb	r3, [r7, #18]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	3b14      	subs	r3, #20
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	4b81      	ldr	r3, [pc, #516]	; (8008e08 <tcp_input+0x294>)
 8008c02:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008c04:	4b81      	ldr	r3, [pc, #516]	; (8008e0c <tcp_input+0x298>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	895a      	ldrh	r2, [r3, #10]
 8008c0e:	7cbb      	ldrb	r3, [r7, #18]
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d309      	bcc.n	8008c2a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008c16:	4b7c      	ldr	r3, [pc, #496]	; (8008e08 <tcp_input+0x294>)
 8008c18:	881a      	ldrh	r2, [r3, #0]
 8008c1a:	4b7d      	ldr	r3, [pc, #500]	; (8008e10 <tcp_input+0x29c>)
 8008c1c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008c1e:	7cbb      	ldrb	r3, [r7, #18]
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7fd feea 	bl	80069fc <pbuf_remove_header>
 8008c28:	e04e      	b.n	8008cc8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d105      	bne.n	8008c3e <tcp_input+0xca>
 8008c32:	4b70      	ldr	r3, [pc, #448]	; (8008df4 <tcp_input+0x280>)
 8008c34:	22c2      	movs	r2, #194	; 0xc2
 8008c36:	4977      	ldr	r1, [pc, #476]	; (8008e14 <tcp_input+0x2a0>)
 8008c38:	4870      	ldr	r0, [pc, #448]	; (8008dfc <tcp_input+0x288>)
 8008c3a:	f006 fbbf 	bl	800f3bc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008c3e:	2114      	movs	r1, #20
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7fd fedb 	bl	80069fc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	895a      	ldrh	r2, [r3, #10]
 8008c4a:	4b71      	ldr	r3, [pc, #452]	; (8008e10 <tcp_input+0x29c>)
 8008c4c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008c4e:	4b6e      	ldr	r3, [pc, #440]	; (8008e08 <tcp_input+0x294>)
 8008c50:	881a      	ldrh	r2, [r3, #0]
 8008c52:	4b6f      	ldr	r3, [pc, #444]	; (8008e10 <tcp_input+0x29c>)
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008c5a:	4b6d      	ldr	r3, [pc, #436]	; (8008e10 <tcp_input+0x29c>)
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7fd fecb 	bl	80069fc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	895b      	ldrh	r3, [r3, #10]
 8008c6c:	8a3a      	ldrh	r2, [r7, #16]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	f200 836e 	bhi.w	8009350 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	4a64      	ldr	r2, [pc, #400]	; (8008e0c <tcp_input+0x298>)
 8008c7c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	8a3a      	ldrh	r2, [r7, #16]
 8008c84:	4611      	mov	r1, r2
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fd feb8 	bl	80069fc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	891a      	ldrh	r2, [r3, #8]
 8008c90:	8a3b      	ldrh	r3, [r7, #16]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	895b      	ldrh	r3, [r3, #10]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d005      	beq.n	8008cae <tcp_input+0x13a>
 8008ca2:	4b54      	ldr	r3, [pc, #336]	; (8008df4 <tcp_input+0x280>)
 8008ca4:	22df      	movs	r2, #223	; 0xdf
 8008ca6:	495c      	ldr	r1, [pc, #368]	; (8008e18 <tcp_input+0x2a4>)
 8008ca8:	4854      	ldr	r0, [pc, #336]	; (8008dfc <tcp_input+0x288>)
 8008caa:	f006 fb87 	bl	800f3bc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	891a      	ldrh	r2, [r3, #8]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	891b      	ldrh	r3, [r3, #8]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d005      	beq.n	8008cc8 <tcp_input+0x154>
 8008cbc:	4b4d      	ldr	r3, [pc, #308]	; (8008df4 <tcp_input+0x280>)
 8008cbe:	22e0      	movs	r2, #224	; 0xe0
 8008cc0:	4956      	ldr	r1, [pc, #344]	; (8008e1c <tcp_input+0x2a8>)
 8008cc2:	484e      	ldr	r0, [pc, #312]	; (8008dfc <tcp_input+0x288>)
 8008cc4:	f006 fb7a 	bl	800f3bc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008cc8:	4b4d      	ldr	r3, [pc, #308]	; (8008e00 <tcp_input+0x28c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	4a4b      	ldr	r2, [pc, #300]	; (8008e00 <tcp_input+0x28c>)
 8008cd2:	6814      	ldr	r4, [r2, #0]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fc fc83 	bl	80055e0 <lwip_htons>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008cde:	4b48      	ldr	r3, [pc, #288]	; (8008e00 <tcp_input+0x28c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	885b      	ldrh	r3, [r3, #2]
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	4a46      	ldr	r2, [pc, #280]	; (8008e00 <tcp_input+0x28c>)
 8008ce8:	6814      	ldr	r4, [r2, #0]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fc fc78 	bl	80055e0 <lwip_htons>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008cf4:	4b42      	ldr	r3, [pc, #264]	; (8008e00 <tcp_input+0x28c>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	4a41      	ldr	r2, [pc, #260]	; (8008e00 <tcp_input+0x28c>)
 8008cfc:	6814      	ldr	r4, [r2, #0]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fc fc83 	bl	800560a <lwip_htonl>
 8008d04:	4603      	mov	r3, r0
 8008d06:	6063      	str	r3, [r4, #4]
 8008d08:	6863      	ldr	r3, [r4, #4]
 8008d0a:	4a45      	ldr	r2, [pc, #276]	; (8008e20 <tcp_input+0x2ac>)
 8008d0c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008d0e:	4b3c      	ldr	r3, [pc, #240]	; (8008e00 <tcp_input+0x28c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	4a3a      	ldr	r2, [pc, #232]	; (8008e00 <tcp_input+0x28c>)
 8008d16:	6814      	ldr	r4, [r2, #0]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7fc fc76 	bl	800560a <lwip_htonl>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	60a3      	str	r3, [r4, #8]
 8008d22:	68a3      	ldr	r3, [r4, #8]
 8008d24:	4a3f      	ldr	r2, [pc, #252]	; (8008e24 <tcp_input+0x2b0>)
 8008d26:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008d28:	4b35      	ldr	r3, [pc, #212]	; (8008e00 <tcp_input+0x28c>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	89db      	ldrh	r3, [r3, #14]
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	4a33      	ldr	r2, [pc, #204]	; (8008e00 <tcp_input+0x28c>)
 8008d32:	6814      	ldr	r4, [r2, #0]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fc fc53 	bl	80055e0 <lwip_htons>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008d3e:	4b30      	ldr	r3, [pc, #192]	; (8008e00 <tcp_input+0x28c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	899b      	ldrh	r3, [r3, #12]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fc fc4a 	bl	80055e0 <lwip_htons>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	4b34      	ldr	r3, [pc, #208]	; (8008e28 <tcp_input+0x2b4>)
 8008d58:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	891a      	ldrh	r2, [r3, #8]
 8008d5e:	4b33      	ldr	r3, [pc, #204]	; (8008e2c <tcp_input+0x2b8>)
 8008d60:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008d62:	4b31      	ldr	r3, [pc, #196]	; (8008e28 <tcp_input+0x2b4>)
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	f003 0303 	and.w	r3, r3, #3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00c      	beq.n	8008d88 <tcp_input+0x214>
    tcplen++;
 8008d6e:	4b2f      	ldr	r3, [pc, #188]	; (8008e2c <tcp_input+0x2b8>)
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	3301      	adds	r3, #1
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	4b2d      	ldr	r3, [pc, #180]	; (8008e2c <tcp_input+0x2b8>)
 8008d78:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	891a      	ldrh	r2, [r3, #8]
 8008d7e:	4b2b      	ldr	r3, [pc, #172]	; (8008e2c <tcp_input+0x2b8>)
 8008d80:	881b      	ldrh	r3, [r3, #0]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	f200 82e6 	bhi.w	8009354 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d8c:	4b28      	ldr	r3, [pc, #160]	; (8008e30 <tcp_input+0x2bc>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	61fb      	str	r3, [r7, #28]
 8008d92:	e09d      	b.n	8008ed0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	7d1b      	ldrb	r3, [r3, #20]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d105      	bne.n	8008da8 <tcp_input+0x234>
 8008d9c:	4b15      	ldr	r3, [pc, #84]	; (8008df4 <tcp_input+0x280>)
 8008d9e:	22fb      	movs	r2, #251	; 0xfb
 8008da0:	4924      	ldr	r1, [pc, #144]	; (8008e34 <tcp_input+0x2c0>)
 8008da2:	4816      	ldr	r0, [pc, #88]	; (8008dfc <tcp_input+0x288>)
 8008da4:	f006 fb0a 	bl	800f3bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	7d1b      	ldrb	r3, [r3, #20]
 8008dac:	2b0a      	cmp	r3, #10
 8008dae:	d105      	bne.n	8008dbc <tcp_input+0x248>
 8008db0:	4b10      	ldr	r3, [pc, #64]	; (8008df4 <tcp_input+0x280>)
 8008db2:	22fc      	movs	r2, #252	; 0xfc
 8008db4:	4920      	ldr	r1, [pc, #128]	; (8008e38 <tcp_input+0x2c4>)
 8008db6:	4811      	ldr	r0, [pc, #68]	; (8008dfc <tcp_input+0x288>)
 8008db8:	f006 fb00 	bl	800f3bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	7d1b      	ldrb	r3, [r3, #20]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d105      	bne.n	8008dd0 <tcp_input+0x25c>
 8008dc4:	4b0b      	ldr	r3, [pc, #44]	; (8008df4 <tcp_input+0x280>)
 8008dc6:	22fd      	movs	r2, #253	; 0xfd
 8008dc8:	491c      	ldr	r1, [pc, #112]	; (8008e3c <tcp_input+0x2c8>)
 8008dca:	480c      	ldr	r0, [pc, #48]	; (8008dfc <tcp_input+0x288>)
 8008dcc:	f006 faf6 	bl	800f3bc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	7a1b      	ldrb	r3, [r3, #8]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d033      	beq.n	8008e40 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	7a1a      	ldrb	r2, [r3, #8]
 8008ddc:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <tcp_input+0x290>)
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008de4:	3301      	adds	r3, #1
 8008de6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d029      	beq.n	8008e40 <tcp_input+0x2cc>
      prev = pcb;
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	61bb      	str	r3, [r7, #24]
      continue;
 8008df0:	e06b      	b.n	8008eca <tcp_input+0x356>
 8008df2:	bf00      	nop
 8008df4:	0801172c 	.word	0x0801172c
 8008df8:	08011760 	.word	0x08011760
 8008dfc:	08011778 	.word	0x08011778
 8008e00:	20008a04 	.word	0x20008a04
 8008e04:	200032ac 	.word	0x200032ac
 8008e08:	20008a08 	.word	0x20008a08
 8008e0c:	20008a0c 	.word	0x20008a0c
 8008e10:	20008a0a 	.word	0x20008a0a
 8008e14:	080117a0 	.word	0x080117a0
 8008e18:	080117b0 	.word	0x080117b0
 8008e1c:	080117bc 	.word	0x080117bc
 8008e20:	20008a14 	.word	0x20008a14
 8008e24:	20008a18 	.word	0x20008a18
 8008e28:	20008a20 	.word	0x20008a20
 8008e2c:	20008a1e 	.word	0x20008a1e
 8008e30:	200089e8 	.word	0x200089e8
 8008e34:	080117dc 	.word	0x080117dc
 8008e38:	08011804 	.word	0x08011804
 8008e3c:	08011830 	.word	0x08011830
    }

    if (pcb->remote_port == tcphdr->src &&
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	8b1a      	ldrh	r2, [r3, #24]
 8008e44:	4b72      	ldr	r3, [pc, #456]	; (8009010 <tcp_input+0x49c>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d13a      	bne.n	8008ec6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	8ada      	ldrh	r2, [r3, #22]
 8008e54:	4b6e      	ldr	r3, [pc, #440]	; (8009010 <tcp_input+0x49c>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	885b      	ldrh	r3, [r3, #2]
 8008e5a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d132      	bne.n	8008ec6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	4b6b      	ldr	r3, [pc, #428]	; (8009014 <tcp_input+0x4a0>)
 8008e66:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d12c      	bne.n	8008ec6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	4b68      	ldr	r3, [pc, #416]	; (8009014 <tcp_input+0x4a0>)
 8008e72:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d126      	bne.n	8008ec6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	69fa      	ldr	r2, [r7, #28]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d106      	bne.n	8008e90 <tcp_input+0x31c>
 8008e82:	4b65      	ldr	r3, [pc, #404]	; (8009018 <tcp_input+0x4a4>)
 8008e84:	f240 120d 	movw	r2, #269	; 0x10d
 8008e88:	4964      	ldr	r1, [pc, #400]	; (800901c <tcp_input+0x4a8>)
 8008e8a:	4865      	ldr	r0, [pc, #404]	; (8009020 <tcp_input+0x4ac>)
 8008e8c:	f006 fa96 	bl	800f3bc <iprintf>
      if (prev != NULL) {
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00a      	beq.n	8008eac <tcp_input+0x338>
        prev->next = pcb->next;
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	68da      	ldr	r2, [r3, #12]
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008e9e:	4b61      	ldr	r3, [pc, #388]	; (8009024 <tcp_input+0x4b0>)
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008ea6:	4a5f      	ldr	r2, [pc, #380]	; (8009024 <tcp_input+0x4b0>)
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	69fa      	ldr	r2, [r7, #28]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d111      	bne.n	8008eda <tcp_input+0x366>
 8008eb6:	4b58      	ldr	r3, [pc, #352]	; (8009018 <tcp_input+0x4a4>)
 8008eb8:	f240 1215 	movw	r2, #277	; 0x115
 8008ebc:	495a      	ldr	r1, [pc, #360]	; (8009028 <tcp_input+0x4b4>)
 8008ebe:	4858      	ldr	r0, [pc, #352]	; (8009020 <tcp_input+0x4ac>)
 8008ec0:	f006 fa7c 	bl	800f3bc <iprintf>
      break;
 8008ec4:	e009      	b.n	8008eda <tcp_input+0x366>
    }
    prev = pcb;
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	61fb      	str	r3, [r7, #28]
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f47f af5e 	bne.w	8008d94 <tcp_input+0x220>
 8008ed8:	e000      	b.n	8008edc <tcp_input+0x368>
      break;
 8008eda:	bf00      	nop
  }

  if (pcb == NULL) {
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f040 80aa 	bne.w	8009038 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ee4:	4b51      	ldr	r3, [pc, #324]	; (800902c <tcp_input+0x4b8>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	61fb      	str	r3, [r7, #28]
 8008eea:	e03f      	b.n	8008f6c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	7d1b      	ldrb	r3, [r3, #20]
 8008ef0:	2b0a      	cmp	r3, #10
 8008ef2:	d006      	beq.n	8008f02 <tcp_input+0x38e>
 8008ef4:	4b48      	ldr	r3, [pc, #288]	; (8009018 <tcp_input+0x4a4>)
 8008ef6:	f240 121f 	movw	r2, #287	; 0x11f
 8008efa:	494d      	ldr	r1, [pc, #308]	; (8009030 <tcp_input+0x4bc>)
 8008efc:	4848      	ldr	r0, [pc, #288]	; (8009020 <tcp_input+0x4ac>)
 8008efe:	f006 fa5d 	bl	800f3bc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	7a1b      	ldrb	r3, [r3, #8]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d009      	beq.n	8008f1e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	7a1a      	ldrb	r2, [r3, #8]
 8008f0e:	4b41      	ldr	r3, [pc, #260]	; (8009014 <tcp_input+0x4a0>)
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f16:	3301      	adds	r3, #1
 8008f18:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d122      	bne.n	8008f64 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	8b1a      	ldrh	r2, [r3, #24]
 8008f22:	4b3b      	ldr	r3, [pc, #236]	; (8009010 <tcp_input+0x49c>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d11b      	bne.n	8008f66 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	8ada      	ldrh	r2, [r3, #22]
 8008f32:	4b37      	ldr	r3, [pc, #220]	; (8009010 <tcp_input+0x49c>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	885b      	ldrh	r3, [r3, #2]
 8008f38:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d113      	bne.n	8008f66 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	4b34      	ldr	r3, [pc, #208]	; (8009014 <tcp_input+0x4a0>)
 8008f44:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d10d      	bne.n	8008f66 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	4b31      	ldr	r3, [pc, #196]	; (8009014 <tcp_input+0x4a0>)
 8008f50:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d107      	bne.n	8008f66 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008f56:	69f8      	ldr	r0, [r7, #28]
 8008f58:	f000 fb56 	bl	8009608 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7fd fdd3 	bl	8006b08 <pbuf_free>
        return;
 8008f62:	e1fd      	b.n	8009360 <tcp_input+0x7ec>
        continue;
 8008f64:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	61fb      	str	r3, [r7, #28]
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1bc      	bne.n	8008eec <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008f72:	2300      	movs	r3, #0
 8008f74:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008f76:	4b2f      	ldr	r3, [pc, #188]	; (8009034 <tcp_input+0x4c0>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	617b      	str	r3, [r7, #20]
 8008f7c:	e02a      	b.n	8008fd4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	7a1b      	ldrb	r3, [r3, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00c      	beq.n	8008fa0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	7a1a      	ldrb	r2, [r3, #8]
 8008f8a:	4b22      	ldr	r3, [pc, #136]	; (8009014 <tcp_input+0x4a0>)
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f92:	3301      	adds	r3, #1
 8008f94:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d002      	beq.n	8008fa0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	61bb      	str	r3, [r7, #24]
        continue;
 8008f9e:	e016      	b.n	8008fce <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	8ada      	ldrh	r2, [r3, #22]
 8008fa4:	4b1a      	ldr	r3, [pc, #104]	; (8009010 <tcp_input+0x49c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	885b      	ldrh	r3, [r3, #2]
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d10c      	bne.n	8008fca <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	4b17      	ldr	r3, [pc, #92]	; (8009014 <tcp_input+0x4a0>)
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d00f      	beq.n	8008fdc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00d      	beq.n	8008fde <tcp_input+0x46a>
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d009      	beq.n	8008fde <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	617b      	str	r3, [r7, #20]
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1d1      	bne.n	8008f7e <tcp_input+0x40a>
 8008fda:	e000      	b.n	8008fde <tcp_input+0x46a>
            break;
 8008fdc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d029      	beq.n	8009038 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00a      	beq.n	8009000 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	68da      	ldr	r2, [r3, #12]
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008ff2:	4b10      	ldr	r3, [pc, #64]	; (8009034 <tcp_input+0x4c0>)
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008ffa:	4a0e      	ldr	r2, [pc, #56]	; (8009034 <tcp_input+0x4c0>)
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009000:	6978      	ldr	r0, [r7, #20]
 8009002:	f000 fa03 	bl	800940c <tcp_listen_input>
      }
      pbuf_free(p);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7fd fd7e 	bl	8006b08 <pbuf_free>
      return;
 800900c:	e1a8      	b.n	8009360 <tcp_input+0x7ec>
 800900e:	bf00      	nop
 8009010:	20008a04 	.word	0x20008a04
 8009014:	200032ac 	.word	0x200032ac
 8009018:	0801172c 	.word	0x0801172c
 800901c:	08011858 	.word	0x08011858
 8009020:	08011778 	.word	0x08011778
 8009024:	200089e8 	.word	0x200089e8
 8009028:	08011884 	.word	0x08011884
 800902c:	200089ec 	.word	0x200089ec
 8009030:	080118b0 	.word	0x080118b0
 8009034:	200089e4 	.word	0x200089e4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 8158 	beq.w	80092f0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009040:	4b95      	ldr	r3, [pc, #596]	; (8009298 <tcp_input+0x724>)
 8009042:	2200      	movs	r2, #0
 8009044:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	891a      	ldrh	r2, [r3, #8]
 800904a:	4b93      	ldr	r3, [pc, #588]	; (8009298 <tcp_input+0x724>)
 800904c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800904e:	4a92      	ldr	r2, [pc, #584]	; (8009298 <tcp_input+0x724>)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009054:	4b91      	ldr	r3, [pc, #580]	; (800929c <tcp_input+0x728>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a8f      	ldr	r2, [pc, #572]	; (8009298 <tcp_input+0x724>)
 800905a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800905c:	4b90      	ldr	r3, [pc, #576]	; (80092a0 <tcp_input+0x72c>)
 800905e:	2200      	movs	r2, #0
 8009060:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009062:	4b90      	ldr	r3, [pc, #576]	; (80092a4 <tcp_input+0x730>)
 8009064:	2200      	movs	r2, #0
 8009066:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009068:	4b8f      	ldr	r3, [pc, #572]	; (80092a8 <tcp_input+0x734>)
 800906a:	2200      	movs	r2, #0
 800906c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800906e:	4b8f      	ldr	r3, [pc, #572]	; (80092ac <tcp_input+0x738>)
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	f003 0308 	and.w	r3, r3, #8
 8009076:	2b00      	cmp	r3, #0
 8009078:	d006      	beq.n	8009088 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	7b5b      	ldrb	r3, [r3, #13]
 800907e:	f043 0301 	orr.w	r3, r3, #1
 8009082:	b2da      	uxtb	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800908c:	2b00      	cmp	r3, #0
 800908e:	d017      	beq.n	80090c0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009090:	69f8      	ldr	r0, [r7, #28]
 8009092:	f7ff f879 	bl	8008188 <tcp_process_refused_data>
 8009096:	4603      	mov	r3, r0
 8009098:	f113 0f0d 	cmn.w	r3, #13
 800909c:	d007      	beq.n	80090ae <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00c      	beq.n	80090c0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80090a6:	4b82      	ldr	r3, [pc, #520]	; (80092b0 <tcp_input+0x73c>)
 80090a8:	881b      	ldrh	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d008      	beq.n	80090c0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f040 80e3 	bne.w	800927e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80090b8:	69f8      	ldr	r0, [r7, #28]
 80090ba:	f003 f9ad 	bl	800c418 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80090be:	e0de      	b.n	800927e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80090c0:	4a7c      	ldr	r2, [pc, #496]	; (80092b4 <tcp_input+0x740>)
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80090c6:	69f8      	ldr	r0, [r7, #28]
 80090c8:	f000 fb18 	bl	80096fc <tcp_process>
 80090cc:	4603      	mov	r3, r0
 80090ce:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80090d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090d4:	f113 0f0d 	cmn.w	r3, #13
 80090d8:	f000 80d3 	beq.w	8009282 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80090dc:	4b71      	ldr	r3, [pc, #452]	; (80092a4 <tcp_input+0x730>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	f003 0308 	and.w	r3, r3, #8
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d015      	beq.n	8009114 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d008      	beq.n	8009104 <tcp_input+0x590>
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090f8:	69fa      	ldr	r2, [r7, #28]
 80090fa:	6912      	ldr	r2, [r2, #16]
 80090fc:	f06f 010d 	mvn.w	r1, #13
 8009100:	4610      	mov	r0, r2
 8009102:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009104:	69f9      	ldr	r1, [r7, #28]
 8009106:	486c      	ldr	r0, [pc, #432]	; (80092b8 <tcp_input+0x744>)
 8009108:	f7ff fbbc 	bl	8008884 <tcp_pcb_remove>
        tcp_free(pcb);
 800910c:	69f8      	ldr	r0, [r7, #28]
 800910e:	f7fd ff9b 	bl	8007048 <tcp_free>
 8009112:	e0da      	b.n	80092ca <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009118:	4b63      	ldr	r3, [pc, #396]	; (80092a8 <tcp_input+0x734>)
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d01d      	beq.n	800915c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009120:	4b61      	ldr	r3, [pc, #388]	; (80092a8 <tcp_input+0x734>)
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00a      	beq.n	8009146 <tcp_input+0x5d2>
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009136:	69fa      	ldr	r2, [r7, #28]
 8009138:	6910      	ldr	r0, [r2, #16]
 800913a:	89fa      	ldrh	r2, [r7, #14]
 800913c:	69f9      	ldr	r1, [r7, #28]
 800913e:	4798      	blx	r3
 8009140:	4603      	mov	r3, r0
 8009142:	74fb      	strb	r3, [r7, #19]
 8009144:	e001      	b.n	800914a <tcp_input+0x5d6>
 8009146:	2300      	movs	r3, #0
 8009148:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800914a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800914e:	f113 0f0d 	cmn.w	r3, #13
 8009152:	f000 8098 	beq.w	8009286 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009156:	4b54      	ldr	r3, [pc, #336]	; (80092a8 <tcp_input+0x734>)
 8009158:	2200      	movs	r2, #0
 800915a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800915c:	69f8      	ldr	r0, [r7, #28]
 800915e:	f000 f915 	bl	800938c <tcp_input_delayed_close>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	f040 8090 	bne.w	800928a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800916a:	4b4d      	ldr	r3, [pc, #308]	; (80092a0 <tcp_input+0x72c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d041      	beq.n	80091f6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009176:	2b00      	cmp	r3, #0
 8009178:	d006      	beq.n	8009188 <tcp_input+0x614>
 800917a:	4b50      	ldr	r3, [pc, #320]	; (80092bc <tcp_input+0x748>)
 800917c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009180:	494f      	ldr	r1, [pc, #316]	; (80092c0 <tcp_input+0x74c>)
 8009182:	4850      	ldr	r0, [pc, #320]	; (80092c4 <tcp_input+0x750>)
 8009184:	f006 f91a 	bl	800f3bc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	8b5b      	ldrh	r3, [r3, #26]
 800918c:	f003 0310 	and.w	r3, r3, #16
 8009190:	2b00      	cmp	r3, #0
 8009192:	d008      	beq.n	80091a6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009194:	4b42      	ldr	r3, [pc, #264]	; (80092a0 <tcp_input+0x72c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4618      	mov	r0, r3
 800919a:	f7fd fcb5 	bl	8006b08 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800919e:	69f8      	ldr	r0, [r7, #28]
 80091a0:	f7fe fa3a 	bl	8007618 <tcp_abort>
            goto aborted;
 80091a4:	e091      	b.n	80092ca <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00c      	beq.n	80091ca <tcp_input+0x656>
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	6918      	ldr	r0, [r3, #16]
 80091ba:	4b39      	ldr	r3, [pc, #228]	; (80092a0 <tcp_input+0x72c>)
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	2300      	movs	r3, #0
 80091c0:	69f9      	ldr	r1, [r7, #28]
 80091c2:	47a0      	blx	r4
 80091c4:	4603      	mov	r3, r0
 80091c6:	74fb      	strb	r3, [r7, #19]
 80091c8:	e008      	b.n	80091dc <tcp_input+0x668>
 80091ca:	4b35      	ldr	r3, [pc, #212]	; (80092a0 <tcp_input+0x72c>)
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	2300      	movs	r3, #0
 80091d0:	69f9      	ldr	r1, [r7, #28]
 80091d2:	2000      	movs	r0, #0
 80091d4:	f7ff f8ae 	bl	8008334 <tcp_recv_null>
 80091d8:	4603      	mov	r3, r0
 80091da:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80091dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80091e0:	f113 0f0d 	cmn.w	r3, #13
 80091e4:	d053      	beq.n	800928e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80091e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d003      	beq.n	80091f6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80091ee:	4b2c      	ldr	r3, [pc, #176]	; (80092a0 <tcp_input+0x72c>)
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80091f6:	4b2b      	ldr	r3, [pc, #172]	; (80092a4 <tcp_input+0x730>)
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	f003 0320 	and.w	r3, r3, #32
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d030      	beq.n	8009264 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009206:	2b00      	cmp	r3, #0
 8009208:	d009      	beq.n	800921e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800920e:	7b5a      	ldrb	r2, [r3, #13]
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009214:	f042 0220 	orr.w	r2, r2, #32
 8009218:	b2d2      	uxtb	r2, r2
 800921a:	735a      	strb	r2, [r3, #13]
 800921c:	e022      	b.n	8009264 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009222:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009226:	d005      	beq.n	8009234 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800922c:	3301      	adds	r3, #1
 800922e:	b29a      	uxth	r2, r3
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00b      	beq.n	8009256 <tcp_input+0x6e2>
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	6918      	ldr	r0, [r3, #16]
 8009248:	2300      	movs	r3, #0
 800924a:	2200      	movs	r2, #0
 800924c:	69f9      	ldr	r1, [r7, #28]
 800924e:	47a0      	blx	r4
 8009250:	4603      	mov	r3, r0
 8009252:	74fb      	strb	r3, [r7, #19]
 8009254:	e001      	b.n	800925a <tcp_input+0x6e6>
 8009256:	2300      	movs	r3, #0
 8009258:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800925a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800925e:	f113 0f0d 	cmn.w	r3, #13
 8009262:	d016      	beq.n	8009292 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009264:	4b13      	ldr	r3, [pc, #76]	; (80092b4 <tcp_input+0x740>)
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800926a:	69f8      	ldr	r0, [r7, #28]
 800926c:	f000 f88e 	bl	800938c <tcp_input_delayed_close>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d128      	bne.n	80092c8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009276:	69f8      	ldr	r0, [r7, #28]
 8009278:	f002 fac8 	bl	800b80c <tcp_output>
 800927c:	e025      	b.n	80092ca <tcp_input+0x756>
        goto aborted;
 800927e:	bf00      	nop
 8009280:	e023      	b.n	80092ca <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009282:	bf00      	nop
 8009284:	e021      	b.n	80092ca <tcp_input+0x756>
              goto aborted;
 8009286:	bf00      	nop
 8009288:	e01f      	b.n	80092ca <tcp_input+0x756>
          goto aborted;
 800928a:	bf00      	nop
 800928c:	e01d      	b.n	80092ca <tcp_input+0x756>
            goto aborted;
 800928e:	bf00      	nop
 8009290:	e01b      	b.n	80092ca <tcp_input+0x756>
              goto aborted;
 8009292:	bf00      	nop
 8009294:	e019      	b.n	80092ca <tcp_input+0x756>
 8009296:	bf00      	nop
 8009298:	200089f4 	.word	0x200089f4
 800929c:	20008a04 	.word	0x20008a04
 80092a0:	20008a24 	.word	0x20008a24
 80092a4:	20008a21 	.word	0x20008a21
 80092a8:	20008a1c 	.word	0x20008a1c
 80092ac:	20008a20 	.word	0x20008a20
 80092b0:	20008a1e 	.word	0x20008a1e
 80092b4:	20008a28 	.word	0x20008a28
 80092b8:	200089e8 	.word	0x200089e8
 80092bc:	0801172c 	.word	0x0801172c
 80092c0:	080118e0 	.word	0x080118e0
 80092c4:	08011778 	.word	0x08011778
          goto aborted;
 80092c8:	bf00      	nop
    tcp_input_pcb = NULL;
 80092ca:	4b27      	ldr	r3, [pc, #156]	; (8009368 <tcp_input+0x7f4>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80092d0:	4b26      	ldr	r3, [pc, #152]	; (800936c <tcp_input+0x7f8>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80092d6:	4b26      	ldr	r3, [pc, #152]	; (8009370 <tcp_input+0x7fc>)
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d03f      	beq.n	800935e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80092de:	4b24      	ldr	r3, [pc, #144]	; (8009370 <tcp_input+0x7fc>)
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fd fc10 	bl	8006b08 <pbuf_free>
      inseg.p = NULL;
 80092e8:	4b21      	ldr	r3, [pc, #132]	; (8009370 <tcp_input+0x7fc>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80092ee:	e036      	b.n	800935e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80092f0:	4b20      	ldr	r3, [pc, #128]	; (8009374 <tcp_input+0x800>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	899b      	ldrh	r3, [r3, #12]
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7fc f971 	bl	80055e0 <lwip_htons>
 80092fe:	4603      	mov	r3, r0
 8009300:	b2db      	uxtb	r3, r3
 8009302:	f003 0304 	and.w	r3, r3, #4
 8009306:	2b00      	cmp	r3, #0
 8009308:	d118      	bne.n	800933c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800930a:	4b1b      	ldr	r3, [pc, #108]	; (8009378 <tcp_input+0x804>)
 800930c:	6819      	ldr	r1, [r3, #0]
 800930e:	4b1b      	ldr	r3, [pc, #108]	; (800937c <tcp_input+0x808>)
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	4b1a      	ldr	r3, [pc, #104]	; (8009380 <tcp_input+0x80c>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800931a:	4b16      	ldr	r3, [pc, #88]	; (8009374 <tcp_input+0x800>)
 800931c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800931e:	885b      	ldrh	r3, [r3, #2]
 8009320:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009322:	4a14      	ldr	r2, [pc, #80]	; (8009374 <tcp_input+0x800>)
 8009324:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009326:	8812      	ldrh	r2, [r2, #0]
 8009328:	b292      	uxth	r2, r2
 800932a:	9202      	str	r2, [sp, #8]
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	4b15      	ldr	r3, [pc, #84]	; (8009384 <tcp_input+0x810>)
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	4b15      	ldr	r3, [pc, #84]	; (8009388 <tcp_input+0x814>)
 8009334:	4602      	mov	r2, r0
 8009336:	2000      	movs	r0, #0
 8009338:	f003 f81c 	bl	800c374 <tcp_rst>
    pbuf_free(p);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7fd fbe3 	bl	8006b08 <pbuf_free>
  return;
 8009342:	e00c      	b.n	800935e <tcp_input+0x7ea>
    goto dropped;
 8009344:	bf00      	nop
 8009346:	e006      	b.n	8009356 <tcp_input+0x7e2>
    goto dropped;
 8009348:	bf00      	nop
 800934a:	e004      	b.n	8009356 <tcp_input+0x7e2>
    goto dropped;
 800934c:	bf00      	nop
 800934e:	e002      	b.n	8009356 <tcp_input+0x7e2>
      goto dropped;
 8009350:	bf00      	nop
 8009352:	e000      	b.n	8009356 <tcp_input+0x7e2>
      goto dropped;
 8009354:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7fd fbd6 	bl	8006b08 <pbuf_free>
 800935c:	e000      	b.n	8009360 <tcp_input+0x7ec>
  return;
 800935e:	bf00      	nop
}
 8009360:	3724      	adds	r7, #36	; 0x24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd90      	pop	{r4, r7, pc}
 8009366:	bf00      	nop
 8009368:	20008a28 	.word	0x20008a28
 800936c:	20008a24 	.word	0x20008a24
 8009370:	200089f4 	.word	0x200089f4
 8009374:	20008a04 	.word	0x20008a04
 8009378:	20008a18 	.word	0x20008a18
 800937c:	20008a1e 	.word	0x20008a1e
 8009380:	20008a14 	.word	0x20008a14
 8009384:	200032bc 	.word	0x200032bc
 8009388:	200032c0 	.word	0x200032c0

0800938c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d106      	bne.n	80093a8 <tcp_input_delayed_close+0x1c>
 800939a:	4b17      	ldr	r3, [pc, #92]	; (80093f8 <tcp_input_delayed_close+0x6c>)
 800939c:	f240 225a 	movw	r2, #602	; 0x25a
 80093a0:	4916      	ldr	r1, [pc, #88]	; (80093fc <tcp_input_delayed_close+0x70>)
 80093a2:	4817      	ldr	r0, [pc, #92]	; (8009400 <tcp_input_delayed_close+0x74>)
 80093a4:	f006 f80a 	bl	800f3bc <iprintf>

  if (recv_flags & TF_CLOSED) {
 80093a8:	4b16      	ldr	r3, [pc, #88]	; (8009404 <tcp_input_delayed_close+0x78>)
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	f003 0310 	and.w	r3, r3, #16
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d01c      	beq.n	80093ee <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	8b5b      	ldrh	r3, [r3, #26]
 80093b8:	f003 0310 	and.w	r3, r3, #16
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10d      	bne.n	80093dc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d008      	beq.n	80093dc <tcp_input_delayed_close+0x50>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	6912      	ldr	r2, [r2, #16]
 80093d4:	f06f 010e 	mvn.w	r1, #14
 80093d8:	4610      	mov	r0, r2
 80093da:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80093dc:	6879      	ldr	r1, [r7, #4]
 80093de:	480a      	ldr	r0, [pc, #40]	; (8009408 <tcp_input_delayed_close+0x7c>)
 80093e0:	f7ff fa50 	bl	8008884 <tcp_pcb_remove>
    tcp_free(pcb);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7fd fe2f 	bl	8007048 <tcp_free>
    return 1;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e000      	b.n	80093f0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	0801172c 	.word	0x0801172c
 80093fc:	080118fc 	.word	0x080118fc
 8009400:	08011778 	.word	0x08011778
 8009404:	20008a21 	.word	0x20008a21
 8009408:	200089e8 	.word	0x200089e8

0800940c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800940c:	b590      	push	{r4, r7, lr}
 800940e:	b08b      	sub	sp, #44	; 0x2c
 8009410:	af04      	add	r7, sp, #16
 8009412:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009414:	4b6f      	ldr	r3, [pc, #444]	; (80095d4 <tcp_listen_input+0x1c8>)
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	f003 0304 	and.w	r3, r3, #4
 800941c:	2b00      	cmp	r3, #0
 800941e:	f040 80d2 	bne.w	80095c6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d106      	bne.n	8009436 <tcp_listen_input+0x2a>
 8009428:	4b6b      	ldr	r3, [pc, #428]	; (80095d8 <tcp_listen_input+0x1cc>)
 800942a:	f240 2281 	movw	r2, #641	; 0x281
 800942e:	496b      	ldr	r1, [pc, #428]	; (80095dc <tcp_listen_input+0x1d0>)
 8009430:	486b      	ldr	r0, [pc, #428]	; (80095e0 <tcp_listen_input+0x1d4>)
 8009432:	f005 ffc3 	bl	800f3bc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009436:	4b67      	ldr	r3, [pc, #412]	; (80095d4 <tcp_listen_input+0x1c8>)
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	f003 0310 	and.w	r3, r3, #16
 800943e:	2b00      	cmp	r3, #0
 8009440:	d019      	beq.n	8009476 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009442:	4b68      	ldr	r3, [pc, #416]	; (80095e4 <tcp_listen_input+0x1d8>)
 8009444:	6819      	ldr	r1, [r3, #0]
 8009446:	4b68      	ldr	r3, [pc, #416]	; (80095e8 <tcp_listen_input+0x1dc>)
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	4b67      	ldr	r3, [pc, #412]	; (80095ec <tcp_listen_input+0x1e0>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009452:	4b67      	ldr	r3, [pc, #412]	; (80095f0 <tcp_listen_input+0x1e4>)
 8009454:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009456:	885b      	ldrh	r3, [r3, #2]
 8009458:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800945a:	4a65      	ldr	r2, [pc, #404]	; (80095f0 <tcp_listen_input+0x1e4>)
 800945c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800945e:	8812      	ldrh	r2, [r2, #0]
 8009460:	b292      	uxth	r2, r2
 8009462:	9202      	str	r2, [sp, #8]
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	4b63      	ldr	r3, [pc, #396]	; (80095f4 <tcp_listen_input+0x1e8>)
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	4b63      	ldr	r3, [pc, #396]	; (80095f8 <tcp_listen_input+0x1ec>)
 800946c:	4602      	mov	r2, r0
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f002 ff80 	bl	800c374 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009474:	e0a9      	b.n	80095ca <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009476:	4b57      	ldr	r3, [pc, #348]	; (80095d4 <tcp_listen_input+0x1c8>)
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	f003 0302 	and.w	r3, r3, #2
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 80a3 	beq.w	80095ca <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	7d5b      	ldrb	r3, [r3, #21]
 8009488:	4618      	mov	r0, r3
 800948a:	f7ff f877 	bl	800857c <tcp_alloc>
 800948e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d111      	bne.n	80094ba <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00a      	beq.n	80094b4 <tcp_listen_input+0xa8>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	6910      	ldr	r0, [r2, #16]
 80094a6:	f04f 32ff 	mov.w	r2, #4294967295
 80094aa:	2100      	movs	r1, #0
 80094ac:	4798      	blx	r3
 80094ae:	4603      	mov	r3, r0
 80094b0:	73bb      	strb	r3, [r7, #14]
      return;
 80094b2:	e08b      	b.n	80095cc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80094b4:	23f0      	movs	r3, #240	; 0xf0
 80094b6:	73bb      	strb	r3, [r7, #14]
      return;
 80094b8:	e088      	b.n	80095cc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80094ba:	4b50      	ldr	r3, [pc, #320]	; (80095fc <tcp_listen_input+0x1f0>)
 80094bc:	695a      	ldr	r2, [r3, #20]
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80094c2:	4b4e      	ldr	r3, [pc, #312]	; (80095fc <tcp_listen_input+0x1f0>)
 80094c4:	691a      	ldr	r2, [r3, #16]
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	8ada      	ldrh	r2, [r3, #22]
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80094d2:	4b47      	ldr	r3, [pc, #284]	; (80095f0 <tcp_listen_input+0x1e4>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	b29a      	uxth	r2, r3
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2203      	movs	r2, #3
 80094e2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80094e4:	4b41      	ldr	r3, [pc, #260]	; (80095ec <tcp_listen_input+0x1e0>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	1c5a      	adds	r2, r3, #1
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80094f6:	6978      	ldr	r0, [r7, #20]
 80094f8:	f7ff fa58 	bl	80089ac <tcp_next_iss>
 80094fc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009516:	4b35      	ldr	r3, [pc, #212]	; (80095ec <tcp_listen_input+0x1e0>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	1e5a      	subs	r2, r3, #1
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	691a      	ldr	r2, [r3, #16]
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	7a5b      	ldrb	r3, [r3, #9]
 8009532:	f003 030c 	and.w	r3, r3, #12
 8009536:	b2da      	uxtb	r2, r3
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	7a1a      	ldrb	r2, [r3, #8]
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009544:	4b2e      	ldr	r3, [pc, #184]	; (8009600 <tcp_listen_input+0x1f4>)
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	60da      	str	r2, [r3, #12]
 800954c:	4a2c      	ldr	r2, [pc, #176]	; (8009600 <tcp_listen_input+0x1f4>)
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	6013      	str	r3, [r2, #0]
 8009552:	f003 f8d1 	bl	800c6f8 <tcp_timer_needed>
 8009556:	4b2b      	ldr	r3, [pc, #172]	; (8009604 <tcp_listen_input+0x1f8>)
 8009558:	2201      	movs	r2, #1
 800955a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800955c:	6978      	ldr	r0, [r7, #20]
 800955e:	f001 fd8f 	bl	800b080 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009562:	4b23      	ldr	r3, [pc, #140]	; (80095f0 <tcp_listen_input+0x1e4>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	89db      	ldrh	r3, [r3, #14]
 8009568:	b29a      	uxth	r2, r3
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	3304      	adds	r3, #4
 8009584:	4618      	mov	r0, r3
 8009586:	f004 fc53 	bl	800de30 <ip4_route>
 800958a:	4601      	mov	r1, r0
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	3304      	adds	r3, #4
 8009590:	461a      	mov	r2, r3
 8009592:	4620      	mov	r0, r4
 8009594:	f7ff fa30 	bl	80089f8 <tcp_eff_send_mss_netif>
 8009598:	4603      	mov	r3, r0
 800959a:	461a      	mov	r2, r3
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80095a0:	2112      	movs	r1, #18
 80095a2:	6978      	ldr	r0, [r7, #20]
 80095a4:	f002 f844 	bl	800b630 <tcp_enqueue_flags>
 80095a8:	4603      	mov	r3, r0
 80095aa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80095ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d004      	beq.n	80095be <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80095b4:	2100      	movs	r1, #0
 80095b6:	6978      	ldr	r0, [r7, #20]
 80095b8:	f7fd ff70 	bl	800749c <tcp_abandon>
      return;
 80095bc:	e006      	b.n	80095cc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80095be:	6978      	ldr	r0, [r7, #20]
 80095c0:	f002 f924 	bl	800b80c <tcp_output>
  return;
 80095c4:	e001      	b.n	80095ca <tcp_listen_input+0x1be>
    return;
 80095c6:	bf00      	nop
 80095c8:	e000      	b.n	80095cc <tcp_listen_input+0x1c0>
  return;
 80095ca:	bf00      	nop
}
 80095cc:	371c      	adds	r7, #28
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd90      	pop	{r4, r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20008a20 	.word	0x20008a20
 80095d8:	0801172c 	.word	0x0801172c
 80095dc:	08011924 	.word	0x08011924
 80095e0:	08011778 	.word	0x08011778
 80095e4:	20008a18 	.word	0x20008a18
 80095e8:	20008a1e 	.word	0x20008a1e
 80095ec:	20008a14 	.word	0x20008a14
 80095f0:	20008a04 	.word	0x20008a04
 80095f4:	200032bc 	.word	0x200032bc
 80095f8:	200032c0 	.word	0x200032c0
 80095fc:	200032ac 	.word	0x200032ac
 8009600:	200089e8 	.word	0x200089e8
 8009604:	200089f0 	.word	0x200089f0

08009608 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af04      	add	r7, sp, #16
 800960e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009610:	4b2f      	ldr	r3, [pc, #188]	; (80096d0 <tcp_timewait_input+0xc8>)
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b00      	cmp	r3, #0
 800961a:	d153      	bne.n	80096c4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d106      	bne.n	8009630 <tcp_timewait_input+0x28>
 8009622:	4b2c      	ldr	r3, [pc, #176]	; (80096d4 <tcp_timewait_input+0xcc>)
 8009624:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009628:	492b      	ldr	r1, [pc, #172]	; (80096d8 <tcp_timewait_input+0xd0>)
 800962a:	482c      	ldr	r0, [pc, #176]	; (80096dc <tcp_timewait_input+0xd4>)
 800962c:	f005 fec6 	bl	800f3bc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009630:	4b27      	ldr	r3, [pc, #156]	; (80096d0 <tcp_timewait_input+0xc8>)
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	f003 0302 	and.w	r3, r3, #2
 8009638:	2b00      	cmp	r3, #0
 800963a:	d02a      	beq.n	8009692 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800963c:	4b28      	ldr	r3, [pc, #160]	; (80096e0 <tcp_timewait_input+0xd8>)
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	db2d      	blt.n	80096a6 <tcp_timewait_input+0x9e>
 800964a:	4b25      	ldr	r3, [pc, #148]	; (80096e0 <tcp_timewait_input+0xd8>)
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009656:	440b      	add	r3, r1
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	2b00      	cmp	r3, #0
 800965c:	dc23      	bgt.n	80096a6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800965e:	4b21      	ldr	r3, [pc, #132]	; (80096e4 <tcp_timewait_input+0xdc>)
 8009660:	6819      	ldr	r1, [r3, #0]
 8009662:	4b21      	ldr	r3, [pc, #132]	; (80096e8 <tcp_timewait_input+0xe0>)
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	4b1d      	ldr	r3, [pc, #116]	; (80096e0 <tcp_timewait_input+0xd8>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800966e:	4b1f      	ldr	r3, [pc, #124]	; (80096ec <tcp_timewait_input+0xe4>)
 8009670:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009672:	885b      	ldrh	r3, [r3, #2]
 8009674:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009676:	4a1d      	ldr	r2, [pc, #116]	; (80096ec <tcp_timewait_input+0xe4>)
 8009678:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800967a:	8812      	ldrh	r2, [r2, #0]
 800967c:	b292      	uxth	r2, r2
 800967e:	9202      	str	r2, [sp, #8]
 8009680:	9301      	str	r3, [sp, #4]
 8009682:	4b1b      	ldr	r3, [pc, #108]	; (80096f0 <tcp_timewait_input+0xe8>)
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	4b1b      	ldr	r3, [pc, #108]	; (80096f4 <tcp_timewait_input+0xec>)
 8009688:	4602      	mov	r2, r0
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f002 fe72 	bl	800c374 <tcp_rst>
      return;
 8009690:	e01b      	b.n	80096ca <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8009692:	4b0f      	ldr	r3, [pc, #60]	; (80096d0 <tcp_timewait_input+0xc8>)
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	f003 0301 	and.w	r3, r3, #1
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800969e:	4b16      	ldr	r3, [pc, #88]	; (80096f8 <tcp_timewait_input+0xf0>)
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80096a6:	4b10      	ldr	r3, [pc, #64]	; (80096e8 <tcp_timewait_input+0xe0>)
 80096a8:	881b      	ldrh	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00c      	beq.n	80096c8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	8b5b      	ldrh	r3, [r3, #26]
 80096b2:	f043 0302 	orr.w	r3, r3, #2
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f002 f8a5 	bl	800b80c <tcp_output>
  }
  return;
 80096c2:	e001      	b.n	80096c8 <tcp_timewait_input+0xc0>
    return;
 80096c4:	bf00      	nop
 80096c6:	e000      	b.n	80096ca <tcp_timewait_input+0xc2>
  return;
 80096c8:	bf00      	nop
}
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	20008a20 	.word	0x20008a20
 80096d4:	0801172c 	.word	0x0801172c
 80096d8:	08011944 	.word	0x08011944
 80096dc:	08011778 	.word	0x08011778
 80096e0:	20008a14 	.word	0x20008a14
 80096e4:	20008a18 	.word	0x20008a18
 80096e8:	20008a1e 	.word	0x20008a1e
 80096ec:	20008a04 	.word	0x20008a04
 80096f0:	200032bc 	.word	0x200032bc
 80096f4:	200032c0 	.word	0x200032c0
 80096f8:	200089dc 	.word	0x200089dc

080096fc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80096fc:	b590      	push	{r4, r7, lr}
 80096fe:	b08d      	sub	sp, #52	; 0x34
 8009700:	af04      	add	r7, sp, #16
 8009702:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d106      	bne.n	8009720 <tcp_process+0x24>
 8009712:	4b9d      	ldr	r3, [pc, #628]	; (8009988 <tcp_process+0x28c>)
 8009714:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009718:	499c      	ldr	r1, [pc, #624]	; (800998c <tcp_process+0x290>)
 800971a:	489d      	ldr	r0, [pc, #628]	; (8009990 <tcp_process+0x294>)
 800971c:	f005 fe4e 	bl	800f3bc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009720:	4b9c      	ldr	r3, [pc, #624]	; (8009994 <tcp_process+0x298>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	f003 0304 	and.w	r3, r3, #4
 8009728:	2b00      	cmp	r3, #0
 800972a:	d04e      	beq.n	80097ca <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	7d1b      	ldrb	r3, [r3, #20]
 8009730:	2b02      	cmp	r3, #2
 8009732:	d108      	bne.n	8009746 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009738:	4b97      	ldr	r3, [pc, #604]	; (8009998 <tcp_process+0x29c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	429a      	cmp	r2, r3
 800973e:	d123      	bne.n	8009788 <tcp_process+0x8c>
        acceptable = 1;
 8009740:	2301      	movs	r3, #1
 8009742:	76fb      	strb	r3, [r7, #27]
 8009744:	e020      	b.n	8009788 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800974a:	4b94      	ldr	r3, [pc, #592]	; (800999c <tcp_process+0x2a0>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	429a      	cmp	r2, r3
 8009750:	d102      	bne.n	8009758 <tcp_process+0x5c>
        acceptable = 1;
 8009752:	2301      	movs	r3, #1
 8009754:	76fb      	strb	r3, [r7, #27]
 8009756:	e017      	b.n	8009788 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009758:	4b90      	ldr	r3, [pc, #576]	; (800999c <tcp_process+0x2a0>)
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	db10      	blt.n	8009788 <tcp_process+0x8c>
 8009766:	4b8d      	ldr	r3, [pc, #564]	; (800999c <tcp_process+0x2a0>)
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976e:	6879      	ldr	r1, [r7, #4]
 8009770:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009772:	440b      	add	r3, r1
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	2b00      	cmp	r3, #0
 8009778:	dc06      	bgt.n	8009788 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	8b5b      	ldrh	r3, [r3, #26]
 800977e:	f043 0302 	orr.w	r3, r3, #2
 8009782:	b29a      	uxth	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009788:	7efb      	ldrb	r3, [r7, #27]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d01b      	beq.n	80097c6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	7d1b      	ldrb	r3, [r3, #20]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d106      	bne.n	80097a4 <tcp_process+0xa8>
 8009796:	4b7c      	ldr	r3, [pc, #496]	; (8009988 <tcp_process+0x28c>)
 8009798:	f44f 724e 	mov.w	r2, #824	; 0x338
 800979c:	4980      	ldr	r1, [pc, #512]	; (80099a0 <tcp_process+0x2a4>)
 800979e:	487c      	ldr	r0, [pc, #496]	; (8009990 <tcp_process+0x294>)
 80097a0:	f005 fe0c 	bl	800f3bc <iprintf>
      recv_flags |= TF_RESET;
 80097a4:	4b7f      	ldr	r3, [pc, #508]	; (80099a4 <tcp_process+0x2a8>)
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	f043 0308 	orr.w	r3, r3, #8
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	4b7d      	ldr	r3, [pc, #500]	; (80099a4 <tcp_process+0x2a8>)
 80097b0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	8b5b      	ldrh	r3, [r3, #26]
 80097b6:	f023 0301 	bic.w	r3, r3, #1
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80097c0:	f06f 030d 	mvn.w	r3, #13
 80097c4:	e37a      	b.n	8009ebc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	e378      	b.n	8009ebc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80097ca:	4b72      	ldr	r3, [pc, #456]	; (8009994 <tcp_process+0x298>)
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	f003 0302 	and.w	r3, r3, #2
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d010      	beq.n	80097f8 <tcp_process+0xfc>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	7d1b      	ldrb	r3, [r3, #20]
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d00c      	beq.n	80097f8 <tcp_process+0xfc>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	7d1b      	ldrb	r3, [r3, #20]
 80097e2:	2b03      	cmp	r3, #3
 80097e4:	d008      	beq.n	80097f8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	8b5b      	ldrh	r3, [r3, #26]
 80097ea:	f043 0302 	orr.w	r3, r3, #2
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	e361      	b.n	8009ebc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	8b5b      	ldrh	r3, [r3, #26]
 80097fc:	f003 0310 	and.w	r3, r3, #16
 8009800:	2b00      	cmp	r3, #0
 8009802:	d103      	bne.n	800980c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009804:	4b68      	ldr	r3, [pc, #416]	; (80099a8 <tcp_process+0x2ac>)
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f001 fc2f 	bl	800b080 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	7d1b      	ldrb	r3, [r3, #20]
 8009826:	3b02      	subs	r3, #2
 8009828:	2b07      	cmp	r3, #7
 800982a:	f200 8337 	bhi.w	8009e9c <tcp_process+0x7a0>
 800982e:	a201      	add	r2, pc, #4	; (adr r2, 8009834 <tcp_process+0x138>)
 8009830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009834:	08009855 	.word	0x08009855
 8009838:	08009a85 	.word	0x08009a85
 800983c:	08009bfd 	.word	0x08009bfd
 8009840:	08009c27 	.word	0x08009c27
 8009844:	08009d4b 	.word	0x08009d4b
 8009848:	08009bfd 	.word	0x08009bfd
 800984c:	08009dd7 	.word	0x08009dd7
 8009850:	08009e67 	.word	0x08009e67
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009854:	4b4f      	ldr	r3, [pc, #316]	; (8009994 <tcp_process+0x298>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	f003 0310 	and.w	r3, r3, #16
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 80e4 	beq.w	8009a2a <tcp_process+0x32e>
 8009862:	4b4c      	ldr	r3, [pc, #304]	; (8009994 <tcp_process+0x298>)
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	f003 0302 	and.w	r3, r3, #2
 800986a:	2b00      	cmp	r3, #0
 800986c:	f000 80dd 	beq.w	8009a2a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	4b48      	ldr	r3, [pc, #288]	; (8009998 <tcp_process+0x29c>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	429a      	cmp	r2, r3
 800987c:	f040 80d5 	bne.w	8009a2a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009880:	4b46      	ldr	r3, [pc, #280]	; (800999c <tcp_process+0x2a0>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	1c5a      	adds	r2, r3, #1
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009892:	4b41      	ldr	r3, [pc, #260]	; (8009998 <tcp_process+0x29c>)
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800989a:	4b44      	ldr	r3, [pc, #272]	; (80099ac <tcp_process+0x2b0>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	89db      	ldrh	r3, [r3, #14]
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80098b4:	4b39      	ldr	r3, [pc, #228]	; (800999c <tcp_process+0x2a0>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	1e5a      	subs	r2, r3, #1
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2204      	movs	r2, #4
 80098c2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3304      	adds	r3, #4
 80098cc:	4618      	mov	r0, r3
 80098ce:	f004 faaf 	bl	800de30 <ip4_route>
 80098d2:	4601      	mov	r1, r0
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3304      	adds	r3, #4
 80098d8:	461a      	mov	r2, r3
 80098da:	4620      	mov	r0, r4
 80098dc:	f7ff f88c 	bl	80089f8 <tcp_eff_send_mss_netif>
 80098e0:	4603      	mov	r3, r0
 80098e2:	461a      	mov	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098ec:	009a      	lsls	r2, r3, #2
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098f2:	005b      	lsls	r3, r3, #1
 80098f4:	f241 111c 	movw	r1, #4380	; 0x111c
 80098f8:	428b      	cmp	r3, r1
 80098fa:	bf38      	it	cc
 80098fc:	460b      	movcc	r3, r1
 80098fe:	429a      	cmp	r2, r3
 8009900:	d204      	bcs.n	800990c <tcp_process+0x210>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	b29b      	uxth	r3, r3
 800990a:	e00d      	b.n	8009928 <tcp_process+0x22c>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009910:	005b      	lsls	r3, r3, #1
 8009912:	f241 121c 	movw	r2, #4380	; 0x111c
 8009916:	4293      	cmp	r3, r2
 8009918:	d904      	bls.n	8009924 <tcp_process+0x228>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800991e:	005b      	lsls	r3, r3, #1
 8009920:	b29b      	uxth	r3, r3
 8009922:	e001      	b.n	8009928 <tcp_process+0x22c>
 8009924:	f241 131c 	movw	r3, #4380	; 0x111c
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009934:	2b00      	cmp	r3, #0
 8009936:	d106      	bne.n	8009946 <tcp_process+0x24a>
 8009938:	4b13      	ldr	r3, [pc, #76]	; (8009988 <tcp_process+0x28c>)
 800993a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800993e:	491c      	ldr	r1, [pc, #112]	; (80099b0 <tcp_process+0x2b4>)
 8009940:	4813      	ldr	r0, [pc, #76]	; (8009990 <tcp_process+0x294>)
 8009942:	f005 fd3b 	bl	800f3bc <iprintf>
        --pcb->snd_queuelen;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800994c:	3b01      	subs	r3, #1
 800994e:	b29a      	uxth	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800995a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d12a      	bne.n	80099b8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009966:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d106      	bne.n	800997c <tcp_process+0x280>
 800996e:	4b06      	ldr	r3, [pc, #24]	; (8009988 <tcp_process+0x28c>)
 8009970:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009974:	490f      	ldr	r1, [pc, #60]	; (80099b4 <tcp_process+0x2b8>)
 8009976:	4806      	ldr	r0, [pc, #24]	; (8009990 <tcp_process+0x294>)
 8009978:	f005 fd20 	bl	800f3bc <iprintf>
          pcb->unsent = rseg->next;
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	66da      	str	r2, [r3, #108]	; 0x6c
 8009984:	e01c      	b.n	80099c0 <tcp_process+0x2c4>
 8009986:	bf00      	nop
 8009988:	0801172c 	.word	0x0801172c
 800998c:	08011964 	.word	0x08011964
 8009990:	08011778 	.word	0x08011778
 8009994:	20008a20 	.word	0x20008a20
 8009998:	20008a18 	.word	0x20008a18
 800999c:	20008a14 	.word	0x20008a14
 80099a0:	08011980 	.word	0x08011980
 80099a4:	20008a21 	.word	0x20008a21
 80099a8:	200089dc 	.word	0x200089dc
 80099ac:	20008a04 	.word	0x20008a04
 80099b0:	080119a0 	.word	0x080119a0
 80099b4:	080119b8 	.word	0x080119b8
        } else {
          pcb->unacked = rseg->next;
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80099c0:	69f8      	ldr	r0, [r7, #28]
 80099c2:	f7fe fc72 	bl	80082aa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d104      	bne.n	80099d8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099d4:	861a      	strh	r2, [r3, #48]	; 0x30
 80099d6:	e006      	b.n	80099e6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00a      	beq.n	8009a06 <tcp_process+0x30a>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	6910      	ldr	r0, [r2, #16]
 80099fa:	2200      	movs	r2, #0
 80099fc:	6879      	ldr	r1, [r7, #4]
 80099fe:	4798      	blx	r3
 8009a00:	4603      	mov	r3, r0
 8009a02:	76bb      	strb	r3, [r7, #26]
 8009a04:	e001      	b.n	8009a0a <tcp_process+0x30e>
 8009a06:	2300      	movs	r3, #0
 8009a08:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009a0a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009a0e:	f113 0f0d 	cmn.w	r3, #13
 8009a12:	d102      	bne.n	8009a1a <tcp_process+0x31e>
          return ERR_ABRT;
 8009a14:	f06f 030c 	mvn.w	r3, #12
 8009a18:	e250      	b.n	8009ebc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	8b5b      	ldrh	r3, [r3, #26]
 8009a1e:	f043 0302 	orr.w	r3, r3, #2
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009a28:	e23a      	b.n	8009ea0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009a2a:	4b98      	ldr	r3, [pc, #608]	; (8009c8c <tcp_process+0x590>)
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	f003 0310 	and.w	r3, r3, #16
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 8234 	beq.w	8009ea0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a38:	4b95      	ldr	r3, [pc, #596]	; (8009c90 <tcp_process+0x594>)
 8009a3a:	6819      	ldr	r1, [r3, #0]
 8009a3c:	4b95      	ldr	r3, [pc, #596]	; (8009c94 <tcp_process+0x598>)
 8009a3e:	881b      	ldrh	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	4b95      	ldr	r3, [pc, #596]	; (8009c98 <tcp_process+0x59c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a48:	4b94      	ldr	r3, [pc, #592]	; (8009c9c <tcp_process+0x5a0>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a4c:	885b      	ldrh	r3, [r3, #2]
 8009a4e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a50:	4a92      	ldr	r2, [pc, #584]	; (8009c9c <tcp_process+0x5a0>)
 8009a52:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a54:	8812      	ldrh	r2, [r2, #0]
 8009a56:	b292      	uxth	r2, r2
 8009a58:	9202      	str	r2, [sp, #8]
 8009a5a:	9301      	str	r3, [sp, #4]
 8009a5c:	4b90      	ldr	r3, [pc, #576]	; (8009ca0 <tcp_process+0x5a4>)
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	4b90      	ldr	r3, [pc, #576]	; (8009ca4 <tcp_process+0x5a8>)
 8009a62:	4602      	mov	r2, r0
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f002 fc85 	bl	800c374 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a70:	2b05      	cmp	r3, #5
 8009a72:	f200 8215 	bhi.w	8009ea0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f002 fa4f 	bl	800bf20 <tcp_rexmit_rto>
      break;
 8009a82:	e20d      	b.n	8009ea0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009a84:	4b81      	ldr	r3, [pc, #516]	; (8009c8c <tcp_process+0x590>)
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	f003 0310 	and.w	r3, r3, #16
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 80a1 	beq.w	8009bd4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009a92:	4b7f      	ldr	r3, [pc, #508]	; (8009c90 <tcp_process+0x594>)
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	db7e      	blt.n	8009ba0 <tcp_process+0x4a4>
 8009aa2:	4b7b      	ldr	r3, [pc, #492]	; (8009c90 <tcp_process+0x594>)
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	dc77      	bgt.n	8009ba0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2204      	movs	r2, #4
 8009ab4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d102      	bne.n	8009ac4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009abe:	23fa      	movs	r3, #250	; 0xfa
 8009ac0:	76bb      	strb	r3, [r7, #26]
 8009ac2:	e01d      	b.n	8009b00 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d106      	bne.n	8009adc <tcp_process+0x3e0>
 8009ace:	4b76      	ldr	r3, [pc, #472]	; (8009ca8 <tcp_process+0x5ac>)
 8009ad0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009ad4:	4975      	ldr	r1, [pc, #468]	; (8009cac <tcp_process+0x5b0>)
 8009ad6:	4876      	ldr	r0, [pc, #472]	; (8009cb0 <tcp_process+0x5b4>)
 8009ad8:	f005 fc70 	bl	800f3bc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00a      	beq.n	8009afc <tcp_process+0x400>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	6910      	ldr	r0, [r2, #16]
 8009af0:	2200      	movs	r2, #0
 8009af2:	6879      	ldr	r1, [r7, #4]
 8009af4:	4798      	blx	r3
 8009af6:	4603      	mov	r3, r0
 8009af8:	76bb      	strb	r3, [r7, #26]
 8009afa:	e001      	b.n	8009b00 <tcp_process+0x404>
 8009afc:	23f0      	movs	r3, #240	; 0xf0
 8009afe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009b00:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00a      	beq.n	8009b1e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009b08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009b0c:	f113 0f0d 	cmn.w	r3, #13
 8009b10:	d002      	beq.n	8009b18 <tcp_process+0x41c>
              tcp_abort(pcb);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7fd fd80 	bl	8007618 <tcp_abort>
            }
            return ERR_ABRT;
 8009b18:	f06f 030c 	mvn.w	r3, #12
 8009b1c:	e1ce      	b.n	8009ebc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fae0 	bl	800a0e4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009b24:	4b63      	ldr	r3, [pc, #396]	; (8009cb4 <tcp_process+0x5b8>)
 8009b26:	881b      	ldrh	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d005      	beq.n	8009b38 <tcp_process+0x43c>
            recv_acked--;
 8009b2c:	4b61      	ldr	r3, [pc, #388]	; (8009cb4 <tcp_process+0x5b8>)
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	3b01      	subs	r3, #1
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	4b5f      	ldr	r3, [pc, #380]	; (8009cb4 <tcp_process+0x5b8>)
 8009b36:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b3c:	009a      	lsls	r2, r3, #2
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	f241 111c 	movw	r1, #4380	; 0x111c
 8009b48:	428b      	cmp	r3, r1
 8009b4a:	bf38      	it	cc
 8009b4c:	460b      	movcc	r3, r1
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d204      	bcs.n	8009b5c <tcp_process+0x460>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	e00d      	b.n	8009b78 <tcp_process+0x47c>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b60:	005b      	lsls	r3, r3, #1
 8009b62:	f241 121c 	movw	r2, #4380	; 0x111c
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d904      	bls.n	8009b74 <tcp_process+0x478>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b6e:	005b      	lsls	r3, r3, #1
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	e001      	b.n	8009b78 <tcp_process+0x47c>
 8009b74:	f241 131c 	movw	r3, #4380	; 0x111c
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009b7e:	4b4e      	ldr	r3, [pc, #312]	; (8009cb8 <tcp_process+0x5bc>)
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d037      	beq.n	8009bfa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	8b5b      	ldrh	r3, [r3, #26]
 8009b8e:	f043 0302 	orr.w	r3, r3, #2
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2207      	movs	r2, #7
 8009b9c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009b9e:	e02c      	b.n	8009bfa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ba0:	4b3b      	ldr	r3, [pc, #236]	; (8009c90 <tcp_process+0x594>)
 8009ba2:	6819      	ldr	r1, [r3, #0]
 8009ba4:	4b3b      	ldr	r3, [pc, #236]	; (8009c94 <tcp_process+0x598>)
 8009ba6:	881b      	ldrh	r3, [r3, #0]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	4b3b      	ldr	r3, [pc, #236]	; (8009c98 <tcp_process+0x59c>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009bb0:	4b3a      	ldr	r3, [pc, #232]	; (8009c9c <tcp_process+0x5a0>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bb4:	885b      	ldrh	r3, [r3, #2]
 8009bb6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009bb8:	4a38      	ldr	r2, [pc, #224]	; (8009c9c <tcp_process+0x5a0>)
 8009bba:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bbc:	8812      	ldrh	r2, [r2, #0]
 8009bbe:	b292      	uxth	r2, r2
 8009bc0:	9202      	str	r2, [sp, #8]
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	4b36      	ldr	r3, [pc, #216]	; (8009ca0 <tcp_process+0x5a4>)
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	4b36      	ldr	r3, [pc, #216]	; (8009ca4 <tcp_process+0x5a8>)
 8009bca:	4602      	mov	r2, r0
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f002 fbd1 	bl	800c374 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009bd2:	e167      	b.n	8009ea4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009bd4:	4b2d      	ldr	r3, [pc, #180]	; (8009c8c <tcp_process+0x590>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	f003 0302 	and.w	r3, r3, #2
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 8161 	beq.w	8009ea4 <tcp_process+0x7a8>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be6:	1e5a      	subs	r2, r3, #1
 8009be8:	4b2b      	ldr	r3, [pc, #172]	; (8009c98 <tcp_process+0x59c>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	f040 8159 	bne.w	8009ea4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f002 f9b6 	bl	800bf64 <tcp_rexmit>
      break;
 8009bf8:	e154      	b.n	8009ea4 <tcp_process+0x7a8>
 8009bfa:	e153      	b.n	8009ea4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fa71 	bl	800a0e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009c02:	4b2d      	ldr	r3, [pc, #180]	; (8009cb8 <tcp_process+0x5bc>)
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	f003 0320 	and.w	r3, r3, #32
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 814c 	beq.w	8009ea8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	8b5b      	ldrh	r3, [r3, #26]
 8009c14:	f043 0302 	orr.w	r3, r3, #2
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2207      	movs	r2, #7
 8009c22:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009c24:	e140      	b.n	8009ea8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa5c 	bl	800a0e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009c2c:	4b22      	ldr	r3, [pc, #136]	; (8009cb8 <tcp_process+0x5bc>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	f003 0320 	and.w	r3, r3, #32
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d071      	beq.n	8009d1c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c38:	4b14      	ldr	r3, [pc, #80]	; (8009c8c <tcp_process+0x590>)
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	f003 0310 	and.w	r3, r3, #16
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d060      	beq.n	8009d06 <tcp_process+0x60a>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c48:	4b11      	ldr	r3, [pc, #68]	; (8009c90 <tcp_process+0x594>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d15a      	bne.n	8009d06 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d156      	bne.n	8009d06 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	8b5b      	ldrh	r3, [r3, #26]
 8009c5c:	f043 0302 	orr.w	r3, r3, #2
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7fe fdbc 	bl	80087e4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009c6c:	4b13      	ldr	r3, [pc, #76]	; (8009cbc <tcp_process+0x5c0>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d105      	bne.n	8009c82 <tcp_process+0x586>
 8009c76:	4b11      	ldr	r3, [pc, #68]	; (8009cbc <tcp_process+0x5c0>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	4a0f      	ldr	r2, [pc, #60]	; (8009cbc <tcp_process+0x5c0>)
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	e02e      	b.n	8009ce0 <tcp_process+0x5e4>
 8009c82:	4b0e      	ldr	r3, [pc, #56]	; (8009cbc <tcp_process+0x5c0>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	617b      	str	r3, [r7, #20]
 8009c88:	e027      	b.n	8009cda <tcp_process+0x5de>
 8009c8a:	bf00      	nop
 8009c8c:	20008a20 	.word	0x20008a20
 8009c90:	20008a18 	.word	0x20008a18
 8009c94:	20008a1e 	.word	0x20008a1e
 8009c98:	20008a14 	.word	0x20008a14
 8009c9c:	20008a04 	.word	0x20008a04
 8009ca0:	200032bc 	.word	0x200032bc
 8009ca4:	200032c0 	.word	0x200032c0
 8009ca8:	0801172c 	.word	0x0801172c
 8009cac:	080119cc 	.word	0x080119cc
 8009cb0:	08011778 	.word	0x08011778
 8009cb4:	20008a1c 	.word	0x20008a1c
 8009cb8:	20008a21 	.word	0x20008a21
 8009cbc:	200089e8 	.word	0x200089e8
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d104      	bne.n	8009cd4 <tcp_process+0x5d8>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	68da      	ldr	r2, [r3, #12]
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	60da      	str	r2, [r3, #12]
 8009cd2:	e005      	b.n	8009ce0 <tcp_process+0x5e4>
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	617b      	str	r3, [r7, #20]
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1ef      	bne.n	8009cc0 <tcp_process+0x5c4>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	60da      	str	r2, [r3, #12]
 8009ce6:	4b77      	ldr	r3, [pc, #476]	; (8009ec4 <tcp_process+0x7c8>)
 8009ce8:	2201      	movs	r2, #1
 8009cea:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	220a      	movs	r2, #10
 8009cf0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009cf2:	4b75      	ldr	r3, [pc, #468]	; (8009ec8 <tcp_process+0x7cc>)
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	60da      	str	r2, [r3, #12]
 8009cfa:	4a73      	ldr	r2, [pc, #460]	; (8009ec8 <tcp_process+0x7cc>)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	f002 fcfa 	bl	800c6f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009d04:	e0d2      	b.n	8009eac <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	8b5b      	ldrh	r3, [r3, #26]
 8009d0a:	f043 0302 	orr.w	r3, r3, #2
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2208      	movs	r2, #8
 8009d18:	751a      	strb	r2, [r3, #20]
      break;
 8009d1a:	e0c7      	b.n	8009eac <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d1c:	4b6b      	ldr	r3, [pc, #428]	; (8009ecc <tcp_process+0x7d0>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	f003 0310 	and.w	r3, r3, #16
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 80c1 	beq.w	8009eac <tcp_process+0x7b0>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d2e:	4b68      	ldr	r3, [pc, #416]	; (8009ed0 <tcp_process+0x7d4>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	f040 80ba 	bne.w	8009eac <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f040 80b5 	bne.w	8009eac <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2206      	movs	r2, #6
 8009d46:	751a      	strb	r2, [r3, #20]
      break;
 8009d48:	e0b0      	b.n	8009eac <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f9ca 	bl	800a0e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009d50:	4b60      	ldr	r3, [pc, #384]	; (8009ed4 <tcp_process+0x7d8>)
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	f003 0320 	and.w	r3, r3, #32
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 80a9 	beq.w	8009eb0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	8b5b      	ldrh	r3, [r3, #26]
 8009d62:	f043 0302 	orr.w	r3, r3, #2
 8009d66:	b29a      	uxth	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f7fe fd39 	bl	80087e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009d72:	4b59      	ldr	r3, [pc, #356]	; (8009ed8 <tcp_process+0x7dc>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d105      	bne.n	8009d88 <tcp_process+0x68c>
 8009d7c:	4b56      	ldr	r3, [pc, #344]	; (8009ed8 <tcp_process+0x7dc>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	4a55      	ldr	r2, [pc, #340]	; (8009ed8 <tcp_process+0x7dc>)
 8009d84:	6013      	str	r3, [r2, #0]
 8009d86:	e013      	b.n	8009db0 <tcp_process+0x6b4>
 8009d88:	4b53      	ldr	r3, [pc, #332]	; (8009ed8 <tcp_process+0x7dc>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	613b      	str	r3, [r7, #16]
 8009d8e:	e00c      	b.n	8009daa <tcp_process+0x6ae>
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d104      	bne.n	8009da4 <tcp_process+0x6a8>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68da      	ldr	r2, [r3, #12]
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	60da      	str	r2, [r3, #12]
 8009da2:	e005      	b.n	8009db0 <tcp_process+0x6b4>
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	613b      	str	r3, [r7, #16]
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1ef      	bne.n	8009d90 <tcp_process+0x694>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	60da      	str	r2, [r3, #12]
 8009db6:	4b43      	ldr	r3, [pc, #268]	; (8009ec4 <tcp_process+0x7c8>)
 8009db8:	2201      	movs	r2, #1
 8009dba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	220a      	movs	r2, #10
 8009dc0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009dc2:	4b41      	ldr	r3, [pc, #260]	; (8009ec8 <tcp_process+0x7cc>)
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	60da      	str	r2, [r3, #12]
 8009dca:	4a3f      	ldr	r2, [pc, #252]	; (8009ec8 <tcp_process+0x7cc>)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	f002 fc92 	bl	800c6f8 <tcp_timer_needed>
      }
      break;
 8009dd4:	e06c      	b.n	8009eb0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f984 	bl	800a0e4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009ddc:	4b3b      	ldr	r3, [pc, #236]	; (8009ecc <tcp_process+0x7d0>)
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	f003 0310 	and.w	r3, r3, #16
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d065      	beq.n	8009eb4 <tcp_process+0x7b8>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009dec:	4b38      	ldr	r3, [pc, #224]	; (8009ed0 <tcp_process+0x7d4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d15f      	bne.n	8009eb4 <tcp_process+0x7b8>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d15b      	bne.n	8009eb4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f7fe fcf1 	bl	80087e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009e02:	4b35      	ldr	r3, [pc, #212]	; (8009ed8 <tcp_process+0x7dc>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d105      	bne.n	8009e18 <tcp_process+0x71c>
 8009e0c:	4b32      	ldr	r3, [pc, #200]	; (8009ed8 <tcp_process+0x7dc>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	4a31      	ldr	r2, [pc, #196]	; (8009ed8 <tcp_process+0x7dc>)
 8009e14:	6013      	str	r3, [r2, #0]
 8009e16:	e013      	b.n	8009e40 <tcp_process+0x744>
 8009e18:	4b2f      	ldr	r3, [pc, #188]	; (8009ed8 <tcp_process+0x7dc>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	e00c      	b.n	8009e3a <tcp_process+0x73e>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d104      	bne.n	8009e34 <tcp_process+0x738>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	68da      	ldr	r2, [r3, #12]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	60da      	str	r2, [r3, #12]
 8009e32:	e005      	b.n	8009e40 <tcp_process+0x744>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	60fb      	str	r3, [r7, #12]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1ef      	bne.n	8009e20 <tcp_process+0x724>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	60da      	str	r2, [r3, #12]
 8009e46:	4b1f      	ldr	r3, [pc, #124]	; (8009ec4 <tcp_process+0x7c8>)
 8009e48:	2201      	movs	r2, #1
 8009e4a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	220a      	movs	r2, #10
 8009e50:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009e52:	4b1d      	ldr	r3, [pc, #116]	; (8009ec8 <tcp_process+0x7cc>)
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	60da      	str	r2, [r3, #12]
 8009e5a:	4a1b      	ldr	r2, [pc, #108]	; (8009ec8 <tcp_process+0x7cc>)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	f002 fc4a 	bl	800c6f8 <tcp_timer_needed>
      }
      break;
 8009e64:	e026      	b.n	8009eb4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f93c 	bl	800a0e4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009e6c:	4b17      	ldr	r3, [pc, #92]	; (8009ecc <tcp_process+0x7d0>)
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	f003 0310 	and.w	r3, r3, #16
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d01f      	beq.n	8009eb8 <tcp_process+0x7bc>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e7c:	4b14      	ldr	r3, [pc, #80]	; (8009ed0 <tcp_process+0x7d4>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d119      	bne.n	8009eb8 <tcp_process+0x7bc>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d115      	bne.n	8009eb8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009e8c:	4b11      	ldr	r3, [pc, #68]	; (8009ed4 <tcp_process+0x7d8>)
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	f043 0310 	orr.w	r3, r3, #16
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	4b0f      	ldr	r3, [pc, #60]	; (8009ed4 <tcp_process+0x7d8>)
 8009e98:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009e9a:	e00d      	b.n	8009eb8 <tcp_process+0x7bc>
    default:
      break;
 8009e9c:	bf00      	nop
 8009e9e:	e00c      	b.n	8009eba <tcp_process+0x7be>
      break;
 8009ea0:	bf00      	nop
 8009ea2:	e00a      	b.n	8009eba <tcp_process+0x7be>
      break;
 8009ea4:	bf00      	nop
 8009ea6:	e008      	b.n	8009eba <tcp_process+0x7be>
      break;
 8009ea8:	bf00      	nop
 8009eaa:	e006      	b.n	8009eba <tcp_process+0x7be>
      break;
 8009eac:	bf00      	nop
 8009eae:	e004      	b.n	8009eba <tcp_process+0x7be>
      break;
 8009eb0:	bf00      	nop
 8009eb2:	e002      	b.n	8009eba <tcp_process+0x7be>
      break;
 8009eb4:	bf00      	nop
 8009eb6:	e000      	b.n	8009eba <tcp_process+0x7be>
      break;
 8009eb8:	bf00      	nop
  }
  return ERR_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3724      	adds	r7, #36	; 0x24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd90      	pop	{r4, r7, pc}
 8009ec4:	200089f0 	.word	0x200089f0
 8009ec8:	200089ec 	.word	0x200089ec
 8009ecc:	20008a20 	.word	0x20008a20
 8009ed0:	20008a18 	.word	0x20008a18
 8009ed4:	20008a21 	.word	0x20008a21
 8009ed8:	200089e8 	.word	0x200089e8

08009edc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009edc:	b590      	push	{r4, r7, lr}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d106      	bne.n	8009efa <tcp_oos_insert_segment+0x1e>
 8009eec:	4b3b      	ldr	r3, [pc, #236]	; (8009fdc <tcp_oos_insert_segment+0x100>)
 8009eee:	f240 421f 	movw	r2, #1055	; 0x41f
 8009ef2:	493b      	ldr	r1, [pc, #236]	; (8009fe0 <tcp_oos_insert_segment+0x104>)
 8009ef4:	483b      	ldr	r0, [pc, #236]	; (8009fe4 <tcp_oos_insert_segment+0x108>)
 8009ef6:	f005 fa61 	bl	800f3bc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	899b      	ldrh	r3, [r3, #12]
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fb fb6c 	bl	80055e0 <lwip_htons>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	f003 0301 	and.w	r3, r3, #1
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d028      	beq.n	8009f66 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009f14:	6838      	ldr	r0, [r7, #0]
 8009f16:	f7fe f9b3 	bl	8008280 <tcp_segs_free>
    next = NULL;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	603b      	str	r3, [r7, #0]
 8009f1e:	e056      	b.n	8009fce <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	899b      	ldrh	r3, [r3, #12]
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7fb fb59 	bl	80055e0 <lwip_htons>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	f003 0301 	and.w	r3, r3, #1
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00d      	beq.n	8009f56 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	899b      	ldrh	r3, [r3, #12]
 8009f40:	b29c      	uxth	r4, r3
 8009f42:	2001      	movs	r0, #1
 8009f44:	f7fb fb4c 	bl	80055e0 <lwip_htons>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	4322      	orrs	r2, r4
 8009f52:	b292      	uxth	r2, r2
 8009f54:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f7fe f9a2 	bl	80082aa <tcp_seg_free>
    while (next &&
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00e      	beq.n	8009f8a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	891b      	ldrh	r3, [r3, #8]
 8009f70:	461a      	mov	r2, r3
 8009f72:	4b1d      	ldr	r3, [pc, #116]	; (8009fe8 <tcp_oos_insert_segment+0x10c>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	441a      	add	r2, r3
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	8909      	ldrh	r1, [r1, #8]
 8009f82:	440b      	add	r3, r1
 8009f84:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	daca      	bge.n	8009f20 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d01e      	beq.n	8009fce <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	891b      	ldrh	r3, [r3, #8]
 8009f94:	461a      	mov	r2, r3
 8009f96:	4b14      	ldr	r3, [pc, #80]	; (8009fe8 <tcp_oos_insert_segment+0x10c>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	441a      	add	r2, r3
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	dd12      	ble.n	8009fce <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	4b0d      	ldr	r3, [pc, #52]	; (8009fe8 <tcp_oos_insert_segment+0x10c>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685a      	ldr	r2, [r3, #4]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	891b      	ldrh	r3, [r3, #8]
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	4610      	mov	r0, r2
 8009fca:	f7fc fc17 	bl	80067fc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	683a      	ldr	r2, [r7, #0]
 8009fd2:	601a      	str	r2, [r3, #0]
}
 8009fd4:	bf00      	nop
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd90      	pop	{r4, r7, pc}
 8009fdc:	0801172c 	.word	0x0801172c
 8009fe0:	080119ec 	.word	0x080119ec
 8009fe4:	08011778 	.word	0x08011778
 8009fe8:	20008a14 	.word	0x20008a14

08009fec <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009fec:	b5b0      	push	{r4, r5, r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
 8009ff8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009ffa:	e03e      	b.n	800a07a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fc fe04 	bl	8006c18 <pbuf_clen>
 800a010:	4603      	mov	r3, r0
 800a012:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a01a:	8a7a      	ldrh	r2, [r7, #18]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d906      	bls.n	800a02e <tcp_free_acked_segments+0x42>
 800a020:	4b2a      	ldr	r3, [pc, #168]	; (800a0cc <tcp_free_acked_segments+0xe0>)
 800a022:	f240 4257 	movw	r2, #1111	; 0x457
 800a026:	492a      	ldr	r1, [pc, #168]	; (800a0d0 <tcp_free_acked_segments+0xe4>)
 800a028:	482a      	ldr	r0, [pc, #168]	; (800a0d4 <tcp_free_acked_segments+0xe8>)
 800a02a:	f005 f9c7 	bl	800f3bc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a034:	8a7b      	ldrh	r3, [r7, #18]
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	b29a      	uxth	r2, r3
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	891a      	ldrh	r2, [r3, #8]
 800a044:	4b24      	ldr	r3, [pc, #144]	; (800a0d8 <tcp_free_acked_segments+0xec>)
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	4413      	add	r3, r2
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	4b22      	ldr	r3, [pc, #136]	; (800a0d8 <tcp_free_acked_segments+0xec>)
 800a04e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a050:	6978      	ldr	r0, [r7, #20]
 800a052:	f7fe f92a 	bl	80082aa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00c      	beq.n	800a07a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d109      	bne.n	800a07a <tcp_free_acked_segments+0x8e>
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d106      	bne.n	800a07a <tcp_free_acked_segments+0x8e>
 800a06c:	4b17      	ldr	r3, [pc, #92]	; (800a0cc <tcp_free_acked_segments+0xe0>)
 800a06e:	f240 4261 	movw	r2, #1121	; 0x461
 800a072:	491a      	ldr	r1, [pc, #104]	; (800a0dc <tcp_free_acked_segments+0xf0>)
 800a074:	4817      	ldr	r0, [pc, #92]	; (800a0d4 <tcp_free_acked_segments+0xe8>)
 800a076:	f005 f9a1 	bl	800f3bc <iprintf>
  while (seg_list != NULL &&
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d020      	beq.n	800a0c2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	4618      	mov	r0, r3
 800a088:	f7fb fabf 	bl	800560a <lwip_htonl>
 800a08c:	4604      	mov	r4, r0
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	891b      	ldrh	r3, [r3, #8]
 800a092:	461d      	mov	r5, r3
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	899b      	ldrh	r3, [r3, #12]
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fb fa9f 	bl	80055e0 <lwip_htons>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	f003 0303 	and.w	r3, r3, #3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <tcp_free_acked_segments+0xc6>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e000      	b.n	800a0b4 <tcp_free_acked_segments+0xc8>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	442b      	add	r3, r5
 800a0b6:	18e2      	adds	r2, r4, r3
 800a0b8:	4b09      	ldr	r3, [pc, #36]	; (800a0e0 <tcp_free_acked_segments+0xf4>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	dd9c      	ble.n	8009ffc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bdb0      	pop	{r4, r5, r7, pc}
 800a0cc:	0801172c 	.word	0x0801172c
 800a0d0:	08011a14 	.word	0x08011a14
 800a0d4:	08011778 	.word	0x08011778
 800a0d8:	20008a1c 	.word	0x20008a1c
 800a0dc:	08011a3c 	.word	0x08011a3c
 800a0e0:	20008a18 	.word	0x20008a18

0800a0e4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a0e4:	b5b0      	push	{r4, r5, r7, lr}
 800a0e6:	b094      	sub	sp, #80	; 0x50
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d106      	bne.n	800a104 <tcp_receive+0x20>
 800a0f6:	4b91      	ldr	r3, [pc, #580]	; (800a33c <tcp_receive+0x258>)
 800a0f8:	f240 427b 	movw	r2, #1147	; 0x47b
 800a0fc:	4990      	ldr	r1, [pc, #576]	; (800a340 <tcp_receive+0x25c>)
 800a0fe:	4891      	ldr	r0, [pc, #580]	; (800a344 <tcp_receive+0x260>)
 800a100:	f005 f95c 	bl	800f3bc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	7d1b      	ldrb	r3, [r3, #20]
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d806      	bhi.n	800a11a <tcp_receive+0x36>
 800a10c:	4b8b      	ldr	r3, [pc, #556]	; (800a33c <tcp_receive+0x258>)
 800a10e:	f240 427c 	movw	r2, #1148	; 0x47c
 800a112:	498d      	ldr	r1, [pc, #564]	; (800a348 <tcp_receive+0x264>)
 800a114:	488b      	ldr	r0, [pc, #556]	; (800a344 <tcp_receive+0x260>)
 800a116:	f005 f951 	bl	800f3bc <iprintf>

  if (flags & TCP_ACK) {
 800a11a:	4b8c      	ldr	r3, [pc, #560]	; (800a34c <tcp_receive+0x268>)
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	f003 0310 	and.w	r3, r3, #16
 800a122:	2b00      	cmp	r3, #0
 800a124:	f000 8264 	beq.w	800a5f0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a12e:	461a      	mov	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a134:	4413      	add	r3, r2
 800a136:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a13c:	4b84      	ldr	r3, [pc, #528]	; (800a350 <tcp_receive+0x26c>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	db1b      	blt.n	800a17e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a14a:	4b81      	ldr	r3, [pc, #516]	; (800a350 <tcp_receive+0x26c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a14e:	429a      	cmp	r2, r3
 800a150:	d106      	bne.n	800a160 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a156:	4b7f      	ldr	r3, [pc, #508]	; (800a354 <tcp_receive+0x270>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	1ad3      	subs	r3, r2, r3
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	db0e      	blt.n	800a17e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a164:	4b7b      	ldr	r3, [pc, #492]	; (800a354 <tcp_receive+0x270>)
 800a166:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a168:	429a      	cmp	r2, r3
 800a16a:	d125      	bne.n	800a1b8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a16c:	4b7a      	ldr	r3, [pc, #488]	; (800a358 <tcp_receive+0x274>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	89db      	ldrh	r3, [r3, #14]
 800a172:	b29a      	uxth	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d91c      	bls.n	800a1b8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a17e:	4b76      	ldr	r3, [pc, #472]	; (800a358 <tcp_receive+0x274>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	89db      	ldrh	r3, [r3, #14]
 800a184:	b29a      	uxth	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a198:	429a      	cmp	r2, r3
 800a19a:	d205      	bcs.n	800a1a8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a1a8:	4b69      	ldr	r3, [pc, #420]	; (800a350 <tcp_receive+0x26c>)
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a1b0:	4b68      	ldr	r3, [pc, #416]	; (800a354 <tcp_receive+0x270>)
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a1b8:	4b66      	ldr	r3, [pc, #408]	; (800a354 <tcp_receive+0x270>)
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	dc58      	bgt.n	800a278 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a1c6:	4b65      	ldr	r3, [pc, #404]	; (800a35c <tcp_receive+0x278>)
 800a1c8:	881b      	ldrh	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d14b      	bne.n	800a266 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a1d8:	4413      	add	r3, r2
 800a1da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d142      	bne.n	800a266 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	db3d      	blt.n	800a266 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1ee:	4b59      	ldr	r3, [pc, #356]	; (800a354 <tcp_receive+0x270>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d137      	bne.n	800a266 <tcp_receive+0x182>
              found_dupack = 1;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a200:	2bff      	cmp	r3, #255	; 0xff
 800a202:	d007      	beq.n	800a214 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a20a:	3301      	adds	r3, #1
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a21a:	2b03      	cmp	r3, #3
 800a21c:	d91b      	bls.n	800a256 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a228:	4413      	add	r3, r2
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a232:	429a      	cmp	r2, r3
 800a234:	d30a      	bcc.n	800a24c <tcp_receive+0x168>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a240:	4413      	add	r3, r2
 800a242:	b29a      	uxth	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a24a:	e004      	b.n	800a256 <tcp_receive+0x172>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a252:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d902      	bls.n	800a266 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f001 feeb 	bl	800c03c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f040 8161 	bne.w	800a530 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a276:	e15b      	b.n	800a530 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a278:	4b36      	ldr	r3, [pc, #216]	; (800a354 <tcp_receive+0x270>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	3b01      	subs	r3, #1
 800a284:	2b00      	cmp	r3, #0
 800a286:	f2c0 814e 	blt.w	800a526 <tcp_receive+0x442>
 800a28a:	4b32      	ldr	r3, [pc, #200]	; (800a354 <tcp_receive+0x270>)
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	2b00      	cmp	r3, #0
 800a296:	f300 8146 	bgt.w	800a526 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	8b5b      	ldrh	r3, [r3, #26]
 800a29e:	f003 0304 	and.w	r3, r3, #4
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d010      	beq.n	800a2c8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	8b5b      	ldrh	r3, [r3, #26]
 800a2aa:	f023 0304 	bic.w	r3, r3, #4
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a2d6:	10db      	asrs	r3, r3, #3
 800a2d8:	b21b      	sxth	r3, r3
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	4413      	add	r3, r2
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	b21a      	sxth	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a2f0:	4b18      	ldr	r3, [pc, #96]	; (800a354 <tcp_receive+0x270>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	1ad3      	subs	r3, r2, r3
 800a2fe:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a308:	4b12      	ldr	r3, [pc, #72]	; (800a354 <tcp_receive+0x270>)
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	7d1b      	ldrb	r3, [r3, #20]
 800a314:	2b03      	cmp	r3, #3
 800a316:	f240 8097 	bls.w	800a448 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a326:	429a      	cmp	r2, r3
 800a328:	d245      	bcs.n	800a3b6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	8b5b      	ldrh	r3, [r3, #26]
 800a32e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a332:	2b00      	cmp	r3, #0
 800a334:	d014      	beq.n	800a360 <tcp_receive+0x27c>
 800a336:	2301      	movs	r3, #1
 800a338:	e013      	b.n	800a362 <tcp_receive+0x27e>
 800a33a:	bf00      	nop
 800a33c:	0801172c 	.word	0x0801172c
 800a340:	08011a5c 	.word	0x08011a5c
 800a344:	08011778 	.word	0x08011778
 800a348:	08011a78 	.word	0x08011a78
 800a34c:	20008a20 	.word	0x20008a20
 800a350:	20008a14 	.word	0x20008a14
 800a354:	20008a18 	.word	0x20008a18
 800a358:	20008a04 	.word	0x20008a04
 800a35c:	20008a1e 	.word	0x20008a1e
 800a360:	2302      	movs	r3, #2
 800a362:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a366:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a370:	fb12 f303 	smulbb	r3, r2, r3
 800a374:	b29b      	uxth	r3, r3
 800a376:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a378:	4293      	cmp	r3, r2
 800a37a:	bf28      	it	cs
 800a37c:	4613      	movcs	r3, r2
 800a37e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a386:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a388:	4413      	add	r3, r2
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a392:	429a      	cmp	r2, r3
 800a394:	d309      	bcc.n	800a3aa <tcp_receive+0x2c6>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a39c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a39e:	4413      	add	r3, r2
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a3a8:	e04e      	b.n	800a448 <tcp_receive+0x364>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a3b4:	e048      	b.n	800a448 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a3bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3be:	4413      	add	r3, r2
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d309      	bcc.n	800a3e0 <tcp_receive+0x2fc>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a3d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3d4:	4413      	add	r3, r2
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a3de:	e004      	b.n	800a3ea <tcp_receive+0x306>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d326      	bcc.n	800a448 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	b29a      	uxth	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a41a:	4413      	add	r3, r2
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a424:	429a      	cmp	r2, r3
 800a426:	d30a      	bcc.n	800a43e <tcp_receive+0x35a>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a432:	4413      	add	r3, r2
 800a434:	b29a      	uxth	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a43c:	e004      	b.n	800a448 <tcp_receive+0x364>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a444:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a450:	4a98      	ldr	r2, [pc, #608]	; (800a6b4 <tcp_receive+0x5d0>)
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7ff fdca 	bl	8009fec <tcp_free_acked_segments>
 800a458:	4602      	mov	r2, r0
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a466:	4a94      	ldr	r2, [pc, #592]	; (800a6b8 <tcp_receive+0x5d4>)
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff fdbf 	bl	8009fec <tcp_free_acked_segments>
 800a46e:	4602      	mov	r2, r0
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d104      	bne.n	800a486 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a482:	861a      	strh	r2, [r3, #48]	; 0x30
 800a484:	e002      	b.n	800a48c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a496:	2b00      	cmp	r3, #0
 800a498:	d103      	bne.n	800a4a2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a4a8:	4b84      	ldr	r3, [pc, #528]	; (800a6bc <tcp_receive+0x5d8>)
 800a4aa:	881b      	ldrh	r3, [r3, #0]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	8b5b      	ldrh	r3, [r3, #26]
 800a4ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d035      	beq.n	800a52e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d118      	bne.n	800a4fc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00c      	beq.n	800a4ec <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fb f893 	bl	800560a <lwip_htonl>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	dc20      	bgt.n	800a52e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	8b5b      	ldrh	r3, [r3, #26]
 800a4f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a4fa:	e018      	b.n	800a52e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fb f87e 	bl	800560a <lwip_htonl>
 800a50e:	4603      	mov	r3, r0
 800a510:	1ae3      	subs	r3, r4, r3
 800a512:	2b00      	cmp	r3, #0
 800a514:	dc0b      	bgt.n	800a52e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	8b5b      	ldrh	r3, [r3, #26]
 800a51a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a51e:	b29a      	uxth	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a524:	e003      	b.n	800a52e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f001 ff76 	bl	800c418 <tcp_send_empty_ack>
 800a52c:	e000      	b.n	800a530 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a52e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a534:	2b00      	cmp	r3, #0
 800a536:	d05b      	beq.n	800a5f0 <tcp_receive+0x50c>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a53c:	4b60      	ldr	r3, [pc, #384]	; (800a6c0 <tcp_receive+0x5dc>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	da54      	bge.n	800a5f0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a546:	4b5f      	ldr	r3, [pc, #380]	; (800a6c4 <tcp_receive+0x5e0>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a550:	b29b      	uxth	r3, r3
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	b29b      	uxth	r3, r3
 800a556:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a55a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a564:	10db      	asrs	r3, r3, #3
 800a566:	b21b      	sxth	r3, r3
 800a568:	b29b      	uxth	r3, r3
 800a56a:	1ad3      	subs	r3, r2, r3
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a578:	b29a      	uxth	r2, r3
 800a57a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a57e:	4413      	add	r3, r2
 800a580:	b29b      	uxth	r3, r3
 800a582:	b21a      	sxth	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a588:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	da05      	bge.n	800a59c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a590:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a594:	425b      	negs	r3, r3
 800a596:	b29b      	uxth	r3, r3
 800a598:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a59c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a5a6:	109b      	asrs	r3, r3, #2
 800a5a8:	b21b      	sxth	r3, r3
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a5c0:	4413      	add	r3, r2
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	b21a      	sxth	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a5d0:	10db      	asrs	r3, r3, #3
 800a5d2:	b21b      	sxth	r3, r3
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	4413      	add	r3, r2
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	b21a      	sxth	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a5f0:	4b35      	ldr	r3, [pc, #212]	; (800a6c8 <tcp_receive+0x5e4>)
 800a5f2:	881b      	ldrh	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f000 84e2 	beq.w	800afbe <tcp_receive+0xeda>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	7d1b      	ldrb	r3, [r3, #20]
 800a5fe:	2b06      	cmp	r3, #6
 800a600:	f200 84dd 	bhi.w	800afbe <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a608:	4b30      	ldr	r3, [pc, #192]	; (800a6cc <tcp_receive+0x5e8>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	3b01      	subs	r3, #1
 800a610:	2b00      	cmp	r3, #0
 800a612:	f2c0 808f 	blt.w	800a734 <tcp_receive+0x650>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a61a:	4b2b      	ldr	r3, [pc, #172]	; (800a6c8 <tcp_receive+0x5e4>)
 800a61c:	881b      	ldrh	r3, [r3, #0]
 800a61e:	4619      	mov	r1, r3
 800a620:	4b2a      	ldr	r3, [pc, #168]	; (800a6cc <tcp_receive+0x5e8>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	440b      	add	r3, r1
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	3301      	adds	r3, #1
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f300 8082 	bgt.w	800a734 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a630:	4b27      	ldr	r3, [pc, #156]	; (800a6d0 <tcp_receive+0x5ec>)
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a63a:	4b24      	ldr	r3, [pc, #144]	; (800a6cc <tcp_receive+0x5e8>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a642:	4b23      	ldr	r3, [pc, #140]	; (800a6d0 <tcp_receive+0x5ec>)
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d106      	bne.n	800a658 <tcp_receive+0x574>
 800a64a:	4b22      	ldr	r3, [pc, #136]	; (800a6d4 <tcp_receive+0x5f0>)
 800a64c:	f240 5294 	movw	r2, #1428	; 0x594
 800a650:	4921      	ldr	r1, [pc, #132]	; (800a6d8 <tcp_receive+0x5f4>)
 800a652:	4822      	ldr	r0, [pc, #136]	; (800a6dc <tcp_receive+0x5f8>)
 800a654:	f004 feb2 	bl	800f3bc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a65e:	4293      	cmp	r3, r2
 800a660:	d906      	bls.n	800a670 <tcp_receive+0x58c>
 800a662:	4b1c      	ldr	r3, [pc, #112]	; (800a6d4 <tcp_receive+0x5f0>)
 800a664:	f240 5295 	movw	r2, #1429	; 0x595
 800a668:	491d      	ldr	r1, [pc, #116]	; (800a6e0 <tcp_receive+0x5fc>)
 800a66a:	481c      	ldr	r0, [pc, #112]	; (800a6dc <tcp_receive+0x5f8>)
 800a66c:	f004 fea6 	bl	800f3bc <iprintf>
      off = (u16_t)off32;
 800a670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a672:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a676:	4b16      	ldr	r3, [pc, #88]	; (800a6d0 <tcp_receive+0x5ec>)
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	891b      	ldrh	r3, [r3, #8]
 800a67c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a680:	429a      	cmp	r2, r3
 800a682:	d906      	bls.n	800a692 <tcp_receive+0x5ae>
 800a684:	4b13      	ldr	r3, [pc, #76]	; (800a6d4 <tcp_receive+0x5f0>)
 800a686:	f240 5297 	movw	r2, #1431	; 0x597
 800a68a:	4916      	ldr	r1, [pc, #88]	; (800a6e4 <tcp_receive+0x600>)
 800a68c:	4813      	ldr	r0, [pc, #76]	; (800a6dc <tcp_receive+0x5f8>)
 800a68e:	f004 fe95 	bl	800f3bc <iprintf>
      inseg.len -= off;
 800a692:	4b0f      	ldr	r3, [pc, #60]	; (800a6d0 <tcp_receive+0x5ec>)
 800a694:	891a      	ldrh	r2, [r3, #8]
 800a696:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	b29a      	uxth	r2, r3
 800a69e:	4b0c      	ldr	r3, [pc, #48]	; (800a6d0 <tcp_receive+0x5ec>)
 800a6a0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a6a2:	4b0b      	ldr	r3, [pc, #44]	; (800a6d0 <tcp_receive+0x5ec>)
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	891a      	ldrh	r2, [r3, #8]
 800a6a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a6b0:	e02a      	b.n	800a708 <tcp_receive+0x624>
 800a6b2:	bf00      	nop
 800a6b4:	08011a94 	.word	0x08011a94
 800a6b8:	08011a9c 	.word	0x08011a9c
 800a6bc:	20008a1c 	.word	0x20008a1c
 800a6c0:	20008a18 	.word	0x20008a18
 800a6c4:	200089dc 	.word	0x200089dc
 800a6c8:	20008a1e 	.word	0x20008a1e
 800a6cc:	20008a14 	.word	0x20008a14
 800a6d0:	200089f4 	.word	0x200089f4
 800a6d4:	0801172c 	.word	0x0801172c
 800a6d8:	08011aa4 	.word	0x08011aa4
 800a6dc:	08011778 	.word	0x08011778
 800a6e0:	08011ab4 	.word	0x08011ab4
 800a6e4:	08011ac4 	.word	0x08011ac4
        off -= p->len;
 800a6e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6ea:	895b      	ldrh	r3, [r3, #10]
 800a6ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a6f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a6fa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a6fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6fe:	2200      	movs	r2, #0
 800a700:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a70a:	895b      	ldrh	r3, [r3, #10]
 800a70c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a710:	429a      	cmp	r2, r3
 800a712:	d8e9      	bhi.n	800a6e8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a714:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a718:	4619      	mov	r1, r3
 800a71a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a71c:	f7fc f96e 	bl	80069fc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a724:	4a91      	ldr	r2, [pc, #580]	; (800a96c <tcp_receive+0x888>)
 800a726:	6013      	str	r3, [r2, #0]
 800a728:	4b91      	ldr	r3, [pc, #580]	; (800a970 <tcp_receive+0x88c>)
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	4a8f      	ldr	r2, [pc, #572]	; (800a96c <tcp_receive+0x888>)
 800a72e:	6812      	ldr	r2, [r2, #0]
 800a730:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a732:	e00d      	b.n	800a750 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a734:	4b8d      	ldr	r3, [pc, #564]	; (800a96c <tcp_receive+0x888>)
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	2b00      	cmp	r3, #0
 800a740:	da06      	bge.n	800a750 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	8b5b      	ldrh	r3, [r3, #26]
 800a746:	f043 0302 	orr.w	r3, r3, #2
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a750:	4b86      	ldr	r3, [pc, #536]	; (800a96c <tcp_receive+0x888>)
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f2c0 842a 	blt.w	800afb4 <tcp_receive+0xed0>
 800a760:	4b82      	ldr	r3, [pc, #520]	; (800a96c <tcp_receive+0x888>)
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a768:	6879      	ldr	r1, [r7, #4]
 800a76a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a76c:	440b      	add	r3, r1
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	3301      	adds	r3, #1
 800a772:	2b00      	cmp	r3, #0
 800a774:	f300 841e 	bgt.w	800afb4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a77c:	4b7b      	ldr	r3, [pc, #492]	; (800a96c <tcp_receive+0x888>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	429a      	cmp	r2, r3
 800a782:	f040 829a 	bne.w	800acba <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a786:	4b7a      	ldr	r3, [pc, #488]	; (800a970 <tcp_receive+0x88c>)
 800a788:	891c      	ldrh	r4, [r3, #8]
 800a78a:	4b79      	ldr	r3, [pc, #484]	; (800a970 <tcp_receive+0x88c>)
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	899b      	ldrh	r3, [r3, #12]
 800a790:	b29b      	uxth	r3, r3
 800a792:	4618      	mov	r0, r3
 800a794:	f7fa ff24 	bl	80055e0 <lwip_htons>
 800a798:	4603      	mov	r3, r0
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	f003 0303 	and.w	r3, r3, #3
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d001      	beq.n	800a7a8 <tcp_receive+0x6c4>
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e000      	b.n	800a7aa <tcp_receive+0x6c6>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	4423      	add	r3, r4
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	4b71      	ldr	r3, [pc, #452]	; (800a974 <tcp_receive+0x890>)
 800a7b0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a7b6:	4b6f      	ldr	r3, [pc, #444]	; (800a974 <tcp_receive+0x890>)
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d275      	bcs.n	800a8aa <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a7be:	4b6c      	ldr	r3, [pc, #432]	; (800a970 <tcp_receive+0x88c>)
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	899b      	ldrh	r3, [r3, #12]
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fa ff0a 	bl	80055e0 <lwip_htons>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	f003 0301 	and.w	r3, r3, #1
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d01f      	beq.n	800a818 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a7d8:	4b65      	ldr	r3, [pc, #404]	; (800a970 <tcp_receive+0x88c>)
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	899b      	ldrh	r3, [r3, #12]
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	b21b      	sxth	r3, r3
 800a7e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a7e6:	b21c      	sxth	r4, r3
 800a7e8:	4b61      	ldr	r3, [pc, #388]	; (800a970 <tcp_receive+0x88c>)
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	899b      	ldrh	r3, [r3, #12]
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7fa fef5 	bl	80055e0 <lwip_htons>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a800:	b29b      	uxth	r3, r3
 800a802:	4618      	mov	r0, r3
 800a804:	f7fa feec 	bl	80055e0 <lwip_htons>
 800a808:	4603      	mov	r3, r0
 800a80a:	b21b      	sxth	r3, r3
 800a80c:	4323      	orrs	r3, r4
 800a80e:	b21a      	sxth	r2, r3
 800a810:	4b57      	ldr	r3, [pc, #348]	; (800a970 <tcp_receive+0x88c>)
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	b292      	uxth	r2, r2
 800a816:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a81c:	4b54      	ldr	r3, [pc, #336]	; (800a970 <tcp_receive+0x88c>)
 800a81e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a820:	4b53      	ldr	r3, [pc, #332]	; (800a970 <tcp_receive+0x88c>)
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	899b      	ldrh	r3, [r3, #12]
 800a826:	b29b      	uxth	r3, r3
 800a828:	4618      	mov	r0, r3
 800a82a:	f7fa fed9 	bl	80055e0 <lwip_htons>
 800a82e:	4603      	mov	r3, r0
 800a830:	b2db      	uxtb	r3, r3
 800a832:	f003 0302 	and.w	r3, r3, #2
 800a836:	2b00      	cmp	r3, #0
 800a838:	d005      	beq.n	800a846 <tcp_receive+0x762>
            inseg.len -= 1;
 800a83a:	4b4d      	ldr	r3, [pc, #308]	; (800a970 <tcp_receive+0x88c>)
 800a83c:	891b      	ldrh	r3, [r3, #8]
 800a83e:	3b01      	subs	r3, #1
 800a840:	b29a      	uxth	r2, r3
 800a842:	4b4b      	ldr	r3, [pc, #300]	; (800a970 <tcp_receive+0x88c>)
 800a844:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a846:	4b4a      	ldr	r3, [pc, #296]	; (800a970 <tcp_receive+0x88c>)
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	4a49      	ldr	r2, [pc, #292]	; (800a970 <tcp_receive+0x88c>)
 800a84c:	8912      	ldrh	r2, [r2, #8]
 800a84e:	4611      	mov	r1, r2
 800a850:	4618      	mov	r0, r3
 800a852:	f7fb ffd3 	bl	80067fc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a856:	4b46      	ldr	r3, [pc, #280]	; (800a970 <tcp_receive+0x88c>)
 800a858:	891c      	ldrh	r4, [r3, #8]
 800a85a:	4b45      	ldr	r3, [pc, #276]	; (800a970 <tcp_receive+0x88c>)
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	899b      	ldrh	r3, [r3, #12]
 800a860:	b29b      	uxth	r3, r3
 800a862:	4618      	mov	r0, r3
 800a864:	f7fa febc 	bl	80055e0 <lwip_htons>
 800a868:	4603      	mov	r3, r0
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	f003 0303 	and.w	r3, r3, #3
 800a870:	2b00      	cmp	r3, #0
 800a872:	d001      	beq.n	800a878 <tcp_receive+0x794>
 800a874:	2301      	movs	r3, #1
 800a876:	e000      	b.n	800a87a <tcp_receive+0x796>
 800a878:	2300      	movs	r3, #0
 800a87a:	4423      	add	r3, r4
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	4b3d      	ldr	r3, [pc, #244]	; (800a974 <tcp_receive+0x890>)
 800a880:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a882:	4b3c      	ldr	r3, [pc, #240]	; (800a974 <tcp_receive+0x890>)
 800a884:	881b      	ldrh	r3, [r3, #0]
 800a886:	461a      	mov	r2, r3
 800a888:	4b38      	ldr	r3, [pc, #224]	; (800a96c <tcp_receive+0x888>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	441a      	add	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a892:	6879      	ldr	r1, [r7, #4]
 800a894:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a896:	440b      	add	r3, r1
 800a898:	429a      	cmp	r2, r3
 800a89a:	d006      	beq.n	800a8aa <tcp_receive+0x7c6>
 800a89c:	4b36      	ldr	r3, [pc, #216]	; (800a978 <tcp_receive+0x894>)
 800a89e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a8a2:	4936      	ldr	r1, [pc, #216]	; (800a97c <tcp_receive+0x898>)
 800a8a4:	4836      	ldr	r0, [pc, #216]	; (800a980 <tcp_receive+0x89c>)
 800a8a6:	f004 fd89 	bl	800f3bc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f000 80e7 	beq.w	800aa82 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a8b4:	4b2e      	ldr	r3, [pc, #184]	; (800a970 <tcp_receive+0x88c>)
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	899b      	ldrh	r3, [r3, #12]
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fa fe8f 	bl	80055e0 <lwip_htons>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d010      	beq.n	800a8f0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a8ce:	e00a      	b.n	800a8e6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8d4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f7fd fce2 	bl	80082aa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1f0      	bne.n	800a8d0 <tcp_receive+0x7ec>
 800a8ee:	e0c8      	b.n	800aa82 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a8f6:	e052      	b.n	800a99e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	899b      	ldrh	r3, [r3, #12]
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	4618      	mov	r0, r3
 800a902:	f7fa fe6d 	bl	80055e0 <lwip_htons>
 800a906:	4603      	mov	r3, r0
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	f003 0301 	and.w	r3, r3, #1
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d03d      	beq.n	800a98e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a912:	4b17      	ldr	r3, [pc, #92]	; (800a970 <tcp_receive+0x88c>)
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	899b      	ldrh	r3, [r3, #12]
 800a918:	b29b      	uxth	r3, r3
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fa fe60 	bl	80055e0 <lwip_htons>
 800a920:	4603      	mov	r3, r0
 800a922:	b2db      	uxtb	r3, r3
 800a924:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d130      	bne.n	800a98e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a92c:	4b10      	ldr	r3, [pc, #64]	; (800a970 <tcp_receive+0x88c>)
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	899b      	ldrh	r3, [r3, #12]
 800a932:	b29c      	uxth	r4, r3
 800a934:	2001      	movs	r0, #1
 800a936:	f7fa fe53 	bl	80055e0 <lwip_htons>
 800a93a:	4603      	mov	r3, r0
 800a93c:	461a      	mov	r2, r3
 800a93e:	4b0c      	ldr	r3, [pc, #48]	; (800a970 <tcp_receive+0x88c>)
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	4322      	orrs	r2, r4
 800a944:	b292      	uxth	r2, r2
 800a946:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a948:	4b09      	ldr	r3, [pc, #36]	; (800a970 <tcp_receive+0x88c>)
 800a94a:	891c      	ldrh	r4, [r3, #8]
 800a94c:	4b08      	ldr	r3, [pc, #32]	; (800a970 <tcp_receive+0x88c>)
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	899b      	ldrh	r3, [r3, #12]
 800a952:	b29b      	uxth	r3, r3
 800a954:	4618      	mov	r0, r3
 800a956:	f7fa fe43 	bl	80055e0 <lwip_htons>
 800a95a:	4603      	mov	r3, r0
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	f003 0303 	and.w	r3, r3, #3
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00e      	beq.n	800a984 <tcp_receive+0x8a0>
 800a966:	2301      	movs	r3, #1
 800a968:	e00d      	b.n	800a986 <tcp_receive+0x8a2>
 800a96a:	bf00      	nop
 800a96c:	20008a14 	.word	0x20008a14
 800a970:	200089f4 	.word	0x200089f4
 800a974:	20008a1e 	.word	0x20008a1e
 800a978:	0801172c 	.word	0x0801172c
 800a97c:	08011ad4 	.word	0x08011ad4
 800a980:	08011778 	.word	0x08011778
 800a984:	2300      	movs	r3, #0
 800a986:	4423      	add	r3, r4
 800a988:	b29a      	uxth	r2, r3
 800a98a:	4b98      	ldr	r3, [pc, #608]	; (800abec <tcp_receive+0xb08>)
 800a98c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a98e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a990:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a998:	6938      	ldr	r0, [r7, #16]
 800a99a:	f7fd fc86 	bl	80082aa <tcp_seg_free>
            while (next &&
 800a99e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00e      	beq.n	800a9c2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a9a4:	4b91      	ldr	r3, [pc, #580]	; (800abec <tcp_receive+0xb08>)
 800a9a6:	881b      	ldrh	r3, [r3, #0]
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	4b91      	ldr	r3, [pc, #580]	; (800abf0 <tcp_receive+0xb0c>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	441a      	add	r2, r3
 800a9b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9b8:	8909      	ldrh	r1, [r1, #8]
 800a9ba:	440b      	add	r3, r1
 800a9bc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	da9a      	bge.n	800a8f8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a9c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d059      	beq.n	800aa7c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a9c8:	4b88      	ldr	r3, [pc, #544]	; (800abec <tcp_receive+0xb08>)
 800a9ca:	881b      	ldrh	r3, [r3, #0]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	4b88      	ldr	r3, [pc, #544]	; (800abf0 <tcp_receive+0xb0c>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	441a      	add	r2, r3
 800a9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	dd4d      	ble.n	800aa7c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	4b81      	ldr	r3, [pc, #516]	; (800abf0 <tcp_receive+0xb0c>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	4b80      	ldr	r3, [pc, #512]	; (800abf4 <tcp_receive+0xb10>)
 800a9f4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a9f6:	4b7f      	ldr	r3, [pc, #508]	; (800abf4 <tcp_receive+0xb10>)
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	899b      	ldrh	r3, [r3, #12]
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fa fdee 	bl	80055e0 <lwip_htons>
 800aa04:	4603      	mov	r3, r0
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	f003 0302 	and.w	r3, r3, #2
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d005      	beq.n	800aa1c <tcp_receive+0x938>
                inseg.len -= 1;
 800aa10:	4b78      	ldr	r3, [pc, #480]	; (800abf4 <tcp_receive+0xb10>)
 800aa12:	891b      	ldrh	r3, [r3, #8]
 800aa14:	3b01      	subs	r3, #1
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	4b76      	ldr	r3, [pc, #472]	; (800abf4 <tcp_receive+0xb10>)
 800aa1a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800aa1c:	4b75      	ldr	r3, [pc, #468]	; (800abf4 <tcp_receive+0xb10>)
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	4a74      	ldr	r2, [pc, #464]	; (800abf4 <tcp_receive+0xb10>)
 800aa22:	8912      	ldrh	r2, [r2, #8]
 800aa24:	4611      	mov	r1, r2
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7fb fee8 	bl	80067fc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800aa2c:	4b71      	ldr	r3, [pc, #452]	; (800abf4 <tcp_receive+0xb10>)
 800aa2e:	891c      	ldrh	r4, [r3, #8]
 800aa30:	4b70      	ldr	r3, [pc, #448]	; (800abf4 <tcp_receive+0xb10>)
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	899b      	ldrh	r3, [r3, #12]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7fa fdd1 	bl	80055e0 <lwip_htons>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	f003 0303 	and.w	r3, r3, #3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d001      	beq.n	800aa4e <tcp_receive+0x96a>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e000      	b.n	800aa50 <tcp_receive+0x96c>
 800aa4e:	2300      	movs	r3, #0
 800aa50:	4423      	add	r3, r4
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	4b65      	ldr	r3, [pc, #404]	; (800abec <tcp_receive+0xb08>)
 800aa56:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800aa58:	4b64      	ldr	r3, [pc, #400]	; (800abec <tcp_receive+0xb08>)
 800aa5a:	881b      	ldrh	r3, [r3, #0]
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	4b64      	ldr	r3, [pc, #400]	; (800abf0 <tcp_receive+0xb0c>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	441a      	add	r2, r3
 800aa64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d006      	beq.n	800aa7c <tcp_receive+0x998>
 800aa6e:	4b62      	ldr	r3, [pc, #392]	; (800abf8 <tcp_receive+0xb14>)
 800aa70:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800aa74:	4961      	ldr	r1, [pc, #388]	; (800abfc <tcp_receive+0xb18>)
 800aa76:	4862      	ldr	r0, [pc, #392]	; (800ac00 <tcp_receive+0xb1c>)
 800aa78:	f004 fca0 	bl	800f3bc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa80:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800aa82:	4b5a      	ldr	r3, [pc, #360]	; (800abec <tcp_receive+0xb08>)
 800aa84:	881b      	ldrh	r3, [r3, #0]
 800aa86:	461a      	mov	r2, r3
 800aa88:	4b59      	ldr	r3, [pc, #356]	; (800abf0 <tcp_receive+0xb0c>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	441a      	add	r2, r3
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa96:	4b55      	ldr	r3, [pc, #340]	; (800abec <tcp_receive+0xb08>)
 800aa98:	881b      	ldrh	r3, [r3, #0]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d206      	bcs.n	800aaac <tcp_receive+0x9c8>
 800aa9e:	4b56      	ldr	r3, [pc, #344]	; (800abf8 <tcp_receive+0xb14>)
 800aaa0:	f240 6207 	movw	r2, #1543	; 0x607
 800aaa4:	4957      	ldr	r1, [pc, #348]	; (800ac04 <tcp_receive+0xb20>)
 800aaa6:	4856      	ldr	r0, [pc, #344]	; (800ac00 <tcp_receive+0xb1c>)
 800aaa8:	f004 fc88 	bl	800f3bc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aab0:	4b4e      	ldr	r3, [pc, #312]	; (800abec <tcp_receive+0xb08>)
 800aab2:	881b      	ldrh	r3, [r3, #0]
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f7fc fdb7 	bl	8007630 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800aac2:	4b4c      	ldr	r3, [pc, #304]	; (800abf4 <tcp_receive+0xb10>)
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	891b      	ldrh	r3, [r3, #8]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d006      	beq.n	800aada <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800aacc:	4b49      	ldr	r3, [pc, #292]	; (800abf4 <tcp_receive+0xb10>)
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	4a4d      	ldr	r2, [pc, #308]	; (800ac08 <tcp_receive+0xb24>)
 800aad2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800aad4:	4b47      	ldr	r3, [pc, #284]	; (800abf4 <tcp_receive+0xb10>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aada:	4b46      	ldr	r3, [pc, #280]	; (800abf4 <tcp_receive+0xb10>)
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	899b      	ldrh	r3, [r3, #12]
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fa fd7c 	bl	80055e0 <lwip_htons>
 800aae8:	4603      	mov	r3, r0
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	f003 0301 	and.w	r3, r3, #1
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f000 80b8 	beq.w	800ac66 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800aaf6:	4b45      	ldr	r3, [pc, #276]	; (800ac0c <tcp_receive+0xb28>)
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	f043 0320 	orr.w	r3, r3, #32
 800aafe:	b2da      	uxtb	r2, r3
 800ab00:	4b42      	ldr	r3, [pc, #264]	; (800ac0c <tcp_receive+0xb28>)
 800ab02:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ab04:	e0af      	b.n	800ac66 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab0a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	4a36      	ldr	r2, [pc, #216]	; (800abf0 <tcp_receive+0xb0c>)
 800ab16:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	891b      	ldrh	r3, [r3, #8]
 800ab1c:	461c      	mov	r4, r3
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	899b      	ldrh	r3, [r3, #12]
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fa fd5a 	bl	80055e0 <lwip_htons>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	f003 0303 	and.w	r3, r3, #3
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d001      	beq.n	800ab3c <tcp_receive+0xa58>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e000      	b.n	800ab3e <tcp_receive+0xa5a>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	191a      	adds	r2, r3, r4
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab44:	441a      	add	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab4e:	461c      	mov	r4, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	891b      	ldrh	r3, [r3, #8]
 800ab54:	461d      	mov	r5, r3
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	899b      	ldrh	r3, [r3, #12]
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fa fd3e 	bl	80055e0 <lwip_htons>
 800ab64:	4603      	mov	r3, r0
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	f003 0303 	and.w	r3, r3, #3
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d001      	beq.n	800ab74 <tcp_receive+0xa90>
 800ab70:	2301      	movs	r3, #1
 800ab72:	e000      	b.n	800ab76 <tcp_receive+0xa92>
 800ab74:	2300      	movs	r3, #0
 800ab76:	442b      	add	r3, r5
 800ab78:	429c      	cmp	r4, r3
 800ab7a:	d206      	bcs.n	800ab8a <tcp_receive+0xaa6>
 800ab7c:	4b1e      	ldr	r3, [pc, #120]	; (800abf8 <tcp_receive+0xb14>)
 800ab7e:	f240 622b 	movw	r2, #1579	; 0x62b
 800ab82:	4923      	ldr	r1, [pc, #140]	; (800ac10 <tcp_receive+0xb2c>)
 800ab84:	481e      	ldr	r0, [pc, #120]	; (800ac00 <tcp_receive+0xb1c>)
 800ab86:	f004 fc19 	bl	800f3bc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	891b      	ldrh	r3, [r3, #8]
 800ab8e:	461c      	mov	r4, r3
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	899b      	ldrh	r3, [r3, #12]
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fa fd21 	bl	80055e0 <lwip_htons>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	f003 0303 	and.w	r3, r3, #3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <tcp_receive+0xaca>
 800abaa:	2301      	movs	r3, #1
 800abac:	e000      	b.n	800abb0 <tcp_receive+0xacc>
 800abae:	2300      	movs	r3, #0
 800abb0:	1919      	adds	r1, r3, r4
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800abb6:	b28b      	uxth	r3, r1
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	b29a      	uxth	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f7fc fd35 	bl	8007630 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	891b      	ldrh	r3, [r3, #8]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d028      	beq.n	800ac22 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800abd0:	4b0d      	ldr	r3, [pc, #52]	; (800ac08 <tcp_receive+0xb24>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d01d      	beq.n	800ac14 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800abd8:	4b0b      	ldr	r3, [pc, #44]	; (800ac08 <tcp_receive+0xb24>)
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	4619      	mov	r1, r3
 800abe2:	4610      	mov	r0, r2
 800abe4:	f7fc f852 	bl	8006c8c <pbuf_cat>
 800abe8:	e018      	b.n	800ac1c <tcp_receive+0xb38>
 800abea:	bf00      	nop
 800abec:	20008a1e 	.word	0x20008a1e
 800abf0:	20008a14 	.word	0x20008a14
 800abf4:	200089f4 	.word	0x200089f4
 800abf8:	0801172c 	.word	0x0801172c
 800abfc:	08011b0c 	.word	0x08011b0c
 800ac00:	08011778 	.word	0x08011778
 800ac04:	08011b48 	.word	0x08011b48
 800ac08:	20008a24 	.word	0x20008a24
 800ac0c:	20008a21 	.word	0x20008a21
 800ac10:	08011b68 	.word	0x08011b68
            } else {
              recv_data = cseg->p;
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	4a70      	ldr	r2, [pc, #448]	; (800addc <tcp_receive+0xcf8>)
 800ac1a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	899b      	ldrh	r3, [r3, #12]
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fa fcd8 	bl	80055e0 <lwip_htons>
 800ac30:	4603      	mov	r3, r0
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	f003 0301 	and.w	r3, r3, #1
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00d      	beq.n	800ac58 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ac3c:	4b68      	ldr	r3, [pc, #416]	; (800ade0 <tcp_receive+0xcfc>)
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	f043 0320 	orr.w	r3, r3, #32
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	4b66      	ldr	r3, [pc, #408]	; (800ade0 <tcp_receive+0xcfc>)
 800ac48:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	7d1b      	ldrb	r3, [r3, #20]
 800ac4e:	2b04      	cmp	r3, #4
 800ac50:	d102      	bne.n	800ac58 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2207      	movs	r2, #7
 800ac56:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ac60:	68b8      	ldr	r0, [r7, #8]
 800ac62:	f7fd fb22 	bl	80082aa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d008      	beq.n	800ac80 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	f43f af43 	beq.w	800ab06 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	8b5b      	ldrh	r3, [r3, #26]
 800ac84:	f003 0301 	and.w	r3, r3, #1
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00e      	beq.n	800acaa <tcp_receive+0xbc6>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	8b5b      	ldrh	r3, [r3, #26]
 800ac90:	f023 0301 	bic.w	r3, r3, #1
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	835a      	strh	r2, [r3, #26]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	8b5b      	ldrh	r3, [r3, #26]
 800ac9e:	f043 0302 	orr.w	r3, r3, #2
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aca8:	e188      	b.n	800afbc <tcp_receive+0xed8>
        tcp_ack(pcb);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	8b5b      	ldrh	r3, [r3, #26]
 800acae:	f043 0301 	orr.w	r3, r3, #1
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800acb8:	e180      	b.n	800afbc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d106      	bne.n	800acd0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800acc2:	4848      	ldr	r0, [pc, #288]	; (800ade4 <tcp_receive+0xd00>)
 800acc4:	f7fd fb0a 	bl	80082dc <tcp_seg_copy>
 800acc8:	4602      	mov	r2, r0
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	675a      	str	r2, [r3, #116]	; 0x74
 800acce:	e16d      	b.n	800afac <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800acd0:	2300      	movs	r3, #0
 800acd2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acd8:	63bb      	str	r3, [r7, #56]	; 0x38
 800acda:	e157      	b.n	800af8c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800acdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	4b41      	ldr	r3, [pc, #260]	; (800ade8 <tcp_receive+0xd04>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d11d      	bne.n	800ad26 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800acea:	4b3e      	ldr	r3, [pc, #248]	; (800ade4 <tcp_receive+0xd00>)
 800acec:	891a      	ldrh	r2, [r3, #8]
 800acee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf0:	891b      	ldrh	r3, [r3, #8]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	f240 814f 	bls.w	800af96 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800acf8:	483a      	ldr	r0, [pc, #232]	; (800ade4 <tcp_receive+0xd00>)
 800acfa:	f7fd faef 	bl	80082dc <tcp_seg_copy>
 800acfe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 8149 	beq.w	800af9a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ad08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d003      	beq.n	800ad16 <tcp_receive+0xc32>
                    prev->next = cseg;
 800ad0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	e002      	b.n	800ad1c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ad1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad1e:	6978      	ldr	r0, [r7, #20]
 800ad20:	f7ff f8dc 	bl	8009edc <tcp_oos_insert_segment>
                }
                break;
 800ad24:	e139      	b.n	800af9a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ad26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d117      	bne.n	800ad5c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ad2c:	4b2e      	ldr	r3, [pc, #184]	; (800ade8 <tcp_receive+0xd04>)
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	da57      	bge.n	800adec <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ad3c:	4829      	ldr	r0, [pc, #164]	; (800ade4 <tcp_receive+0xd00>)
 800ad3e:	f7fd facd 	bl	80082dc <tcp_seg_copy>
 800ad42:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f000 8129 	beq.w	800af9e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	69ba      	ldr	r2, [r7, #24]
 800ad50:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ad52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad54:	69b8      	ldr	r0, [r7, #24]
 800ad56:	f7ff f8c1 	bl	8009edc <tcp_oos_insert_segment>
                  }
                  break;
 800ad5a:	e120      	b.n	800af9e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ad5c:	4b22      	ldr	r3, [pc, #136]	; (800ade8 <tcp_receive+0xd04>)
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	db3e      	blt.n	800adec <tcp_receive+0xd08>
 800ad6e:	4b1e      	ldr	r3, [pc, #120]	; (800ade8 <tcp_receive+0xd04>)
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	dc35      	bgt.n	800adec <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ad80:	4818      	ldr	r0, [pc, #96]	; (800ade4 <tcp_receive+0xd00>)
 800ad82:	f7fd faab 	bl	80082dc <tcp_seg_copy>
 800ad86:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 8109 	beq.w	800afa2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ad90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad98:	8912      	ldrh	r2, [r2, #8]
 800ad9a:	441a      	add	r2, r3
 800ad9c:	4b12      	ldr	r3, [pc, #72]	; (800ade8 <tcp_receive+0xd04>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	dd12      	ble.n	800adcc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ada6:	4b10      	ldr	r3, [pc, #64]	; (800ade8 <tcp_receive+0xd04>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	b29a      	uxth	r2, r3
 800adac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	1ad3      	subs	r3, r2, r3
 800adb6:	b29a      	uxth	r2, r3
 800adb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adba:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800adbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc2:	891b      	ldrh	r3, [r3, #8]
 800adc4:	4619      	mov	r1, r3
 800adc6:	4610      	mov	r0, r2
 800adc8:	f7fb fd18 	bl	80067fc <pbuf_realloc>
                    }
                    prev->next = cseg;
 800adcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adce:	69fa      	ldr	r2, [r7, #28]
 800add0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800add2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800add4:	69f8      	ldr	r0, [r7, #28]
 800add6:	f7ff f881 	bl	8009edc <tcp_oos_insert_segment>
                  }
                  break;
 800adda:	e0e2      	b.n	800afa2 <tcp_receive+0xebe>
 800addc:	20008a24 	.word	0x20008a24
 800ade0:	20008a21 	.word	0x20008a21
 800ade4:	200089f4 	.word	0x200089f4
 800ade8:	20008a14 	.word	0x20008a14
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800adec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adee:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800adf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f040 80c6 	bne.w	800af86 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800adfa:	4b80      	ldr	r3, [pc, #512]	; (800affc <tcp_receive+0xf18>)
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f340 80bd 	ble.w	800af86 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ae0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	899b      	ldrh	r3, [r3, #12]
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7fa fbe3 	bl	80055e0 <lwip_htons>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	f003 0301 	and.w	r3, r3, #1
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f040 80bf 	bne.w	800afa6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ae28:	4875      	ldr	r0, [pc, #468]	; (800b000 <tcp_receive+0xf1c>)
 800ae2a:	f7fd fa57 	bl	80082dc <tcp_seg_copy>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae32:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ae34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f000 80b6 	beq.w	800afaa <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae46:	8912      	ldrh	r2, [r2, #8]
 800ae48:	441a      	add	r2, r3
 800ae4a:	4b6c      	ldr	r3, [pc, #432]	; (800affc <tcp_receive+0xf18>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	dd12      	ble.n	800ae7a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ae54:	4b69      	ldr	r3, [pc, #420]	; (800affc <tcp_receive+0xf18>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae68:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ae6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6c:	685a      	ldr	r2, [r3, #4]
 800ae6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae70:	891b      	ldrh	r3, [r3, #8]
 800ae72:	4619      	mov	r1, r3
 800ae74:	4610      	mov	r0, r2
 800ae76:	f7fb fcc1 	bl	80067fc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ae7a:	4b62      	ldr	r3, [pc, #392]	; (800b004 <tcp_receive+0xf20>)
 800ae7c:	881b      	ldrh	r3, [r3, #0]
 800ae7e:	461a      	mov	r2, r3
 800ae80:	4b5e      	ldr	r3, [pc, #376]	; (800affc <tcp_receive+0xf18>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	441a      	add	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8a:	6879      	ldr	r1, [r7, #4]
 800ae8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae8e:	440b      	add	r3, r1
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f340 8089 	ble.w	800afaa <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ae98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	899b      	ldrh	r3, [r3, #12]
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7fa fb9c 	bl	80055e0 <lwip_htons>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	f003 0301 	and.w	r3, r3, #1
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d022      	beq.n	800aefa <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800aeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	899b      	ldrh	r3, [r3, #12]
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	b21b      	sxth	r3, r3
 800aec0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aec4:	b21c      	sxth	r4, r3
 800aec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	899b      	ldrh	r3, [r3, #12]
 800aece:	b29b      	uxth	r3, r3
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7fa fb85 	bl	80055e0 <lwip_htons>
 800aed6:	4603      	mov	r3, r0
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fa fb7c 	bl	80055e0 <lwip_htons>
 800aee8:	4603      	mov	r3, r0
 800aeea:	b21b      	sxth	r3, r3
 800aeec:	4323      	orrs	r3, r4
 800aeee:	b21a      	sxth	r2, r3
 800aef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	b292      	uxth	r2, r2
 800aef8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefe:	b29a      	uxth	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af04:	4413      	add	r3, r2
 800af06:	b299      	uxth	r1, r3
 800af08:	4b3c      	ldr	r3, [pc, #240]	; (800affc <tcp_receive+0xf18>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	b29a      	uxth	r2, r3
 800af0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	1a8a      	subs	r2, r1, r2
 800af14:	b292      	uxth	r2, r2
 800af16:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800af18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	685a      	ldr	r2, [r3, #4]
 800af1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	891b      	ldrh	r3, [r3, #8]
 800af24:	4619      	mov	r1, r3
 800af26:	4610      	mov	r0, r2
 800af28:	f7fb fc68 	bl	80067fc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800af2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	891c      	ldrh	r4, [r3, #8]
 800af32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	899b      	ldrh	r3, [r3, #12]
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7fa fb4f 	bl	80055e0 <lwip_htons>
 800af42:	4603      	mov	r3, r0
 800af44:	b2db      	uxtb	r3, r3
 800af46:	f003 0303 	and.w	r3, r3, #3
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <tcp_receive+0xe6e>
 800af4e:	2301      	movs	r3, #1
 800af50:	e000      	b.n	800af54 <tcp_receive+0xe70>
 800af52:	2300      	movs	r3, #0
 800af54:	4423      	add	r3, r4
 800af56:	b29a      	uxth	r2, r3
 800af58:	4b2a      	ldr	r3, [pc, #168]	; (800b004 <tcp_receive+0xf20>)
 800af5a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800af5c:	4b29      	ldr	r3, [pc, #164]	; (800b004 <tcp_receive+0xf20>)
 800af5e:	881b      	ldrh	r3, [r3, #0]
 800af60:	461a      	mov	r2, r3
 800af62:	4b26      	ldr	r3, [pc, #152]	; (800affc <tcp_receive+0xf18>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	441a      	add	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6c:	6879      	ldr	r1, [r7, #4]
 800af6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800af70:	440b      	add	r3, r1
 800af72:	429a      	cmp	r2, r3
 800af74:	d019      	beq.n	800afaa <tcp_receive+0xec6>
 800af76:	4b24      	ldr	r3, [pc, #144]	; (800b008 <tcp_receive+0xf24>)
 800af78:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800af7c:	4923      	ldr	r1, [pc, #140]	; (800b00c <tcp_receive+0xf28>)
 800af7e:	4824      	ldr	r0, [pc, #144]	; (800b010 <tcp_receive+0xf2c>)
 800af80:	f004 fa1c 	bl	800f3bc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800af84:	e011      	b.n	800afaa <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800af86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	63bb      	str	r3, [r7, #56]	; 0x38
 800af8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f47f aea4 	bne.w	800acdc <tcp_receive+0xbf8>
 800af94:	e00a      	b.n	800afac <tcp_receive+0xec8>
                break;
 800af96:	bf00      	nop
 800af98:	e008      	b.n	800afac <tcp_receive+0xec8>
                break;
 800af9a:	bf00      	nop
 800af9c:	e006      	b.n	800afac <tcp_receive+0xec8>
                  break;
 800af9e:	bf00      	nop
 800afa0:	e004      	b.n	800afac <tcp_receive+0xec8>
                  break;
 800afa2:	bf00      	nop
 800afa4:	e002      	b.n	800afac <tcp_receive+0xec8>
                  break;
 800afa6:	bf00      	nop
 800afa8:	e000      	b.n	800afac <tcp_receive+0xec8>
                break;
 800afaa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f001 fa33 	bl	800c418 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800afb2:	e003      	b.n	800afbc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f001 fa2f 	bl	800c418 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800afba:	e01a      	b.n	800aff2 <tcp_receive+0xf0e>
 800afbc:	e019      	b.n	800aff2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800afbe:	4b0f      	ldr	r3, [pc, #60]	; (800affc <tcp_receive+0xf18>)
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	2b00      	cmp	r3, #0
 800afca:	db0a      	blt.n	800afe2 <tcp_receive+0xefe>
 800afcc:	4b0b      	ldr	r3, [pc, #44]	; (800affc <tcp_receive+0xf18>)
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd4:	6879      	ldr	r1, [r7, #4]
 800afd6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800afd8:	440b      	add	r3, r1
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	3301      	adds	r3, #1
 800afde:	2b00      	cmp	r3, #0
 800afe0:	dd07      	ble.n	800aff2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	8b5b      	ldrh	r3, [r3, #26]
 800afe6:	f043 0302 	orr.w	r3, r3, #2
 800afea:	b29a      	uxth	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800aff0:	e7ff      	b.n	800aff2 <tcp_receive+0xf0e>
 800aff2:	bf00      	nop
 800aff4:	3750      	adds	r7, #80	; 0x50
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bdb0      	pop	{r4, r5, r7, pc}
 800affa:	bf00      	nop
 800affc:	20008a14 	.word	0x20008a14
 800b000:	200089f4 	.word	0x200089f4
 800b004:	20008a1e 	.word	0x20008a1e
 800b008:	0801172c 	.word	0x0801172c
 800b00c:	08011ad4 	.word	0x08011ad4
 800b010:	08011778 	.word	0x08011778

0800b014 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b01a:	4b15      	ldr	r3, [pc, #84]	; (800b070 <tcp_get_next_optbyte+0x5c>)
 800b01c:	881b      	ldrh	r3, [r3, #0]
 800b01e:	1c5a      	adds	r2, r3, #1
 800b020:	b291      	uxth	r1, r2
 800b022:	4a13      	ldr	r2, [pc, #76]	; (800b070 <tcp_get_next_optbyte+0x5c>)
 800b024:	8011      	strh	r1, [r2, #0]
 800b026:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b028:	4b12      	ldr	r3, [pc, #72]	; (800b074 <tcp_get_next_optbyte+0x60>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d004      	beq.n	800b03a <tcp_get_next_optbyte+0x26>
 800b030:	4b11      	ldr	r3, [pc, #68]	; (800b078 <tcp_get_next_optbyte+0x64>)
 800b032:	881b      	ldrh	r3, [r3, #0]
 800b034:	88fa      	ldrh	r2, [r7, #6]
 800b036:	429a      	cmp	r2, r3
 800b038:	d208      	bcs.n	800b04c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b03a:	4b10      	ldr	r3, [pc, #64]	; (800b07c <tcp_get_next_optbyte+0x68>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	3314      	adds	r3, #20
 800b040:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b042:	88fb      	ldrh	r3, [r7, #6]
 800b044:	683a      	ldr	r2, [r7, #0]
 800b046:	4413      	add	r3, r2
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	e00b      	b.n	800b064 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b04c:	88fb      	ldrh	r3, [r7, #6]
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	4b09      	ldr	r3, [pc, #36]	; (800b078 <tcp_get_next_optbyte+0x64>)
 800b052:	881b      	ldrh	r3, [r3, #0]
 800b054:	b2db      	uxtb	r3, r3
 800b056:	1ad3      	subs	r3, r2, r3
 800b058:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b05a:	4b06      	ldr	r3, [pc, #24]	; (800b074 <tcp_get_next_optbyte+0x60>)
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	797b      	ldrb	r3, [r7, #5]
 800b060:	4413      	add	r3, r2
 800b062:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b064:	4618      	mov	r0, r3
 800b066:	370c      	adds	r7, #12
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr
 800b070:	20008a10 	.word	0x20008a10
 800b074:	20008a0c 	.word	0x20008a0c
 800b078:	20008a0a 	.word	0x20008a0a
 800b07c:	20008a04 	.word	0x20008a04

0800b080 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d106      	bne.n	800b09c <tcp_parseopt+0x1c>
 800b08e:	4b32      	ldr	r3, [pc, #200]	; (800b158 <tcp_parseopt+0xd8>)
 800b090:	f240 727d 	movw	r2, #1917	; 0x77d
 800b094:	4931      	ldr	r1, [pc, #196]	; (800b15c <tcp_parseopt+0xdc>)
 800b096:	4832      	ldr	r0, [pc, #200]	; (800b160 <tcp_parseopt+0xe0>)
 800b098:	f004 f990 	bl	800f3bc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b09c:	4b31      	ldr	r3, [pc, #196]	; (800b164 <tcp_parseopt+0xe4>)
 800b09e:	881b      	ldrh	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d055      	beq.n	800b150 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b0a4:	4b30      	ldr	r3, [pc, #192]	; (800b168 <tcp_parseopt+0xe8>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	801a      	strh	r2, [r3, #0]
 800b0aa:	e045      	b.n	800b138 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800b0ac:	f7ff ffb2 	bl	800b014 <tcp_get_next_optbyte>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d006      	beq.n	800b0c8 <tcp_parseopt+0x48>
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	dc2b      	bgt.n	800b116 <tcp_parseopt+0x96>
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d041      	beq.n	800b146 <tcp_parseopt+0xc6>
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d127      	bne.n	800b116 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800b0c6:	e037      	b.n	800b138 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b0c8:	f7ff ffa4 	bl	800b014 <tcp_get_next_optbyte>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b04      	cmp	r3, #4
 800b0d0:	d13b      	bne.n	800b14a <tcp_parseopt+0xca>
 800b0d2:	4b25      	ldr	r3, [pc, #148]	; (800b168 <tcp_parseopt+0xe8>)
 800b0d4:	881b      	ldrh	r3, [r3, #0]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	4a22      	ldr	r2, [pc, #136]	; (800b164 <tcp_parseopt+0xe4>)
 800b0da:	8812      	ldrh	r2, [r2, #0]
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	da34      	bge.n	800b14a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b0e0:	f7ff ff98 	bl	800b014 <tcp_get_next_optbyte>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	021b      	lsls	r3, r3, #8
 800b0ea:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b0ec:	f7ff ff92 	bl	800b014 <tcp_get_next_optbyte>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	b29a      	uxth	r2, r3
 800b0f4:	89bb      	ldrh	r3, [r7, #12]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b0fa:	89bb      	ldrh	r3, [r7, #12]
 800b0fc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b100:	d804      	bhi.n	800b10c <tcp_parseopt+0x8c>
 800b102:	89bb      	ldrh	r3, [r7, #12]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d001      	beq.n	800b10c <tcp_parseopt+0x8c>
 800b108:	89ba      	ldrh	r2, [r7, #12]
 800b10a:	e001      	b.n	800b110 <tcp_parseopt+0x90>
 800b10c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b114:	e010      	b.n	800b138 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b116:	f7ff ff7d 	bl	800b014 <tcp_get_next_optbyte>
 800b11a:	4603      	mov	r3, r0
 800b11c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b11e:	7afb      	ldrb	r3, [r7, #11]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d914      	bls.n	800b14e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b124:	7afb      	ldrb	r3, [r7, #11]
 800b126:	b29a      	uxth	r2, r3
 800b128:	4b0f      	ldr	r3, [pc, #60]	; (800b168 <tcp_parseopt+0xe8>)
 800b12a:	881b      	ldrh	r3, [r3, #0]
 800b12c:	4413      	add	r3, r2
 800b12e:	b29b      	uxth	r3, r3
 800b130:	3b02      	subs	r3, #2
 800b132:	b29a      	uxth	r2, r3
 800b134:	4b0c      	ldr	r3, [pc, #48]	; (800b168 <tcp_parseopt+0xe8>)
 800b136:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b138:	4b0b      	ldr	r3, [pc, #44]	; (800b168 <tcp_parseopt+0xe8>)
 800b13a:	881a      	ldrh	r2, [r3, #0]
 800b13c:	4b09      	ldr	r3, [pc, #36]	; (800b164 <tcp_parseopt+0xe4>)
 800b13e:	881b      	ldrh	r3, [r3, #0]
 800b140:	429a      	cmp	r2, r3
 800b142:	d3b3      	bcc.n	800b0ac <tcp_parseopt+0x2c>
 800b144:	e004      	b.n	800b150 <tcp_parseopt+0xd0>
          return;
 800b146:	bf00      	nop
 800b148:	e002      	b.n	800b150 <tcp_parseopt+0xd0>
            return;
 800b14a:	bf00      	nop
 800b14c:	e000      	b.n	800b150 <tcp_parseopt+0xd0>
            return;
 800b14e:	bf00      	nop
      }
    }
  }
}
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	0801172c 	.word	0x0801172c
 800b15c:	08011b90 	.word	0x08011b90
 800b160:	08011778 	.word	0x08011778
 800b164:	20008a08 	.word	0x20008a08
 800b168:	20008a10 	.word	0x20008a10

0800b16c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b16c:	b480      	push	{r7}
 800b16e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b170:	4b05      	ldr	r3, [pc, #20]	; (800b188 <tcp_trigger_input_pcb_close+0x1c>)
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	f043 0310 	orr.w	r3, r3, #16
 800b178:	b2da      	uxtb	r2, r3
 800b17a:	4b03      	ldr	r3, [pc, #12]	; (800b188 <tcp_trigger_input_pcb_close+0x1c>)
 800b17c:	701a      	strb	r2, [r3, #0]
}
 800b17e:	bf00      	nop
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr
 800b188:	20008a21 	.word	0x20008a21

0800b18c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00a      	beq.n	800b1b4 <tcp_route+0x28>
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	7a1b      	ldrb	r3, [r3, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d006      	beq.n	800b1b4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	7a1b      	ldrb	r3, [r3, #8]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fb f96c 	bl	8006488 <netif_get_by_index>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	e003      	b.n	800b1bc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f002 fe3b 	bl	800de30 <ip4_route>
 800b1ba:	4603      	mov	r3, r0
  }
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b1c4:	b590      	push	{r4, r7, lr}
 800b1c6:	b087      	sub	sp, #28
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	603b      	str	r3, [r7, #0]
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d105      	bne.n	800b1e6 <tcp_create_segment+0x22>
 800b1da:	4b44      	ldr	r3, [pc, #272]	; (800b2ec <tcp_create_segment+0x128>)
 800b1dc:	22a3      	movs	r2, #163	; 0xa3
 800b1de:	4944      	ldr	r1, [pc, #272]	; (800b2f0 <tcp_create_segment+0x12c>)
 800b1e0:	4844      	ldr	r0, [pc, #272]	; (800b2f4 <tcp_create_segment+0x130>)
 800b1e2:	f004 f8eb 	bl	800f3bc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d105      	bne.n	800b1f8 <tcp_create_segment+0x34>
 800b1ec:	4b3f      	ldr	r3, [pc, #252]	; (800b2ec <tcp_create_segment+0x128>)
 800b1ee:	22a4      	movs	r2, #164	; 0xa4
 800b1f0:	4941      	ldr	r1, [pc, #260]	; (800b2f8 <tcp_create_segment+0x134>)
 800b1f2:	4840      	ldr	r0, [pc, #256]	; (800b2f4 <tcp_create_segment+0x130>)
 800b1f4:	f004 f8e2 	bl	800f3bc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b1f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	f003 0304 	and.w	r3, r3, #4
 800b204:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b206:	2003      	movs	r0, #3
 800b208:	f7fa fe40 	bl	8005e8c <memp_malloc>
 800b20c:	6138      	str	r0, [r7, #16]
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d104      	bne.n	800b21e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b214:	68b8      	ldr	r0, [r7, #8]
 800b216:	f7fb fc77 	bl	8006b08 <pbuf_free>
    return NULL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	e061      	b.n	800b2e2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b224:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	891a      	ldrh	r2, [r3, #8]
 800b236:	7dfb      	ldrb	r3, [r7, #23]
 800b238:	b29b      	uxth	r3, r3
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d205      	bcs.n	800b24a <tcp_create_segment+0x86>
 800b23e:	4b2b      	ldr	r3, [pc, #172]	; (800b2ec <tcp_create_segment+0x128>)
 800b240:	22b0      	movs	r2, #176	; 0xb0
 800b242:	492e      	ldr	r1, [pc, #184]	; (800b2fc <tcp_create_segment+0x138>)
 800b244:	482b      	ldr	r0, [pc, #172]	; (800b2f4 <tcp_create_segment+0x130>)
 800b246:	f004 f8b9 	bl	800f3bc <iprintf>
  seg->len = p->tot_len - optlen;
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	891a      	ldrh	r2, [r3, #8]
 800b24e:	7dfb      	ldrb	r3, [r7, #23]
 800b250:	b29b      	uxth	r3, r3
 800b252:	1ad3      	subs	r3, r2, r3
 800b254:	b29a      	uxth	r2, r3
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b25a:	2114      	movs	r1, #20
 800b25c:	68b8      	ldr	r0, [r7, #8]
 800b25e:	f7fb fbbd 	bl	80069dc <pbuf_add_header>
 800b262:	4603      	mov	r3, r0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d004      	beq.n	800b272 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b268:	6938      	ldr	r0, [r7, #16]
 800b26a:	f7fd f81e 	bl	80082aa <tcp_seg_free>
    return NULL;
 800b26e:	2300      	movs	r3, #0
 800b270:	e037      	b.n	800b2e2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	685a      	ldr	r2, [r3, #4]
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	8ada      	ldrh	r2, [r3, #22]
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	68dc      	ldr	r4, [r3, #12]
 800b284:	4610      	mov	r0, r2
 800b286:	f7fa f9ab 	bl	80055e0 <lwip_htons>
 800b28a:	4603      	mov	r3, r0
 800b28c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	8b1a      	ldrh	r2, [r3, #24]
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	68dc      	ldr	r4, [r3, #12]
 800b296:	4610      	mov	r0, r2
 800b298:	f7fa f9a2 	bl	80055e0 <lwip_htons>
 800b29c:	4603      	mov	r3, r0
 800b29e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	68dc      	ldr	r4, [r3, #12]
 800b2a4:	6838      	ldr	r0, [r7, #0]
 800b2a6:	f7fa f9b0 	bl	800560a <lwip_htonl>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b2ae:	7dfb      	ldrb	r3, [r7, #23]
 800b2b0:	089b      	lsrs	r3, r3, #2
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	3305      	adds	r3, #5
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	031b      	lsls	r3, r3, #12
 800b2bc:	b29a      	uxth	r2, r3
 800b2be:	79fb      	ldrb	r3, [r7, #7]
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	68dc      	ldr	r4, [r3, #12]
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	f7fa f988 	bl	80055e0 <lwip_htons>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	749a      	strb	r2, [r3, #18]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	74da      	strb	r2, [r3, #19]
  return seg;
 800b2e0:	693b      	ldr	r3, [r7, #16]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	371c      	adds	r7, #28
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd90      	pop	{r4, r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	08011bac 	.word	0x08011bac
 800b2f0:	08011be0 	.word	0x08011be0
 800b2f4:	08011c00 	.word	0x08011c00
 800b2f8:	08011c28 	.word	0x08011c28
 800b2fc:	08011c4c 	.word	0x08011c4c

0800b300 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b300:	b590      	push	{r4, r7, lr}
 800b302:	b08b      	sub	sp, #44	; 0x2c
 800b304:	af02      	add	r7, sp, #8
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	460b      	mov	r3, r1
 800b30a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b30c:	2300      	movs	r3, #0
 800b30e:	61fb      	str	r3, [r7, #28]
 800b310:	2300      	movs	r3, #0
 800b312:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b314:	2300      	movs	r3, #0
 800b316:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d106      	bne.n	800b32c <tcp_split_unsent_seg+0x2c>
 800b31e:	4b95      	ldr	r3, [pc, #596]	; (800b574 <tcp_split_unsent_seg+0x274>)
 800b320:	f240 324b 	movw	r2, #843	; 0x34b
 800b324:	4994      	ldr	r1, [pc, #592]	; (800b578 <tcp_split_unsent_seg+0x278>)
 800b326:	4895      	ldr	r0, [pc, #596]	; (800b57c <tcp_split_unsent_seg+0x27c>)
 800b328:	f004 f848 	bl	800f3bc <iprintf>

  useg = pcb->unsent;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b330:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d102      	bne.n	800b33e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b338:	f04f 33ff 	mov.w	r3, #4294967295
 800b33c:	e116      	b.n	800b56c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b33e:	887b      	ldrh	r3, [r7, #2]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d109      	bne.n	800b358 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b344:	4b8b      	ldr	r3, [pc, #556]	; (800b574 <tcp_split_unsent_seg+0x274>)
 800b346:	f240 3253 	movw	r2, #851	; 0x353
 800b34a:	498d      	ldr	r1, [pc, #564]	; (800b580 <tcp_split_unsent_seg+0x280>)
 800b34c:	488b      	ldr	r0, [pc, #556]	; (800b57c <tcp_split_unsent_seg+0x27c>)
 800b34e:	f004 f835 	bl	800f3bc <iprintf>
    return ERR_VAL;
 800b352:	f06f 0305 	mvn.w	r3, #5
 800b356:	e109      	b.n	800b56c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	891b      	ldrh	r3, [r3, #8]
 800b35c:	887a      	ldrh	r2, [r7, #2]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d301      	bcc.n	800b366 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	e102      	b.n	800b56c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b36a:	887a      	ldrh	r2, [r7, #2]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d906      	bls.n	800b37e <tcp_split_unsent_seg+0x7e>
 800b370:	4b80      	ldr	r3, [pc, #512]	; (800b574 <tcp_split_unsent_seg+0x274>)
 800b372:	f240 325b 	movw	r2, #859	; 0x35b
 800b376:	4983      	ldr	r1, [pc, #524]	; (800b584 <tcp_split_unsent_seg+0x284>)
 800b378:	4880      	ldr	r0, [pc, #512]	; (800b57c <tcp_split_unsent_seg+0x27c>)
 800b37a:	f004 f81f 	bl	800f3bc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	891b      	ldrh	r3, [r3, #8]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d106      	bne.n	800b394 <tcp_split_unsent_seg+0x94>
 800b386:	4b7b      	ldr	r3, [pc, #492]	; (800b574 <tcp_split_unsent_seg+0x274>)
 800b388:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b38c:	497e      	ldr	r1, [pc, #504]	; (800b588 <tcp_split_unsent_seg+0x288>)
 800b38e:	487b      	ldr	r0, [pc, #492]	; (800b57c <tcp_split_unsent_seg+0x27c>)
 800b390:	f004 f814 	bl	800f3bc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	7a9b      	ldrb	r3, [r3, #10]
 800b398:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	f003 0304 	and.w	r3, r3, #4
 800b3a4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	891a      	ldrh	r2, [r3, #8]
 800b3aa:	887b      	ldrh	r3, [r7, #2]
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b3b0:	7bbb      	ldrb	r3, [r7, #14]
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	89bb      	ldrh	r3, [r7, #12]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b3be:	4619      	mov	r1, r3
 800b3c0:	2036      	movs	r0, #54	; 0x36
 800b3c2:	f7fb f8bd 	bl	8006540 <pbuf_alloc>
 800b3c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	f000 80b7 	beq.w	800b53e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	891a      	ldrh	r2, [r3, #8]
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	891b      	ldrh	r3, [r3, #8]
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	887b      	ldrh	r3, [r7, #2]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	6858      	ldr	r0, [r3, #4]
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	685a      	ldr	r2, [r3, #4]
 800b3ec:	7bbb      	ldrb	r3, [r7, #14]
 800b3ee:	18d1      	adds	r1, r2, r3
 800b3f0:	897b      	ldrh	r3, [r7, #10]
 800b3f2:	89ba      	ldrh	r2, [r7, #12]
 800b3f4:	f7fb fd72 	bl	8006edc <pbuf_copy_partial>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	89bb      	ldrh	r3, [r7, #12]
 800b3fe:	4293      	cmp	r3, r2
 800b400:	f040 809f 	bne.w	800b542 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	899b      	ldrh	r3, [r3, #12]
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7fa f8e7 	bl	80055e0 <lwip_htons>
 800b412:	4603      	mov	r3, r0
 800b414:	b2db      	uxtb	r3, r3
 800b416:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b41a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b41c:	2300      	movs	r3, #0
 800b41e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b420:	7efb      	ldrb	r3, [r7, #27]
 800b422:	f003 0308 	and.w	r3, r3, #8
 800b426:	2b00      	cmp	r3, #0
 800b428:	d007      	beq.n	800b43a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b42a:	7efb      	ldrb	r3, [r7, #27]
 800b42c:	f023 0308 	bic.w	r3, r3, #8
 800b430:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b432:	7ebb      	ldrb	r3, [r7, #26]
 800b434:	f043 0308 	orr.w	r3, r3, #8
 800b438:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b43a:	7efb      	ldrb	r3, [r7, #27]
 800b43c:	f003 0301 	and.w	r3, r3, #1
 800b440:	2b00      	cmp	r3, #0
 800b442:	d007      	beq.n	800b454 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b444:	7efb      	ldrb	r3, [r7, #27]
 800b446:	f023 0301 	bic.w	r3, r3, #1
 800b44a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b44c:	7ebb      	ldrb	r3, [r7, #26]
 800b44e:	f043 0301 	orr.w	r3, r3, #1
 800b452:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fa f8d5 	bl	800560a <lwip_htonl>
 800b460:	4602      	mov	r2, r0
 800b462:	887b      	ldrh	r3, [r7, #2]
 800b464:	18d1      	adds	r1, r2, r3
 800b466:	7eba      	ldrb	r2, [r7, #26]
 800b468:	7bfb      	ldrb	r3, [r7, #15]
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	460b      	mov	r3, r1
 800b46e:	6939      	ldr	r1, [r7, #16]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7ff fea7 	bl	800b1c4 <tcp_create_segment>
 800b476:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d063      	beq.n	800b546 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	4618      	mov	r0, r3
 800b484:	f7fb fbc8 	bl	8006c18 <pbuf_clen>
 800b488:	4603      	mov	r3, r0
 800b48a:	461a      	mov	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b492:	1a9b      	subs	r3, r3, r2
 800b494:	b29a      	uxth	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	6858      	ldr	r0, [r3, #4]
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	891a      	ldrh	r2, [r3, #8]
 800b4a6:	89bb      	ldrh	r3, [r7, #12]
 800b4a8:	1ad3      	subs	r3, r2, r3
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	f7fb f9a5 	bl	80067fc <pbuf_realloc>
  useg->len -= remainder;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	891a      	ldrh	r2, [r3, #8]
 800b4b6:	89bb      	ldrh	r3, [r7, #12]
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	899b      	ldrh	r3, [r3, #12]
 800b4c6:	b29c      	uxth	r4, r3
 800b4c8:	7efb      	ldrb	r3, [r7, #27]
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7fa f887 	bl	80055e0 <lwip_htons>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	4322      	orrs	r2, r4
 800b4dc:	b292      	uxth	r2, r2
 800b4de:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7fb fb97 	bl	8006c18 <pbuf_clen>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b4f4:	4413      	add	r3, r2
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	4618      	mov	r0, r3
 800b504:	f7fb fb88 	bl	8006c18 <pbuf_clen>
 800b508:	4603      	mov	r3, r0
 800b50a:	461a      	mov	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b512:	4413      	add	r3, r2
 800b514:	b29a      	uxth	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	69fa      	ldr	r2, [r7, #28]
 800b528:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d103      	bne.n	800b53a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b53a:	2300      	movs	r3, #0
 800b53c:	e016      	b.n	800b56c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b53e:	bf00      	nop
 800b540:	e002      	b.n	800b548 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b542:	bf00      	nop
 800b544:	e000      	b.n	800b548 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b546:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d006      	beq.n	800b55c <tcp_split_unsent_seg+0x25c>
 800b54e:	4b09      	ldr	r3, [pc, #36]	; (800b574 <tcp_split_unsent_seg+0x274>)
 800b550:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b554:	490d      	ldr	r1, [pc, #52]	; (800b58c <tcp_split_unsent_seg+0x28c>)
 800b556:	4809      	ldr	r0, [pc, #36]	; (800b57c <tcp_split_unsent_seg+0x27c>)
 800b558:	f003 ff30 	bl	800f3bc <iprintf>
  if (p != NULL) {
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d002      	beq.n	800b568 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b562:	6938      	ldr	r0, [r7, #16]
 800b564:	f7fb fad0 	bl	8006b08 <pbuf_free>
  }

  return ERR_MEM;
 800b568:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3724      	adds	r7, #36	; 0x24
 800b570:	46bd      	mov	sp, r7
 800b572:	bd90      	pop	{r4, r7, pc}
 800b574:	08011bac 	.word	0x08011bac
 800b578:	08011f40 	.word	0x08011f40
 800b57c:	08011c00 	.word	0x08011c00
 800b580:	08011f64 	.word	0x08011f64
 800b584:	08011f88 	.word	0x08011f88
 800b588:	08011f98 	.word	0x08011f98
 800b58c:	08011fa8 	.word	0x08011fa8

0800b590 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b590:	b590      	push	{r4, r7, lr}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d106      	bne.n	800b5ac <tcp_send_fin+0x1c>
 800b59e:	4b21      	ldr	r3, [pc, #132]	; (800b624 <tcp_send_fin+0x94>)
 800b5a0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b5a4:	4920      	ldr	r1, [pc, #128]	; (800b628 <tcp_send_fin+0x98>)
 800b5a6:	4821      	ldr	r0, [pc, #132]	; (800b62c <tcp_send_fin+0x9c>)
 800b5a8:	f003 ff08 	bl	800f3bc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d02e      	beq.n	800b612 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5b8:	60fb      	str	r3, [r7, #12]
 800b5ba:	e002      	b.n	800b5c2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1f8      	bne.n	800b5bc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	899b      	ldrh	r3, [r3, #12]
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fa f804 	bl	80055e0 <lwip_htons>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	f003 0307 	and.w	r3, r3, #7
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d116      	bne.n	800b612 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	899b      	ldrh	r3, [r3, #12]
 800b5ea:	b29c      	uxth	r4, r3
 800b5ec:	2001      	movs	r0, #1
 800b5ee:	f7f9 fff7 	bl	80055e0 <lwip_htons>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	4322      	orrs	r2, r4
 800b5fc:	b292      	uxth	r2, r2
 800b5fe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	8b5b      	ldrh	r3, [r3, #26]
 800b604:	f043 0320 	orr.w	r3, r3, #32
 800b608:	b29a      	uxth	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	e004      	b.n	800b61c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b612:	2101      	movs	r1, #1
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f80b 	bl	800b630 <tcp_enqueue_flags>
 800b61a:	4603      	mov	r3, r0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3714      	adds	r7, #20
 800b620:	46bd      	mov	sp, r7
 800b622:	bd90      	pop	{r4, r7, pc}
 800b624:	08011bac 	.word	0x08011bac
 800b628:	08011fb4 	.word	0x08011fb4
 800b62c:	08011c00 	.word	0x08011c00

0800b630 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b08a      	sub	sp, #40	; 0x28
 800b634:	af02      	add	r7, sp, #8
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	460b      	mov	r3, r1
 800b63a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b63c:	2300      	movs	r3, #0
 800b63e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b640:	2300      	movs	r3, #0
 800b642:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b644:	78fb      	ldrb	r3, [r7, #3]
 800b646:	f003 0303 	and.w	r3, r3, #3
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d106      	bne.n	800b65c <tcp_enqueue_flags+0x2c>
 800b64e:	4b67      	ldr	r3, [pc, #412]	; (800b7ec <tcp_enqueue_flags+0x1bc>)
 800b650:	f240 4211 	movw	r2, #1041	; 0x411
 800b654:	4966      	ldr	r1, [pc, #408]	; (800b7f0 <tcp_enqueue_flags+0x1c0>)
 800b656:	4867      	ldr	r0, [pc, #412]	; (800b7f4 <tcp_enqueue_flags+0x1c4>)
 800b658:	f003 feb0 	bl	800f3bc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d106      	bne.n	800b670 <tcp_enqueue_flags+0x40>
 800b662:	4b62      	ldr	r3, [pc, #392]	; (800b7ec <tcp_enqueue_flags+0x1bc>)
 800b664:	f240 4213 	movw	r2, #1043	; 0x413
 800b668:	4963      	ldr	r1, [pc, #396]	; (800b7f8 <tcp_enqueue_flags+0x1c8>)
 800b66a:	4862      	ldr	r0, [pc, #392]	; (800b7f4 <tcp_enqueue_flags+0x1c4>)
 800b66c:	f003 fea6 	bl	800f3bc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b670:	78fb      	ldrb	r3, [r7, #3]
 800b672:	f003 0302 	and.w	r3, r3, #2
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b67a:	2301      	movs	r3, #1
 800b67c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b67e:	7ffb      	ldrb	r3, [r7, #31]
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	b2db      	uxtb	r3, r3
 800b684:	f003 0304 	and.w	r3, r3, #4
 800b688:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b68a:	7dfb      	ldrb	r3, [r7, #23]
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b692:	4619      	mov	r1, r3
 800b694:	2036      	movs	r0, #54	; 0x36
 800b696:	f7fa ff53 	bl	8006540 <pbuf_alloc>
 800b69a:	6138      	str	r0, [r7, #16]
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d109      	bne.n	800b6b6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	8b5b      	ldrh	r3, [r3, #26]
 800b6a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b4:	e095      	b.n	800b7e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	895a      	ldrh	r2, [r3, #10]
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d206      	bcs.n	800b6d0 <tcp_enqueue_flags+0xa0>
 800b6c2:	4b4a      	ldr	r3, [pc, #296]	; (800b7ec <tcp_enqueue_flags+0x1bc>)
 800b6c4:	f240 4239 	movw	r2, #1081	; 0x439
 800b6c8:	494c      	ldr	r1, [pc, #304]	; (800b7fc <tcp_enqueue_flags+0x1cc>)
 800b6ca:	484a      	ldr	r0, [pc, #296]	; (800b7f4 <tcp_enqueue_flags+0x1c4>)
 800b6cc:	f003 fe76 	bl	800f3bc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b6d4:	78fa      	ldrb	r2, [r7, #3]
 800b6d6:	7ffb      	ldrb	r3, [r7, #31]
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	460b      	mov	r3, r1
 800b6dc:	6939      	ldr	r1, [r7, #16]
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f7ff fd70 	bl	800b1c4 <tcp_create_segment>
 800b6e4:	60f8      	str	r0, [r7, #12]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d109      	bne.n	800b700 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	8b5b      	ldrh	r3, [r3, #26]
 800b6f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b6fe:	e070      	b.n	800b7e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	f003 0303 	and.w	r3, r3, #3
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d006      	beq.n	800b71a <tcp_enqueue_flags+0xea>
 800b70c:	4b37      	ldr	r3, [pc, #220]	; (800b7ec <tcp_enqueue_flags+0x1bc>)
 800b70e:	f240 4242 	movw	r2, #1090	; 0x442
 800b712:	493b      	ldr	r1, [pc, #236]	; (800b800 <tcp_enqueue_flags+0x1d0>)
 800b714:	4837      	ldr	r0, [pc, #220]	; (800b7f4 <tcp_enqueue_flags+0x1c4>)
 800b716:	f003 fe51 	bl	800f3bc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	891b      	ldrh	r3, [r3, #8]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d006      	beq.n	800b730 <tcp_enqueue_flags+0x100>
 800b722:	4b32      	ldr	r3, [pc, #200]	; (800b7ec <tcp_enqueue_flags+0x1bc>)
 800b724:	f240 4243 	movw	r2, #1091	; 0x443
 800b728:	4936      	ldr	r1, [pc, #216]	; (800b804 <tcp_enqueue_flags+0x1d4>)
 800b72a:	4832      	ldr	r0, [pc, #200]	; (800b7f4 <tcp_enqueue_flags+0x1c4>)
 800b72c:	f003 fe46 	bl	800f3bc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b734:	2b00      	cmp	r3, #0
 800b736:	d103      	bne.n	800b740 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	66da      	str	r2, [r3, #108]	; 0x6c
 800b73e:	e00d      	b.n	800b75c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b744:	61bb      	str	r3, [r7, #24]
 800b746:	e002      	b.n	800b74e <tcp_enqueue_flags+0x11e>
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	61bb      	str	r3, [r7, #24]
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d1f8      	bne.n	800b748 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b764:	78fb      	ldrb	r3, [r7, #3]
 800b766:	f003 0302 	and.w	r3, r3, #2
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d104      	bne.n	800b778 <tcp_enqueue_flags+0x148>
 800b76e:	78fb      	ldrb	r3, [r7, #3]
 800b770:	f003 0301 	and.w	r3, r3, #1
 800b774:	2b00      	cmp	r3, #0
 800b776:	d004      	beq.n	800b782 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b77c:	1c5a      	adds	r2, r3, #1
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b782:	78fb      	ldrb	r3, [r7, #3]
 800b784:	f003 0301 	and.w	r3, r3, #1
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d006      	beq.n	800b79a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	8b5b      	ldrh	r3, [r3, #26]
 800b790:	f043 0320 	orr.w	r3, r3, #32
 800b794:	b29a      	uxth	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fb fa3a 	bl	8006c18 <pbuf_clen>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b7ae:	4413      	add	r3, r2
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00e      	beq.n	800b7e0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d10a      	bne.n	800b7e0 <tcp_enqueue_flags+0x1b0>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d106      	bne.n	800b7e0 <tcp_enqueue_flags+0x1b0>
 800b7d2:	4b06      	ldr	r3, [pc, #24]	; (800b7ec <tcp_enqueue_flags+0x1bc>)
 800b7d4:	f240 4265 	movw	r2, #1125	; 0x465
 800b7d8:	490b      	ldr	r1, [pc, #44]	; (800b808 <tcp_enqueue_flags+0x1d8>)
 800b7da:	4806      	ldr	r0, [pc, #24]	; (800b7f4 <tcp_enqueue_flags+0x1c4>)
 800b7dc:	f003 fdee 	bl	800f3bc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3720      	adds	r7, #32
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	08011bac 	.word	0x08011bac
 800b7f0:	08011fd0 	.word	0x08011fd0
 800b7f4:	08011c00 	.word	0x08011c00
 800b7f8:	08012028 	.word	0x08012028
 800b7fc:	08012048 	.word	0x08012048
 800b800:	08012084 	.word	0x08012084
 800b804:	0801209c 	.word	0x0801209c
 800b808:	080120c8 	.word	0x080120c8

0800b80c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b80c:	b5b0      	push	{r4, r5, r7, lr}
 800b80e:	b08a      	sub	sp, #40	; 0x28
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d106      	bne.n	800b828 <tcp_output+0x1c>
 800b81a:	4b8a      	ldr	r3, [pc, #552]	; (800ba44 <tcp_output+0x238>)
 800b81c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b820:	4989      	ldr	r1, [pc, #548]	; (800ba48 <tcp_output+0x23c>)
 800b822:	488a      	ldr	r0, [pc, #552]	; (800ba4c <tcp_output+0x240>)
 800b824:	f003 fdca 	bl	800f3bc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	7d1b      	ldrb	r3, [r3, #20]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d106      	bne.n	800b83e <tcp_output+0x32>
 800b830:	4b84      	ldr	r3, [pc, #528]	; (800ba44 <tcp_output+0x238>)
 800b832:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b836:	4986      	ldr	r1, [pc, #536]	; (800ba50 <tcp_output+0x244>)
 800b838:	4884      	ldr	r0, [pc, #528]	; (800ba4c <tcp_output+0x240>)
 800b83a:	f003 fdbf 	bl	800f3bc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b83e:	4b85      	ldr	r3, [pc, #532]	; (800ba54 <tcp_output+0x248>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	429a      	cmp	r2, r3
 800b846:	d101      	bne.n	800b84c <tcp_output+0x40>
    return ERR_OK;
 800b848:	2300      	movs	r3, #0
 800b84a:	e1ce      	b.n	800bbea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b858:	4293      	cmp	r3, r2
 800b85a:	bf28      	it	cs
 800b85c:	4613      	movcs	r3, r2
 800b85e:	b29b      	uxth	r3, r3
 800b860:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b866:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d10b      	bne.n	800b886 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	8b5b      	ldrh	r3, [r3, #26]
 800b872:	f003 0302 	and.w	r3, r3, #2
 800b876:	2b00      	cmp	r3, #0
 800b878:	f000 81aa 	beq.w	800bbd0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 fdcb 	bl	800c418 <tcp_send_empty_ack>
 800b882:	4603      	mov	r3, r0
 800b884:	e1b1      	b.n	800bbea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b886:	6879      	ldr	r1, [r7, #4]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	3304      	adds	r3, #4
 800b88c:	461a      	mov	r2, r3
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f7ff fc7c 	bl	800b18c <tcp_route>
 800b894:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d102      	bne.n	800b8a2 <tcp_output+0x96>
    return ERR_RTE;
 800b89c:	f06f 0303 	mvn.w	r3, #3
 800b8a0:	e1a3      	b.n	800bbea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d003      	beq.n	800b8b0 <tcp_output+0xa4>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d111      	bne.n	800b8d4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d002      	beq.n	800b8bc <tcp_output+0xb0>
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	3304      	adds	r3, #4
 800b8ba:	e000      	b.n	800b8be <tcp_output+0xb2>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d102      	bne.n	800b8cc <tcp_output+0xc0>
      return ERR_RTE;
 800b8c6:	f06f 0303 	mvn.w	r3, #3
 800b8ca:	e18e      	b.n	800bbea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7f9 fe95 	bl	800560a <lwip_htonl>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8e6:	1ad3      	subs	r3, r2, r3
 800b8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ea:	8912      	ldrh	r2, [r2, #8]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	69ba      	ldr	r2, [r7, #24]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d227      	bcs.n	800b944 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d114      	bne.n	800b92c <tcp_output+0x120>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b906:	2b00      	cmp	r3, #0
 800b908:	d110      	bne.n	800b92c <tcp_output+0x120>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10b      	bne.n	800b92c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2201      	movs	r2, #1
 800b920:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	8b5b      	ldrh	r3, [r3, #26]
 800b930:	f003 0302 	and.w	r3, r3, #2
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 814d 	beq.w	800bbd4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fd6c 	bl	800c418 <tcp_send_empty_ack>
 800b940:	4603      	mov	r3, r0
 800b942:	e152      	b.n	800bbea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b950:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b952:	6a3b      	ldr	r3, [r7, #32]
 800b954:	2b00      	cmp	r3, #0
 800b956:	f000 811c 	beq.w	800bb92 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b95a:	e002      	b.n	800b962 <tcp_output+0x156>
 800b95c:	6a3b      	ldr	r3, [r7, #32]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	623b      	str	r3, [r7, #32]
 800b962:	6a3b      	ldr	r3, [r7, #32]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1f8      	bne.n	800b95c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b96a:	e112      	b.n	800bb92 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	899b      	ldrh	r3, [r3, #12]
 800b972:	b29b      	uxth	r3, r3
 800b974:	4618      	mov	r0, r3
 800b976:	f7f9 fe33 	bl	80055e0 <lwip_htons>
 800b97a:	4603      	mov	r3, r0
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	f003 0304 	and.w	r3, r3, #4
 800b982:	2b00      	cmp	r3, #0
 800b984:	d006      	beq.n	800b994 <tcp_output+0x188>
 800b986:	4b2f      	ldr	r3, [pc, #188]	; (800ba44 <tcp_output+0x238>)
 800b988:	f240 5236 	movw	r2, #1334	; 0x536
 800b98c:	4932      	ldr	r1, [pc, #200]	; (800ba58 <tcp_output+0x24c>)
 800b98e:	482f      	ldr	r0, [pc, #188]	; (800ba4c <tcp_output+0x240>)
 800b990:	f003 fd14 	bl	800f3bc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d01f      	beq.n	800b9dc <tcp_output+0x1d0>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	8b5b      	ldrh	r3, [r3, #26]
 800b9a0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d119      	bne.n	800b9dc <tcp_output+0x1d0>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00b      	beq.n	800b9c8 <tcp_output+0x1bc>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d110      	bne.n	800b9dc <tcp_output+0x1d0>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9be:	891a      	ldrh	r2, [r3, #8]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d209      	bcs.n	800b9dc <tcp_output+0x1d0>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d004      	beq.n	800b9dc <tcp_output+0x1d0>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9d8:	2b08      	cmp	r3, #8
 800b9da:	d901      	bls.n	800b9e0 <tcp_output+0x1d4>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e000      	b.n	800b9e2 <tcp_output+0x1d6>
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d106      	bne.n	800b9f4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	8b5b      	ldrh	r3, [r3, #26]
 800b9ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f000 80e4 	beq.w	800bbbc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	7d1b      	ldrb	r3, [r3, #20]
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d00d      	beq.n	800ba18 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	899b      	ldrh	r3, [r3, #12]
 800ba02:	b29c      	uxth	r4, r3
 800ba04:	2010      	movs	r0, #16
 800ba06:	f7f9 fdeb 	bl	80055e0 <lwip_htons>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	4322      	orrs	r2, r4
 800ba14:	b292      	uxth	r2, r2
 800ba16:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ba18:	697a      	ldr	r2, [r7, #20]
 800ba1a:	6879      	ldr	r1, [r7, #4]
 800ba1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba1e:	f000 f909 	bl	800bc34 <tcp_output_segment>
 800ba22:	4603      	mov	r3, r0
 800ba24:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ba26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d016      	beq.n	800ba5c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	8b5b      	ldrh	r3, [r3, #26]
 800ba32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	835a      	strh	r2, [r3, #26]
      return err;
 800ba3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba40:	e0d3      	b.n	800bbea <tcp_output+0x3de>
 800ba42:	bf00      	nop
 800ba44:	08011bac 	.word	0x08011bac
 800ba48:	080120f0 	.word	0x080120f0
 800ba4c:	08011c00 	.word	0x08011c00
 800ba50:	08012108 	.word	0x08012108
 800ba54:	20008a28 	.word	0x20008a28
 800ba58:	08012130 	.word	0x08012130
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	7d1b      	ldrb	r3, [r3, #20]
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	d006      	beq.n	800ba7a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	8b5b      	ldrh	r3, [r3, #26]
 800ba70:	f023 0303 	bic.w	r3, r3, #3
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7f9 fdc2 	bl	800560a <lwip_htonl>
 800ba86:	4604      	mov	r4, r0
 800ba88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8a:	891b      	ldrh	r3, [r3, #8]
 800ba8c:	461d      	mov	r5, r3
 800ba8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	899b      	ldrh	r3, [r3, #12]
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7f9 fda2 	bl	80055e0 <lwip_htons>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	f003 0303 	and.w	r3, r3, #3
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d001      	beq.n	800baac <tcp_output+0x2a0>
 800baa8:	2301      	movs	r3, #1
 800baaa:	e000      	b.n	800baae <tcp_output+0x2a2>
 800baac:	2300      	movs	r3, #0
 800baae:	442b      	add	r3, r5
 800bab0:	4423      	add	r3, r4
 800bab2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	1ad3      	subs	r3, r2, r3
 800babc:	2b00      	cmp	r3, #0
 800babe:	da02      	bge.n	800bac6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800bac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac8:	891b      	ldrh	r3, [r3, #8]
 800baca:	461c      	mov	r4, r3
 800bacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	899b      	ldrh	r3, [r3, #12]
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7f9 fd83 	bl	80055e0 <lwip_htons>
 800bada:	4603      	mov	r3, r0
 800badc:	b2db      	uxtb	r3, r3
 800bade:	f003 0303 	and.w	r3, r3, #3
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d001      	beq.n	800baea <tcp_output+0x2de>
 800bae6:	2301      	movs	r3, #1
 800bae8:	e000      	b.n	800baec <tcp_output+0x2e0>
 800baea:	2300      	movs	r3, #0
 800baec:	4423      	add	r3, r4
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d049      	beq.n	800bb86 <tcp_output+0x37a>
      seg->next = NULL;
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf4:	2200      	movs	r2, #0
 800baf6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d105      	bne.n	800bb0c <tcp_output+0x300>
        pcb->unacked = seg;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb04:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800bb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb08:	623b      	str	r3, [r7, #32]
 800bb0a:	e03f      	b.n	800bb8c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7f9 fd79 	bl	800560a <lwip_htonl>
 800bb18:	4604      	mov	r4, r0
 800bb1a:	6a3b      	ldr	r3, [r7, #32]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7f9 fd72 	bl	800560a <lwip_htonl>
 800bb26:	4603      	mov	r3, r0
 800bb28:	1ae3      	subs	r3, r4, r3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	da24      	bge.n	800bb78 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	3370      	adds	r3, #112	; 0x70
 800bb32:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bb34:	e002      	b.n	800bb3c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d011      	beq.n	800bb68 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7f9 fd5c 	bl	800560a <lwip_htonl>
 800bb52:	4604      	mov	r4, r0
 800bb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7f9 fd55 	bl	800560a <lwip_htonl>
 800bb60:	4603      	mov	r3, r0
 800bb62:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	dbe6      	blt.n	800bb36 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb74:	601a      	str	r2, [r3, #0]
 800bb76:	e009      	b.n	800bb8c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bb78:	6a3b      	ldr	r3, [r7, #32]
 800bb7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb7c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	623b      	str	r3, [r7, #32]
 800bb84:	e002      	b.n	800bb8c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bb86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb88:	f7fc fb8f 	bl	80082aa <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb90:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d012      	beq.n	800bbbe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7f9 fd33 	bl	800560a <lwip_htonl>
 800bba4:	4602      	mov	r2, r0
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbaa:	1ad3      	subs	r3, r2, r3
 800bbac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbae:	8912      	ldrh	r2, [r2, #8]
 800bbb0:	4413      	add	r3, r2
  while (seg != NULL &&
 800bbb2:	69ba      	ldr	r2, [r7, #24]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	f4bf aed9 	bcs.w	800b96c <tcp_output+0x160>
 800bbba:	e000      	b.n	800bbbe <tcp_output+0x3b2>
      break;
 800bbbc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d108      	bne.n	800bbd8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800bbce:	e004      	b.n	800bbda <tcp_output+0x3ce>
    goto output_done;
 800bbd0:	bf00      	nop
 800bbd2:	e002      	b.n	800bbda <tcp_output+0x3ce>
    goto output_done;
 800bbd4:	bf00      	nop
 800bbd6:	e000      	b.n	800bbda <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bbd8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	8b5b      	ldrh	r3, [r3, #26]
 800bbde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbe2:	b29a      	uxth	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3728      	adds	r7, #40	; 0x28
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bdb0      	pop	{r4, r5, r7, pc}
 800bbf2:	bf00      	nop

0800bbf4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d106      	bne.n	800bc10 <tcp_output_segment_busy+0x1c>
 800bc02:	4b09      	ldr	r3, [pc, #36]	; (800bc28 <tcp_output_segment_busy+0x34>)
 800bc04:	f240 529a 	movw	r2, #1434	; 0x59a
 800bc08:	4908      	ldr	r1, [pc, #32]	; (800bc2c <tcp_output_segment_busy+0x38>)
 800bc0a:	4809      	ldr	r0, [pc, #36]	; (800bc30 <tcp_output_segment_busy+0x3c>)
 800bc0c:	f003 fbd6 	bl	800f3bc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	7b9b      	ldrb	r3, [r3, #14]
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d001      	beq.n	800bc1e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e000      	b.n	800bc20 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	08011bac 	.word	0x08011bac
 800bc2c:	08012148 	.word	0x08012148
 800bc30:	08011c00 	.word	0x08011c00

0800bc34 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bc34:	b5b0      	push	{r4, r5, r7, lr}
 800bc36:	b08c      	sub	sp, #48	; 0x30
 800bc38:	af04      	add	r7, sp, #16
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d106      	bne.n	800bc54 <tcp_output_segment+0x20>
 800bc46:	4b63      	ldr	r3, [pc, #396]	; (800bdd4 <tcp_output_segment+0x1a0>)
 800bc48:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bc4c:	4962      	ldr	r1, [pc, #392]	; (800bdd8 <tcp_output_segment+0x1a4>)
 800bc4e:	4863      	ldr	r0, [pc, #396]	; (800bddc <tcp_output_segment+0x1a8>)
 800bc50:	f003 fbb4 	bl	800f3bc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d106      	bne.n	800bc68 <tcp_output_segment+0x34>
 800bc5a:	4b5e      	ldr	r3, [pc, #376]	; (800bdd4 <tcp_output_segment+0x1a0>)
 800bc5c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bc60:	495f      	ldr	r1, [pc, #380]	; (800bde0 <tcp_output_segment+0x1ac>)
 800bc62:	485e      	ldr	r0, [pc, #376]	; (800bddc <tcp_output_segment+0x1a8>)
 800bc64:	f003 fbaa 	bl	800f3bc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d106      	bne.n	800bc7c <tcp_output_segment+0x48>
 800bc6e:	4b59      	ldr	r3, [pc, #356]	; (800bdd4 <tcp_output_segment+0x1a0>)
 800bc70:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bc74:	495b      	ldr	r1, [pc, #364]	; (800bde4 <tcp_output_segment+0x1b0>)
 800bc76:	4859      	ldr	r0, [pc, #356]	; (800bddc <tcp_output_segment+0x1a8>)
 800bc78:	f003 fba0 	bl	800f3bc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f7ff ffb9 	bl	800bbf4 <tcp_output_segment_busy>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d001      	beq.n	800bc8c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	e09f      	b.n	800bdcc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	68dc      	ldr	r4, [r3, #12]
 800bc94:	4610      	mov	r0, r2
 800bc96:	f7f9 fcb8 	bl	800560a <lwip_htonl>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	68dc      	ldr	r4, [r3, #12]
 800bca6:	4610      	mov	r0, r2
 800bca8:	f7f9 fc9a 	bl	80055e0 <lwip_htons>
 800bcac:	4603      	mov	r3, r0
 800bcae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb4:	68ba      	ldr	r2, [r7, #8]
 800bcb6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bcb8:	441a      	add	r2, r3
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	3314      	adds	r3, #20
 800bcc4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	7a9b      	ldrb	r3, [r3, #10]
 800bcca:	f003 0301 	and.w	r3, r3, #1
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d015      	beq.n	800bcfe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	3304      	adds	r3, #4
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	6879      	ldr	r1, [r7, #4]
 800bcda:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bcde:	f7fc fe8b 	bl	80089f8 <tcp_eff_send_mss_netif>
 800bce2:	4603      	mov	r3, r0
 800bce4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bce6:	8b7b      	ldrh	r3, [r7, #26]
 800bce8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7f9 fc8c 	bl	800560a <lwip_htonl>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	3304      	adds	r3, #4
 800bcfc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	da02      	bge.n	800bd0e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d10c      	bne.n	800bd30 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bd16:	4b34      	ldr	r3, [pc, #208]	; (800bde8 <tcp_output_segment+0x1b4>)
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7f9 fc70 	bl	800560a <lwip_htonl>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	68da      	ldr	r2, [r3, #12]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	1ad3      	subs	r3, r2, r3
 800bd3c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	8959      	ldrh	r1, [r3, #10]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	8b3a      	ldrh	r2, [r7, #24]
 800bd4a:	1a8a      	subs	r2, r1, r2
 800bd4c:	b292      	uxth	r2, r2
 800bd4e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	8919      	ldrh	r1, [r3, #8]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	8b3a      	ldrh	r2, [r7, #24]
 800bd5c:	1a8a      	subs	r2, r1, r2
 800bd5e:	b292      	uxth	r2, r2
 800bd60:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	68d2      	ldr	r2, [r2, #12]
 800bd6a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	2200      	movs	r2, #0
 800bd72:	741a      	strb	r2, [r3, #16]
 800bd74:	2200      	movs	r2, #0
 800bd76:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	f103 0214 	add.w	r2, r3, #20
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	7a9b      	ldrb	r3, [r3, #10]
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	f003 0304 	and.w	r3, r3, #4
 800bd8a:	4413      	add	r3, r2
 800bd8c:	69fa      	ldr	r2, [r7, #28]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d006      	beq.n	800bda0 <tcp_output_segment+0x16c>
 800bd92:	4b10      	ldr	r3, [pc, #64]	; (800bdd4 <tcp_output_segment+0x1a0>)
 800bd94:	f240 621c 	movw	r2, #1564	; 0x61c
 800bd98:	4914      	ldr	r1, [pc, #80]	; (800bdec <tcp_output_segment+0x1b8>)
 800bd9a:	4810      	ldr	r0, [pc, #64]	; (800bddc <tcp_output_segment+0x1a8>)
 800bd9c:	f003 fb0e 	bl	800f3bc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6858      	ldr	r0, [r3, #4]
 800bda4:	68b9      	ldr	r1, [r7, #8]
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	1d1c      	adds	r4, r3, #4
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	7add      	ldrb	r5, [r3, #11]
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	7a9b      	ldrb	r3, [r3, #10]
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	9202      	str	r2, [sp, #8]
 800bdb6:	2206      	movs	r2, #6
 800bdb8:	9201      	str	r2, [sp, #4]
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	462b      	mov	r3, r5
 800bdbe:	4622      	mov	r2, r4
 800bdc0:	f002 f9f4 	bl	800e1ac <ip4_output_if>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bdc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3720      	adds	r7, #32
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bdb0      	pop	{r4, r5, r7, pc}
 800bdd4:	08011bac 	.word	0x08011bac
 800bdd8:	08012170 	.word	0x08012170
 800bddc:	08011c00 	.word	0x08011c00
 800bde0:	08012190 	.word	0x08012190
 800bde4:	080121b0 	.word	0x080121b0
 800bde8:	200089dc 	.word	0x200089dc
 800bdec:	080121d4 	.word	0x080121d4

0800bdf0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800bdf0:	b5b0      	push	{r4, r5, r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d106      	bne.n	800be0c <tcp_rexmit_rto_prepare+0x1c>
 800bdfe:	4b31      	ldr	r3, [pc, #196]	; (800bec4 <tcp_rexmit_rto_prepare+0xd4>)
 800be00:	f240 6263 	movw	r2, #1635	; 0x663
 800be04:	4930      	ldr	r1, [pc, #192]	; (800bec8 <tcp_rexmit_rto_prepare+0xd8>)
 800be06:	4831      	ldr	r0, [pc, #196]	; (800becc <tcp_rexmit_rto_prepare+0xdc>)
 800be08:	f003 fad8 	bl	800f3bc <iprintf>

  if (pcb->unacked == NULL) {
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be10:	2b00      	cmp	r3, #0
 800be12:	d102      	bne.n	800be1a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800be14:	f06f 0305 	mvn.w	r3, #5
 800be18:	e050      	b.n	800bebc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be1e:	60fb      	str	r3, [r7, #12]
 800be20:	e00b      	b.n	800be3a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800be22:	68f8      	ldr	r0, [r7, #12]
 800be24:	f7ff fee6 	bl	800bbf4 <tcp_output_segment_busy>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d002      	beq.n	800be34 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800be2e:	f06f 0305 	mvn.w	r3, #5
 800be32:	e043      	b.n	800bebc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	60fb      	str	r3, [r7, #12]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1ef      	bne.n	800be22 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f7ff fed6 	bl	800bbf4 <tcp_output_segment_busy>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d002      	beq.n	800be54 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800be4e:	f06f 0305 	mvn.w	r3, #5
 800be52:	e033      	b.n	800bebc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	8b5b      	ldrh	r3, [r3, #26]
 800be6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800be72:	b29a      	uxth	r2, r3
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	4618      	mov	r0, r3
 800be80:	f7f9 fbc3 	bl	800560a <lwip_htonl>
 800be84:	4604      	mov	r4, r0
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	891b      	ldrh	r3, [r3, #8]
 800be8a:	461d      	mov	r5, r3
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	899b      	ldrh	r3, [r3, #12]
 800be92:	b29b      	uxth	r3, r3
 800be94:	4618      	mov	r0, r3
 800be96:	f7f9 fba3 	bl	80055e0 <lwip_htons>
 800be9a:	4603      	mov	r3, r0
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	f003 0303 	and.w	r3, r3, #3
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d001      	beq.n	800beaa <tcp_rexmit_rto_prepare+0xba>
 800bea6:	2301      	movs	r3, #1
 800bea8:	e000      	b.n	800beac <tcp_rexmit_rto_prepare+0xbc>
 800beaa:	2300      	movs	r3, #0
 800beac:	442b      	add	r3, r5
 800beae:	18e2      	adds	r2, r4, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800beba:	2300      	movs	r3, #0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bdb0      	pop	{r4, r5, r7, pc}
 800bec4:	08011bac 	.word	0x08011bac
 800bec8:	080121e8 	.word	0x080121e8
 800becc:	08011c00 	.word	0x08011c00

0800bed0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d106      	bne.n	800beec <tcp_rexmit_rto_commit+0x1c>
 800bede:	4b0d      	ldr	r3, [pc, #52]	; (800bf14 <tcp_rexmit_rto_commit+0x44>)
 800bee0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bee4:	490c      	ldr	r1, [pc, #48]	; (800bf18 <tcp_rexmit_rto_commit+0x48>)
 800bee6:	480d      	ldr	r0, [pc, #52]	; (800bf1c <tcp_rexmit_rto_commit+0x4c>)
 800bee8:	f003 fa68 	bl	800f3bc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bef2:	2bff      	cmp	r3, #255	; 0xff
 800bef4:	d007      	beq.n	800bf06 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800befc:	3301      	adds	r3, #1
 800befe:	b2da      	uxtb	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7ff fc80 	bl	800b80c <tcp_output>
}
 800bf0c:	bf00      	nop
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	08011bac 	.word	0x08011bac
 800bf18:	0801220c 	.word	0x0801220c
 800bf1c:	08011c00 	.word	0x08011c00

0800bf20 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d106      	bne.n	800bf3c <tcp_rexmit_rto+0x1c>
 800bf2e:	4b0a      	ldr	r3, [pc, #40]	; (800bf58 <tcp_rexmit_rto+0x38>)
 800bf30:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bf34:	4909      	ldr	r1, [pc, #36]	; (800bf5c <tcp_rexmit_rto+0x3c>)
 800bf36:	480a      	ldr	r0, [pc, #40]	; (800bf60 <tcp_rexmit_rto+0x40>)
 800bf38:	f003 fa40 	bl	800f3bc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f7ff ff57 	bl	800bdf0 <tcp_rexmit_rto_prepare>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d102      	bne.n	800bf4e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f7ff ffc1 	bl	800bed0 <tcp_rexmit_rto_commit>
  }
}
 800bf4e:	bf00      	nop
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	08011bac 	.word	0x08011bac
 800bf5c:	08012230 	.word	0x08012230
 800bf60:	08011c00 	.word	0x08011c00

0800bf64 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bf64:	b590      	push	{r4, r7, lr}
 800bf66:	b085      	sub	sp, #20
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d106      	bne.n	800bf80 <tcp_rexmit+0x1c>
 800bf72:	4b2f      	ldr	r3, [pc, #188]	; (800c030 <tcp_rexmit+0xcc>)
 800bf74:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800bf78:	492e      	ldr	r1, [pc, #184]	; (800c034 <tcp_rexmit+0xd0>)
 800bf7a:	482f      	ldr	r0, [pc, #188]	; (800c038 <tcp_rexmit+0xd4>)
 800bf7c:	f003 fa1e 	bl	800f3bc <iprintf>

  if (pcb->unacked == NULL) {
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d102      	bne.n	800bf8e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bf88:	f06f 0305 	mvn.w	r3, #5
 800bf8c:	e04c      	b.n	800c028 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf92:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bf94:	68b8      	ldr	r0, [r7, #8]
 800bf96:	f7ff fe2d 	bl	800bbf4 <tcp_output_segment_busy>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d002      	beq.n	800bfa6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bfa0:	f06f 0305 	mvn.w	r3, #5
 800bfa4:	e040      	b.n	800c028 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	336c      	adds	r3, #108	; 0x6c
 800bfb2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bfb4:	e002      	b.n	800bfbc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d011      	beq.n	800bfe8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7f9 fb1c 	bl	800560a <lwip_htonl>
 800bfd2:	4604      	mov	r4, r0
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7f9 fb15 	bl	800560a <lwip_htonl>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	dbe6      	blt.n	800bfb6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d103      	bne.n	800c006 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2200      	movs	r2, #0
 800c002:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c00c:	2bff      	cmp	r3, #255	; 0xff
 800c00e:	d007      	beq.n	800c020 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c016:	3301      	adds	r3, #1
 800c018:	b2da      	uxtb	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c026:	2300      	movs	r3, #0
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3714      	adds	r7, #20
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd90      	pop	{r4, r7, pc}
 800c030:	08011bac 	.word	0x08011bac
 800c034:	0801224c 	.word	0x0801224c
 800c038:	08011c00 	.word	0x08011c00

0800c03c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d106      	bne.n	800c058 <tcp_rexmit_fast+0x1c>
 800c04a:	4b2a      	ldr	r3, [pc, #168]	; (800c0f4 <tcp_rexmit_fast+0xb8>)
 800c04c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c050:	4929      	ldr	r1, [pc, #164]	; (800c0f8 <tcp_rexmit_fast+0xbc>)
 800c052:	482a      	ldr	r0, [pc, #168]	; (800c0fc <tcp_rexmit_fast+0xc0>)
 800c054:	f003 f9b2 	bl	800f3bc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d045      	beq.n	800c0ec <tcp_rexmit_fast+0xb0>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	8b5b      	ldrh	r3, [r3, #26]
 800c064:	f003 0304 	and.w	r3, r3, #4
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d13f      	bne.n	800c0ec <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f7ff ff79 	bl	800bf64 <tcp_rexmit>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d139      	bne.n	800c0ec <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c084:	4293      	cmp	r3, r2
 800c086:	bf28      	it	cs
 800c088:	4613      	movcs	r3, r2
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	da00      	bge.n	800c092 <tcp_rexmit_fast+0x56>
 800c090:	3301      	adds	r3, #1
 800c092:	105b      	asrs	r3, r3, #1
 800c094:	b29a      	uxth	r2, r3
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0a8:	005b      	lsls	r3, r3, #1
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d206      	bcs.n	800c0bc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0b2:	005b      	lsls	r3, r3, #1
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	0049      	lsls	r1, r1, #1
 800c0ca:	440b      	add	r3, r1
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	4413      	add	r3, r2
 800c0d0:	b29a      	uxth	r2, r3
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	8b5b      	ldrh	r3, [r3, #26]
 800c0dc:	f043 0304 	orr.w	r3, r3, #4
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	08011bac 	.word	0x08011bac
 800c0f8:	08012264 	.word	0x08012264
 800c0fc:	08011c00 	.word	0x08011c00

0800c100 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	607b      	str	r3, [r7, #4]
 800c10a:	460b      	mov	r3, r1
 800c10c:	817b      	strh	r3, [r7, #10]
 800c10e:	4613      	mov	r3, r2
 800c110:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c112:	897a      	ldrh	r2, [r7, #10]
 800c114:	893b      	ldrh	r3, [r7, #8]
 800c116:	4413      	add	r3, r2
 800c118:	b29b      	uxth	r3, r3
 800c11a:	3314      	adds	r3, #20
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c122:	4619      	mov	r1, r3
 800c124:	2022      	movs	r0, #34	; 0x22
 800c126:	f7fa fa0b 	bl	8006540 <pbuf_alloc>
 800c12a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d04d      	beq.n	800c1ce <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c132:	897b      	ldrh	r3, [r7, #10]
 800c134:	3313      	adds	r3, #19
 800c136:	697a      	ldr	r2, [r7, #20]
 800c138:	8952      	ldrh	r2, [r2, #10]
 800c13a:	4293      	cmp	r3, r2
 800c13c:	db06      	blt.n	800c14c <tcp_output_alloc_header_common+0x4c>
 800c13e:	4b26      	ldr	r3, [pc, #152]	; (800c1d8 <tcp_output_alloc_header_common+0xd8>)
 800c140:	f240 7223 	movw	r2, #1827	; 0x723
 800c144:	4925      	ldr	r1, [pc, #148]	; (800c1dc <tcp_output_alloc_header_common+0xdc>)
 800c146:	4826      	ldr	r0, [pc, #152]	; (800c1e0 <tcp_output_alloc_header_common+0xe0>)
 800c148:	f003 f938 	bl	800f3bc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c152:	8c3b      	ldrh	r3, [r7, #32]
 800c154:	4618      	mov	r0, r3
 800c156:	f7f9 fa43 	bl	80055e0 <lwip_htons>
 800c15a:	4603      	mov	r3, r0
 800c15c:	461a      	mov	r2, r3
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c164:	4618      	mov	r0, r3
 800c166:	f7f9 fa3b 	bl	80055e0 <lwip_htons>
 800c16a:	4603      	mov	r3, r0
 800c16c:	461a      	mov	r2, r3
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f7f9 fa46 	bl	800560a <lwip_htonl>
 800c17e:	4602      	mov	r2, r0
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c184:	897b      	ldrh	r3, [r7, #10]
 800c186:	089b      	lsrs	r3, r3, #2
 800c188:	b29b      	uxth	r3, r3
 800c18a:	3305      	adds	r3, #5
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	031b      	lsls	r3, r3, #12
 800c190:	b29a      	uxth	r2, r3
 800c192:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c196:	b29b      	uxth	r3, r3
 800c198:	4313      	orrs	r3, r2
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7f9 fa1f 	bl	80055e0 <lwip_htons>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c1aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7f9 fa17 	bl	80055e0 <lwip_htons>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	741a      	strb	r2, [r3, #16]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	749a      	strb	r2, [r3, #18]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c1ce:	697b      	ldr	r3, [r7, #20]
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3718      	adds	r7, #24
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	08011bac 	.word	0x08011bac
 800c1dc:	08012284 	.word	0x08012284
 800c1e0:	08011c00 	.word	0x08011c00

0800c1e4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c1e4:	b5b0      	push	{r4, r5, r7, lr}
 800c1e6:	b08a      	sub	sp, #40	; 0x28
 800c1e8:	af04      	add	r7, sp, #16
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	607b      	str	r3, [r7, #4]
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	817b      	strh	r3, [r7, #10]
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d106      	bne.n	800c20a <tcp_output_alloc_header+0x26>
 800c1fc:	4b15      	ldr	r3, [pc, #84]	; (800c254 <tcp_output_alloc_header+0x70>)
 800c1fe:	f240 7242 	movw	r2, #1858	; 0x742
 800c202:	4915      	ldr	r1, [pc, #84]	; (800c258 <tcp_output_alloc_header+0x74>)
 800c204:	4815      	ldr	r0, [pc, #84]	; (800c25c <tcp_output_alloc_header+0x78>)
 800c206:	f003 f8d9 	bl	800f3bc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	8adb      	ldrh	r3, [r3, #22]
 800c212:	68fa      	ldr	r2, [r7, #12]
 800c214:	8b12      	ldrh	r2, [r2, #24]
 800c216:	68f9      	ldr	r1, [r7, #12]
 800c218:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c21a:	893d      	ldrh	r5, [r7, #8]
 800c21c:	897c      	ldrh	r4, [r7, #10]
 800c21e:	9103      	str	r1, [sp, #12]
 800c220:	2110      	movs	r1, #16
 800c222:	9102      	str	r1, [sp, #8]
 800c224:	9201      	str	r2, [sp, #4]
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	462a      	mov	r2, r5
 800c22c:	4621      	mov	r1, r4
 800c22e:	f7ff ff67 	bl	800c100 <tcp_output_alloc_header_common>
 800c232:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d006      	beq.n	800c248 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c242:	441a      	add	r2, r3
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c248:	697b      	ldr	r3, [r7, #20]
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3718      	adds	r7, #24
 800c24e:	46bd      	mov	sp, r7
 800c250:	bdb0      	pop	{r4, r5, r7, pc}
 800c252:	bf00      	nop
 800c254:	08011bac 	.word	0x08011bac
 800c258:	080122b4 	.word	0x080122b4
 800c25c:	08011c00 	.word	0x08011c00

0800c260 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b088      	sub	sp, #32
 800c264:	af00      	add	r7, sp, #0
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	4611      	mov	r1, r2
 800c26c:	461a      	mov	r2, r3
 800c26e:	460b      	mov	r3, r1
 800c270:	71fb      	strb	r3, [r7, #7]
 800c272:	4613      	mov	r3, r2
 800c274:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c276:	2300      	movs	r3, #0
 800c278:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d106      	bne.n	800c28e <tcp_output_fill_options+0x2e>
 800c280:	4b13      	ldr	r3, [pc, #76]	; (800c2d0 <tcp_output_fill_options+0x70>)
 800c282:	f240 7256 	movw	r2, #1878	; 0x756
 800c286:	4913      	ldr	r1, [pc, #76]	; (800c2d4 <tcp_output_fill_options+0x74>)
 800c288:	4813      	ldr	r0, [pc, #76]	; (800c2d8 <tcp_output_fill_options+0x78>)
 800c28a:	f003 f897 	bl	800f3bc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	3314      	adds	r3, #20
 800c298:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	f103 0214 	add.w	r2, r3, #20
 800c2a0:	8bfb      	ldrh	r3, [r7, #30]
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	79fb      	ldrb	r3, [r7, #7]
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	f003 0304 	and.w	r3, r3, #4
 800c2ae:	440b      	add	r3, r1
 800c2b0:	4413      	add	r3, r2
 800c2b2:	697a      	ldr	r2, [r7, #20]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d006      	beq.n	800c2c6 <tcp_output_fill_options+0x66>
 800c2b8:	4b05      	ldr	r3, [pc, #20]	; (800c2d0 <tcp_output_fill_options+0x70>)
 800c2ba:	f240 7275 	movw	r2, #1909	; 0x775
 800c2be:	4907      	ldr	r1, [pc, #28]	; (800c2dc <tcp_output_fill_options+0x7c>)
 800c2c0:	4805      	ldr	r0, [pc, #20]	; (800c2d8 <tcp_output_fill_options+0x78>)
 800c2c2:	f003 f87b 	bl	800f3bc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c2c6:	bf00      	nop
 800c2c8:	3720      	adds	r7, #32
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	08011bac 	.word	0x08011bac
 800c2d4:	080122dc 	.word	0x080122dc
 800c2d8:	08011c00 	.word	0x08011c00
 800c2dc:	080121d4 	.word	0x080121d4

0800c2e0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b08a      	sub	sp, #40	; 0x28
 800c2e4:	af04      	add	r7, sp, #16
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	607a      	str	r2, [r7, #4]
 800c2ec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d106      	bne.n	800c302 <tcp_output_control_segment+0x22>
 800c2f4:	4b1c      	ldr	r3, [pc, #112]	; (800c368 <tcp_output_control_segment+0x88>)
 800c2f6:	f240 7287 	movw	r2, #1927	; 0x787
 800c2fa:	491c      	ldr	r1, [pc, #112]	; (800c36c <tcp_output_control_segment+0x8c>)
 800c2fc:	481c      	ldr	r0, [pc, #112]	; (800c370 <tcp_output_control_segment+0x90>)
 800c2fe:	f003 f85d 	bl	800f3bc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c302:	683a      	ldr	r2, [r7, #0]
 800c304:	6879      	ldr	r1, [r7, #4]
 800c306:	68f8      	ldr	r0, [r7, #12]
 800c308:	f7fe ff40 	bl	800b18c <tcp_route>
 800c30c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d102      	bne.n	800c31a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c314:	23fc      	movs	r3, #252	; 0xfc
 800c316:	75fb      	strb	r3, [r7, #23]
 800c318:	e01c      	b.n	800c354 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d006      	beq.n	800c32e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	7adb      	ldrb	r3, [r3, #11]
 800c324:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	7a9b      	ldrb	r3, [r3, #10]
 800c32a:	757b      	strb	r3, [r7, #21]
 800c32c:	e003      	b.n	800c336 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c32e:	23ff      	movs	r3, #255	; 0xff
 800c330:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c336:	7dba      	ldrb	r2, [r7, #22]
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	9302      	str	r3, [sp, #8]
 800c33c:	2306      	movs	r3, #6
 800c33e:	9301      	str	r3, [sp, #4]
 800c340:	7d7b      	ldrb	r3, [r7, #21]
 800c342:	9300      	str	r3, [sp, #0]
 800c344:	4613      	mov	r3, r2
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	6879      	ldr	r1, [r7, #4]
 800c34a:	68b8      	ldr	r0, [r7, #8]
 800c34c:	f001 ff2e 	bl	800e1ac <ip4_output_if>
 800c350:	4603      	mov	r3, r0
 800c352:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c354:	68b8      	ldr	r0, [r7, #8]
 800c356:	f7fa fbd7 	bl	8006b08 <pbuf_free>
  return err;
 800c35a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3718      	adds	r7, #24
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	08011bac 	.word	0x08011bac
 800c36c:	08012304 	.word	0x08012304
 800c370:	08011c00 	.word	0x08011c00

0800c374 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c374:	b590      	push	{r4, r7, lr}
 800c376:	b08b      	sub	sp, #44	; 0x2c
 800c378:	af04      	add	r7, sp, #16
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
 800c380:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d106      	bne.n	800c396 <tcp_rst+0x22>
 800c388:	4b1f      	ldr	r3, [pc, #124]	; (800c408 <tcp_rst+0x94>)
 800c38a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c38e:	491f      	ldr	r1, [pc, #124]	; (800c40c <tcp_rst+0x98>)
 800c390:	481f      	ldr	r0, [pc, #124]	; (800c410 <tcp_rst+0x9c>)
 800c392:	f003 f813 	bl	800f3bc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d106      	bne.n	800c3aa <tcp_rst+0x36>
 800c39c:	4b1a      	ldr	r3, [pc, #104]	; (800c408 <tcp_rst+0x94>)
 800c39e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c3a2:	491c      	ldr	r1, [pc, #112]	; (800c414 <tcp_rst+0xa0>)
 800c3a4:	481a      	ldr	r0, [pc, #104]	; (800c410 <tcp_rst+0x9c>)
 800c3a6:	f003 f809 	bl	800f3bc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c3ae:	f246 0308 	movw	r3, #24584	; 0x6008
 800c3b2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c3b4:	7dfb      	ldrb	r3, [r7, #23]
 800c3b6:	b29c      	uxth	r4, r3
 800c3b8:	68b8      	ldr	r0, [r7, #8]
 800c3ba:	f7f9 f926 	bl	800560a <lwip_htonl>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	8abb      	ldrh	r3, [r7, #20]
 800c3c2:	9303      	str	r3, [sp, #12]
 800c3c4:	2314      	movs	r3, #20
 800c3c6:	9302      	str	r3, [sp, #8]
 800c3c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c3ca:	9301      	str	r3, [sp, #4]
 800c3cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c3ce:	9300      	str	r3, [sp, #0]
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	4621      	mov	r1, r4
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f7ff fe92 	bl	800c100 <tcp_output_alloc_header_common>
 800c3dc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00c      	beq.n	800c3fe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c3e4:	7dfb      	ldrb	r3, [r7, #23]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	6939      	ldr	r1, [r7, #16]
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f7ff ff38 	bl	800c260 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f2:	683a      	ldr	r2, [r7, #0]
 800c3f4:	6939      	ldr	r1, [r7, #16]
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f7ff ff72 	bl	800c2e0 <tcp_output_control_segment>
 800c3fc:	e000      	b.n	800c400 <tcp_rst+0x8c>
    return;
 800c3fe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c400:	371c      	adds	r7, #28
 800c402:	46bd      	mov	sp, r7
 800c404:	bd90      	pop	{r4, r7, pc}
 800c406:	bf00      	nop
 800c408:	08011bac 	.word	0x08011bac
 800c40c:	08012330 	.word	0x08012330
 800c410:	08011c00 	.word	0x08011c00
 800c414:	0801234c 	.word	0x0801234c

0800c418 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c418:	b590      	push	{r4, r7, lr}
 800c41a:	b087      	sub	sp, #28
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c424:	2300      	movs	r3, #0
 800c426:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d106      	bne.n	800c43c <tcp_send_empty_ack+0x24>
 800c42e:	4b28      	ldr	r3, [pc, #160]	; (800c4d0 <tcp_send_empty_ack+0xb8>)
 800c430:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c434:	4927      	ldr	r1, [pc, #156]	; (800c4d4 <tcp_send_empty_ack+0xbc>)
 800c436:	4828      	ldr	r0, [pc, #160]	; (800c4d8 <tcp_send_empty_ack+0xc0>)
 800c438:	f002 ffc0 	bl	800f3bc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c43c:	7dfb      	ldrb	r3, [r7, #23]
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	b2db      	uxtb	r3, r3
 800c442:	f003 0304 	and.w	r3, r3, #4
 800c446:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c448:	7d7b      	ldrb	r3, [r7, #21]
 800c44a:	b29c      	uxth	r4, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c450:	4618      	mov	r0, r3
 800c452:	f7f9 f8da 	bl	800560a <lwip_htonl>
 800c456:	4603      	mov	r3, r0
 800c458:	2200      	movs	r2, #0
 800c45a:	4621      	mov	r1, r4
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f7ff fec1 	bl	800c1e4 <tcp_output_alloc_header>
 800c462:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d109      	bne.n	800c47e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	8b5b      	ldrh	r3, [r3, #26]
 800c46e:	f043 0303 	orr.w	r3, r3, #3
 800c472:	b29a      	uxth	r2, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c478:	f06f 0301 	mvn.w	r3, #1
 800c47c:	e023      	b.n	800c4c6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c47e:	7dbb      	ldrb	r3, [r7, #22]
 800c480:	7dfa      	ldrb	r2, [r7, #23]
 800c482:	6939      	ldr	r1, [r7, #16]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f7ff feeb 	bl	800c260 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	3304      	adds	r3, #4
 800c490:	6939      	ldr	r1, [r7, #16]
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f7ff ff24 	bl	800c2e0 <tcp_output_control_segment>
 800c498:	4603      	mov	r3, r0
 800c49a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c49c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d007      	beq.n	800c4b4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	8b5b      	ldrh	r3, [r3, #26]
 800c4a8:	f043 0303 	orr.w	r3, r3, #3
 800c4ac:	b29a      	uxth	r2, r3
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	835a      	strh	r2, [r3, #26]
 800c4b2:	e006      	b.n	800c4c2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	8b5b      	ldrh	r3, [r3, #26]
 800c4b8:	f023 0303 	bic.w	r3, r3, #3
 800c4bc:	b29a      	uxth	r2, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c4c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	371c      	adds	r7, #28
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd90      	pop	{r4, r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	08011bac 	.word	0x08011bac
 800c4d4:	08012368 	.word	0x08012368
 800c4d8:	08011c00 	.word	0x08011c00

0800c4dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c4dc:	b590      	push	{r4, r7, lr}
 800c4de:	b087      	sub	sp, #28
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d106      	bne.n	800c4fc <tcp_keepalive+0x20>
 800c4ee:	4b18      	ldr	r3, [pc, #96]	; (800c550 <tcp_keepalive+0x74>)
 800c4f0:	f640 0224 	movw	r2, #2084	; 0x824
 800c4f4:	4917      	ldr	r1, [pc, #92]	; (800c554 <tcp_keepalive+0x78>)
 800c4f6:	4818      	ldr	r0, [pc, #96]	; (800c558 <tcp_keepalive+0x7c>)
 800c4f8:	f002 ff60 	bl	800f3bc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c4fc:	7dfb      	ldrb	r3, [r7, #23]
 800c4fe:	b29c      	uxth	r4, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c504:	3b01      	subs	r3, #1
 800c506:	4618      	mov	r0, r3
 800c508:	f7f9 f87f 	bl	800560a <lwip_htonl>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2200      	movs	r2, #0
 800c510:	4621      	mov	r1, r4
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7ff fe66 	bl	800c1e4 <tcp_output_alloc_header>
 800c518:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d102      	bne.n	800c526 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c520:	f04f 33ff 	mov.w	r3, #4294967295
 800c524:	e010      	b.n	800c548 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c526:	7dfb      	ldrb	r3, [r7, #23]
 800c528:	2200      	movs	r2, #0
 800c52a:	6939      	ldr	r1, [r7, #16]
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7ff fe97 	bl	800c260 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	3304      	adds	r3, #4
 800c538:	6939      	ldr	r1, [r7, #16]
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f7ff fed0 	bl	800c2e0 <tcp_output_control_segment>
 800c540:	4603      	mov	r3, r0
 800c542:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c544:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	371c      	adds	r7, #28
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd90      	pop	{r4, r7, pc}
 800c550:	08011bac 	.word	0x08011bac
 800c554:	08012388 	.word	0x08012388
 800c558:	08011c00 	.word	0x08011c00

0800c55c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c55c:	b590      	push	{r4, r7, lr}
 800c55e:	b08b      	sub	sp, #44	; 0x2c
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c564:	2300      	movs	r3, #0
 800c566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d106      	bne.n	800c57e <tcp_zero_window_probe+0x22>
 800c570:	4b4c      	ldr	r3, [pc, #304]	; (800c6a4 <tcp_zero_window_probe+0x148>)
 800c572:	f640 024f 	movw	r2, #2127	; 0x84f
 800c576:	494c      	ldr	r1, [pc, #304]	; (800c6a8 <tcp_zero_window_probe+0x14c>)
 800c578:	484c      	ldr	r0, [pc, #304]	; (800c6ac <tcp_zero_window_probe+0x150>)
 800c57a:	f002 ff1f 	bl	800f3bc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c582:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c584:	6a3b      	ldr	r3, [r7, #32]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d101      	bne.n	800c58e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c58a:	2300      	movs	r3, #0
 800c58c:	e086      	b.n	800c69c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c594:	2bff      	cmp	r3, #255	; 0xff
 800c596:	d007      	beq.n	800c5a8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c59e:	3301      	adds	r3, #1
 800c5a0:	b2da      	uxtb	r2, r3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c5a8:	6a3b      	ldr	r3, [r7, #32]
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	899b      	ldrh	r3, [r3, #12]
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7f9 f815 	bl	80055e0 <lwip_htons>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d005      	beq.n	800c5ce <tcp_zero_window_probe+0x72>
 800c5c2:	6a3b      	ldr	r3, [r7, #32]
 800c5c4:	891b      	ldrh	r3, [r3, #8]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d101      	bne.n	800c5ce <tcp_zero_window_probe+0x72>
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e000      	b.n	800c5d0 <tcp_zero_window_probe+0x74>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c5d2:	7ffb      	ldrb	r3, [r7, #31]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	bf0c      	ite	eq
 800c5d8:	2301      	moveq	r3, #1
 800c5da:	2300      	movne	r3, #0
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5e4:	b299      	uxth	r1, r3
 800c5e6:	6a3b      	ldr	r3, [r7, #32]
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	8bba      	ldrh	r2, [r7, #28]
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7ff fdf8 	bl	800c1e4 <tcp_output_alloc_header>
 800c5f4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d102      	bne.n	800c602 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c600:	e04c      	b.n	800c69c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c608:	7ffb      	ldrb	r3, [r7, #31]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d011      	beq.n	800c632 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	899b      	ldrh	r3, [r3, #12]
 800c612:	b29b      	uxth	r3, r3
 800c614:	b21b      	sxth	r3, r3
 800c616:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c61a:	b21c      	sxth	r4, r3
 800c61c:	2011      	movs	r0, #17
 800c61e:	f7f8 ffdf 	bl	80055e0 <lwip_htons>
 800c622:	4603      	mov	r3, r0
 800c624:	b21b      	sxth	r3, r3
 800c626:	4323      	orrs	r3, r4
 800c628:	b21b      	sxth	r3, r3
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	819a      	strh	r2, [r3, #12]
 800c630:	e010      	b.n	800c654 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	3314      	adds	r3, #20
 800c638:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c63a:	6a3b      	ldr	r3, [r7, #32]
 800c63c:	6858      	ldr	r0, [r3, #4]
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	891a      	ldrh	r2, [r3, #8]
 800c644:	6a3b      	ldr	r3, [r7, #32]
 800c646:	891b      	ldrh	r3, [r3, #8]
 800c648:	1ad3      	subs	r3, r2, r3
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	2201      	movs	r2, #1
 800c64e:	6939      	ldr	r1, [r7, #16]
 800c650:	f7fa fc44 	bl	8006edc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c654:	6a3b      	ldr	r3, [r7, #32]
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7f8 ffd5 	bl	800560a <lwip_htonl>
 800c660:	4603      	mov	r3, r0
 800c662:	3301      	adds	r3, #1
 800c664:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	1ad3      	subs	r3, r2, r3
 800c66e:	2b00      	cmp	r3, #0
 800c670:	da02      	bge.n	800c678 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c67c:	2200      	movs	r2, #0
 800c67e:	69b9      	ldr	r1, [r7, #24]
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f7ff fded 	bl	800c260 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	3304      	adds	r3, #4
 800c68c:	69b9      	ldr	r1, [r7, #24]
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f7ff fe26 	bl	800c2e0 <tcp_output_control_segment>
 800c694:	4603      	mov	r3, r0
 800c696:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c698:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	372c      	adds	r7, #44	; 0x2c
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd90      	pop	{r4, r7, pc}
 800c6a4:	08011bac 	.word	0x08011bac
 800c6a8:	080123a4 	.word	0x080123a4
 800c6ac:	08011c00 	.word	0x08011c00

0800c6b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c6b8:	f7fa fcfe 	bl	80070b8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c6bc:	4b0a      	ldr	r3, [pc, #40]	; (800c6e8 <tcpip_tcp_timer+0x38>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d103      	bne.n	800c6cc <tcpip_tcp_timer+0x1c>
 800c6c4:	4b09      	ldr	r3, [pc, #36]	; (800c6ec <tcpip_tcp_timer+0x3c>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d005      	beq.n	800c6d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	4908      	ldr	r1, [pc, #32]	; (800c6f0 <tcpip_tcp_timer+0x40>)
 800c6d0:	20fa      	movs	r0, #250	; 0xfa
 800c6d2:	f000 f8f3 	bl	800c8bc <sys_timeout>
 800c6d6:	e003      	b.n	800c6e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c6d8:	4b06      	ldr	r3, [pc, #24]	; (800c6f4 <tcpip_tcp_timer+0x44>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	601a      	str	r2, [r3, #0]
  }
}
 800c6de:	bf00      	nop
 800c6e0:	bf00      	nop
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	200089e8 	.word	0x200089e8
 800c6ec:	200089ec 	.word	0x200089ec
 800c6f0:	0800c6b1 	.word	0x0800c6b1
 800c6f4:	20008a34 	.word	0x20008a34

0800c6f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c6fc:	4b0a      	ldr	r3, [pc, #40]	; (800c728 <tcp_timer_needed+0x30>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d10f      	bne.n	800c724 <tcp_timer_needed+0x2c>
 800c704:	4b09      	ldr	r3, [pc, #36]	; (800c72c <tcp_timer_needed+0x34>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d103      	bne.n	800c714 <tcp_timer_needed+0x1c>
 800c70c:	4b08      	ldr	r3, [pc, #32]	; (800c730 <tcp_timer_needed+0x38>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d007      	beq.n	800c724 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c714:	4b04      	ldr	r3, [pc, #16]	; (800c728 <tcp_timer_needed+0x30>)
 800c716:	2201      	movs	r2, #1
 800c718:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c71a:	2200      	movs	r2, #0
 800c71c:	4905      	ldr	r1, [pc, #20]	; (800c734 <tcp_timer_needed+0x3c>)
 800c71e:	20fa      	movs	r0, #250	; 0xfa
 800c720:	f000 f8cc 	bl	800c8bc <sys_timeout>
  }
}
 800c724:	bf00      	nop
 800c726:	bd80      	pop	{r7, pc}
 800c728:	20008a34 	.word	0x20008a34
 800c72c:	200089e8 	.word	0x200089e8
 800c730:	200089ec 	.word	0x200089ec
 800c734:	0800c6b1 	.word	0x0800c6b1

0800c738 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b086      	sub	sp, #24
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c744:	2006      	movs	r0, #6
 800c746:	f7f9 fba1 	bl	8005e8c <memp_malloc>
 800c74a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d109      	bne.n	800c766 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d151      	bne.n	800c7fc <sys_timeout_abs+0xc4>
 800c758:	4b2a      	ldr	r3, [pc, #168]	; (800c804 <sys_timeout_abs+0xcc>)
 800c75a:	22be      	movs	r2, #190	; 0xbe
 800c75c:	492a      	ldr	r1, [pc, #168]	; (800c808 <sys_timeout_abs+0xd0>)
 800c75e:	482b      	ldr	r0, [pc, #172]	; (800c80c <sys_timeout_abs+0xd4>)
 800c760:	f002 fe2c 	bl	800f3bc <iprintf>
    return;
 800c764:	e04a      	b.n	800c7fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	2200      	movs	r2, #0
 800c76a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	68fa      	ldr	r2, [r7, #12]
 800c77c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c77e:	4b24      	ldr	r3, [pc, #144]	; (800c810 <sys_timeout_abs+0xd8>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d103      	bne.n	800c78e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c786:	4a22      	ldr	r2, [pc, #136]	; (800c810 <sys_timeout_abs+0xd8>)
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	6013      	str	r3, [r2, #0]
    return;
 800c78c:	e037      	b.n	800c7fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	685a      	ldr	r2, [r3, #4]
 800c792:	4b1f      	ldr	r3, [pc, #124]	; (800c810 <sys_timeout_abs+0xd8>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	1ad3      	subs	r3, r2, r3
 800c79a:	0fdb      	lsrs	r3, r3, #31
 800c79c:	f003 0301 	and.w	r3, r3, #1
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d007      	beq.n	800c7b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c7a6:	4b1a      	ldr	r3, [pc, #104]	; (800c810 <sys_timeout_abs+0xd8>)
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c7ae:	4a18      	ldr	r2, [pc, #96]	; (800c810 <sys_timeout_abs+0xd8>)
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	6013      	str	r3, [r2, #0]
 800c7b4:	e023      	b.n	800c7fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c7b6:	4b16      	ldr	r3, [pc, #88]	; (800c810 <sys_timeout_abs+0xd8>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	617b      	str	r3, [r7, #20]
 800c7bc:	e01a      	b.n	800c7f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00b      	beq.n	800c7de <sys_timeout_abs+0xa6>
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	685a      	ldr	r2, [r3, #4]
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	1ad3      	subs	r3, r2, r3
 800c7d2:	0fdb      	lsrs	r3, r3, #31
 800c7d4:	f003 0301 	and.w	r3, r3, #1
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d007      	beq.n	800c7ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	693a      	ldr	r2, [r7, #16]
 800c7ea:	601a      	str	r2, [r3, #0]
        break;
 800c7ec:	e007      	b.n	800c7fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	617b      	str	r3, [r7, #20]
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d1e1      	bne.n	800c7be <sys_timeout_abs+0x86>
 800c7fa:	e000      	b.n	800c7fe <sys_timeout_abs+0xc6>
    return;
 800c7fc:	bf00      	nop
      }
    }
  }
}
 800c7fe:	3718      	adds	r7, #24
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}
 800c804:	080123c8 	.word	0x080123c8
 800c808:	080123fc 	.word	0x080123fc
 800c80c:	0801243c 	.word	0x0801243c
 800c810:	20008a2c 	.word	0x20008a2c

0800c814 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b086      	sub	sp, #24
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	4798      	blx	r3

  now = sys_now();
 800c826:	f7f8 fe4d 	bl	80054c4 <sys_now>
 800c82a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	4b0f      	ldr	r3, [pc, #60]	; (800c870 <lwip_cyclic_timer+0x5c>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4413      	add	r3, r2
 800c836:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	0fdb      	lsrs	r3, r3, #31
 800c840:	f003 0301 	and.w	r3, r3, #1
 800c844:	b2db      	uxtb	r3, r3
 800c846:	2b00      	cmp	r3, #0
 800c848:	d009      	beq.n	800c85e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	681a      	ldr	r2, [r3, #0]
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	4413      	add	r3, r2
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	4907      	ldr	r1, [pc, #28]	; (800c874 <lwip_cyclic_timer+0x60>)
 800c856:	4618      	mov	r0, r3
 800c858:	f7ff ff6e 	bl	800c738 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c85c:	e004      	b.n	800c868 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	4904      	ldr	r1, [pc, #16]	; (800c874 <lwip_cyclic_timer+0x60>)
 800c862:	68f8      	ldr	r0, [r7, #12]
 800c864:	f7ff ff68 	bl	800c738 <sys_timeout_abs>
}
 800c868:	bf00      	nop
 800c86a:	3718      	adds	r7, #24
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	20008a30 	.word	0x20008a30
 800c874:	0800c815 	.word	0x0800c815

0800c878 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c87e:	2301      	movs	r3, #1
 800c880:	607b      	str	r3, [r7, #4]
 800c882:	e00e      	b.n	800c8a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c884:	4a0b      	ldr	r2, [pc, #44]	; (800c8b4 <sys_timeouts_init+0x3c>)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	00db      	lsls	r3, r3, #3
 800c890:	4a08      	ldr	r2, [pc, #32]	; (800c8b4 <sys_timeouts_init+0x3c>)
 800c892:	4413      	add	r3, r2
 800c894:	461a      	mov	r2, r3
 800c896:	4908      	ldr	r1, [pc, #32]	; (800c8b8 <sys_timeouts_init+0x40>)
 800c898:	f000 f810 	bl	800c8bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	607b      	str	r3, [r7, #4]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d9ed      	bls.n	800c884 <sys_timeouts_init+0xc>
  }
}
 800c8a8:	bf00      	nop
 800c8aa:	bf00      	nop
 800c8ac:	3708      	adds	r7, #8
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	08012fa8 	.word	0x08012fa8
 800c8b8:	0800c815 	.word	0x0800c815

0800c8bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8ce:	d306      	bcc.n	800c8de <sys_timeout+0x22>
 800c8d0:	4b0a      	ldr	r3, [pc, #40]	; (800c8fc <sys_timeout+0x40>)
 800c8d2:	f240 1229 	movw	r2, #297	; 0x129
 800c8d6:	490a      	ldr	r1, [pc, #40]	; (800c900 <sys_timeout+0x44>)
 800c8d8:	480a      	ldr	r0, [pc, #40]	; (800c904 <sys_timeout+0x48>)
 800c8da:	f002 fd6f 	bl	800f3bc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c8de:	f7f8 fdf1 	bl	80054c4 <sys_now>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	68b9      	ldr	r1, [r7, #8]
 800c8ee:	6978      	ldr	r0, [r7, #20]
 800c8f0:	f7ff ff22 	bl	800c738 <sys_timeout_abs>
#endif
}
 800c8f4:	bf00      	nop
 800c8f6:	3718      	adds	r7, #24
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	080123c8 	.word	0x080123c8
 800c900:	08012464 	.word	0x08012464
 800c904:	0801243c 	.word	0x0801243c

0800c908 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c90c:	f002 fd6e 	bl	800f3ec <rand>
 800c910:	4603      	mov	r3, r0
 800c912:	b29b      	uxth	r3, r3
 800c914:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c918:	b29b      	uxth	r3, r3
 800c91a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c91e:	b29a      	uxth	r2, r3
 800c920:	4b01      	ldr	r3, [pc, #4]	; (800c928 <udp_init+0x20>)
 800c922:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c924:	bf00      	nop
 800c926:	bd80      	pop	{r7, pc}
 800c928:	20000010 	.word	0x20000010

0800c92c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	4613      	mov	r3, r2
 800c938:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d105      	bne.n	800c94c <udp_input_local_match+0x20>
 800c940:	4b27      	ldr	r3, [pc, #156]	; (800c9e0 <udp_input_local_match+0xb4>)
 800c942:	2287      	movs	r2, #135	; 0x87
 800c944:	4927      	ldr	r1, [pc, #156]	; (800c9e4 <udp_input_local_match+0xb8>)
 800c946:	4828      	ldr	r0, [pc, #160]	; (800c9e8 <udp_input_local_match+0xbc>)
 800c948:	f002 fd38 	bl	800f3bc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d105      	bne.n	800c95e <udp_input_local_match+0x32>
 800c952:	4b23      	ldr	r3, [pc, #140]	; (800c9e0 <udp_input_local_match+0xb4>)
 800c954:	2288      	movs	r2, #136	; 0x88
 800c956:	4925      	ldr	r1, [pc, #148]	; (800c9ec <udp_input_local_match+0xc0>)
 800c958:	4823      	ldr	r0, [pc, #140]	; (800c9e8 <udp_input_local_match+0xbc>)
 800c95a:	f002 fd2f 	bl	800f3bc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	7a1b      	ldrb	r3, [r3, #8]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00b      	beq.n	800c97e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	7a1a      	ldrb	r2, [r3, #8]
 800c96a:	4b21      	ldr	r3, [pc, #132]	; (800c9f0 <udp_input_local_match+0xc4>)
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c972:	3301      	adds	r3, #1
 800c974:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c976:	429a      	cmp	r2, r3
 800c978:	d001      	beq.n	800c97e <udp_input_local_match+0x52>
    return 0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	e02b      	b.n	800c9d6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c97e:	79fb      	ldrb	r3, [r7, #7]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d018      	beq.n	800c9b6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d013      	beq.n	800c9b2 <udp_input_local_match+0x86>
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00f      	beq.n	800c9b2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c992:	4b17      	ldr	r3, [pc, #92]	; (800c9f0 <udp_input_local_match+0xc4>)
 800c994:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c99a:	d00a      	beq.n	800c9b2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	4b13      	ldr	r3, [pc, #76]	; (800c9f0 <udp_input_local_match+0xc4>)
 800c9a2:	695b      	ldr	r3, [r3, #20]
 800c9a4:	405a      	eors	r2, r3
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	3308      	adds	r3, #8
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d110      	bne.n	800c9d4 <udp_input_local_match+0xa8>
          return 1;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	e00f      	b.n	800c9d6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d009      	beq.n	800c9d0 <udp_input_local_match+0xa4>
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d005      	beq.n	800c9d0 <udp_input_local_match+0xa4>
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	4b09      	ldr	r3, [pc, #36]	; (800c9f0 <udp_input_local_match+0xc4>)
 800c9ca:	695b      	ldr	r3, [r3, #20]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d101      	bne.n	800c9d4 <udp_input_local_match+0xa8>
        return 1;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e000      	b.n	800c9d6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c9d4:	2300      	movs	r3, #0
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3710      	adds	r7, #16
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	080124b0 	.word	0x080124b0
 800c9e4:	080124e0 	.word	0x080124e0
 800c9e8:	08012504 	.word	0x08012504
 800c9ec:	0801252c 	.word	0x0801252c
 800c9f0:	200032ac 	.word	0x200032ac

0800c9f4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c9f4:	b590      	push	{r4, r7, lr}
 800c9f6:	b08d      	sub	sp, #52	; 0x34
 800c9f8:	af02      	add	r7, sp, #8
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d105      	bne.n	800ca14 <udp_input+0x20>
 800ca08:	4b7c      	ldr	r3, [pc, #496]	; (800cbfc <udp_input+0x208>)
 800ca0a:	22cf      	movs	r2, #207	; 0xcf
 800ca0c:	497c      	ldr	r1, [pc, #496]	; (800cc00 <udp_input+0x20c>)
 800ca0e:	487d      	ldr	r0, [pc, #500]	; (800cc04 <udp_input+0x210>)
 800ca10:	f002 fcd4 	bl	800f3bc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d105      	bne.n	800ca26 <udp_input+0x32>
 800ca1a:	4b78      	ldr	r3, [pc, #480]	; (800cbfc <udp_input+0x208>)
 800ca1c:	22d0      	movs	r2, #208	; 0xd0
 800ca1e:	497a      	ldr	r1, [pc, #488]	; (800cc08 <udp_input+0x214>)
 800ca20:	4878      	ldr	r0, [pc, #480]	; (800cc04 <udp_input+0x210>)
 800ca22:	f002 fccb 	bl	800f3bc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	895b      	ldrh	r3, [r3, #10]
 800ca2a:	2b07      	cmp	r3, #7
 800ca2c:	d803      	bhi.n	800ca36 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f7fa f86a 	bl	8006b08 <pbuf_free>
    goto end;
 800ca34:	e0de      	b.n	800cbf4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ca3c:	4b73      	ldr	r3, [pc, #460]	; (800cc0c <udp_input+0x218>)
 800ca3e:	695b      	ldr	r3, [r3, #20]
 800ca40:	4a72      	ldr	r2, [pc, #456]	; (800cc0c <udp_input+0x218>)
 800ca42:	6812      	ldr	r2, [r2, #0]
 800ca44:	4611      	mov	r1, r2
 800ca46:	4618      	mov	r0, r3
 800ca48:	f001 fc88 	bl	800e35c <ip4_addr_isbroadcast_u32>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	881b      	ldrh	r3, [r3, #0]
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7f8 fdc2 	bl	80055e0 <lwip_htons>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	885b      	ldrh	r3, [r3, #2]
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7f8 fdba 	bl	80055e0 <lwip_htons>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ca70:	2300      	movs	r3, #0
 800ca72:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ca74:	2300      	movs	r3, #0
 800ca76:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca7c:	4b64      	ldr	r3, [pc, #400]	; (800cc10 <udp_input+0x21c>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	627b      	str	r3, [r7, #36]	; 0x24
 800ca82:	e054      	b.n	800cb2e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca86:	8a5b      	ldrh	r3, [r3, #18]
 800ca88:	89fa      	ldrh	r2, [r7, #14]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d14a      	bne.n	800cb24 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ca8e:	7cfb      	ldrb	r3, [r7, #19]
 800ca90:	461a      	mov	r2, r3
 800ca92:	6839      	ldr	r1, [r7, #0]
 800ca94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca96:	f7ff ff49 	bl	800c92c <udp_input_local_match>
 800ca9a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d041      	beq.n	800cb24 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800caa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa2:	7c1b      	ldrb	r3, [r3, #16]
 800caa4:	f003 0304 	and.w	r3, r3, #4
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d11d      	bne.n	800cae8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d102      	bne.n	800cab8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab4:	61fb      	str	r3, [r7, #28]
 800cab6:	e017      	b.n	800cae8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cab8:	7cfb      	ldrb	r3, [r7, #19]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d014      	beq.n	800cae8 <udp_input+0xf4>
 800cabe:	4b53      	ldr	r3, [pc, #332]	; (800cc0c <udp_input+0x218>)
 800cac0:	695b      	ldr	r3, [r3, #20]
 800cac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac6:	d10f      	bne.n	800cae8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	3304      	adds	r3, #4
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d008      	beq.n	800cae8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	3304      	adds	r3, #4
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d101      	bne.n	800cae8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800cae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caea:	8a9b      	ldrh	r3, [r3, #20]
 800caec:	8a3a      	ldrh	r2, [r7, #16]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d118      	bne.n	800cb24 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d005      	beq.n	800cb06 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafc:	685a      	ldr	r2, [r3, #4]
 800cafe:	4b43      	ldr	r3, [pc, #268]	; (800cc0c <udp_input+0x218>)
 800cb00:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d10e      	bne.n	800cb24 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cb06:	6a3b      	ldr	r3, [r7, #32]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d014      	beq.n	800cb36 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0e:	68da      	ldr	r2, [r3, #12]
 800cb10:	6a3b      	ldr	r3, [r7, #32]
 800cb12:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cb14:	4b3e      	ldr	r3, [pc, #248]	; (800cc10 <udp_input+0x21c>)
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cb1c:	4a3c      	ldr	r2, [pc, #240]	; (800cc10 <udp_input+0x21c>)
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb20:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cb22:	e008      	b.n	800cb36 <udp_input+0x142>
      }
    }

    prev = pcb;
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb26:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	627b      	str	r3, [r7, #36]	; 0x24
 800cb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1a7      	bne.n	800ca84 <udp_input+0x90>
 800cb34:	e000      	b.n	800cb38 <udp_input+0x144>
        break;
 800cb36:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d101      	bne.n	800cb42 <udp_input+0x14e>
    pcb = uncon_pcb;
 800cb3e:	69fb      	ldr	r3, [r7, #28]
 800cb40:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <udp_input+0x15a>
    for_us = 1;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	76fb      	strb	r3, [r7, #27]
 800cb4c:	e00a      	b.n	800cb64 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	3304      	adds	r3, #4
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	4b2d      	ldr	r3, [pc, #180]	; (800cc0c <udp_input+0x218>)
 800cb56:	695b      	ldr	r3, [r3, #20]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	bf0c      	ite	eq
 800cb5c:	2301      	moveq	r3, #1
 800cb5e:	2300      	movne	r3, #0
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cb64:	7efb      	ldrb	r3, [r7, #27]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d041      	beq.n	800cbee <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cb6a:	2108      	movs	r1, #8
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f7f9 ff45 	bl	80069fc <pbuf_remove_header>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d00a      	beq.n	800cb8e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800cb78:	4b20      	ldr	r3, [pc, #128]	; (800cbfc <udp_input+0x208>)
 800cb7a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800cb7e:	4925      	ldr	r1, [pc, #148]	; (800cc14 <udp_input+0x220>)
 800cb80:	4820      	ldr	r0, [pc, #128]	; (800cc04 <udp_input+0x210>)
 800cb82:	f002 fc1b 	bl	800f3bc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f7f9 ffbe 	bl	8006b08 <pbuf_free>
      goto end;
 800cb8c:	e032      	b.n	800cbf4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800cb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d012      	beq.n	800cbba <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb96:	699b      	ldr	r3, [r3, #24]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00a      	beq.n	800cbb2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9e:	699c      	ldr	r4, [r3, #24]
 800cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba2:	69d8      	ldr	r0, [r3, #28]
 800cba4:	8a3b      	ldrh	r3, [r7, #16]
 800cba6:	9300      	str	r3, [sp, #0]
 800cba8:	4b1b      	ldr	r3, [pc, #108]	; (800cc18 <udp_input+0x224>)
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbae:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cbb0:	e021      	b.n	800cbf6 <udp_input+0x202>
        pbuf_free(p);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f7f9 ffa8 	bl	8006b08 <pbuf_free>
        goto end;
 800cbb8:	e01c      	b.n	800cbf4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cbba:	7cfb      	ldrb	r3, [r7, #19]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d112      	bne.n	800cbe6 <udp_input+0x1f2>
 800cbc0:	4b12      	ldr	r3, [pc, #72]	; (800cc0c <udp_input+0x218>)
 800cbc2:	695b      	ldr	r3, [r3, #20]
 800cbc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbc8:	2be0      	cmp	r3, #224	; 0xe0
 800cbca:	d00c      	beq.n	800cbe6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cbcc:	4b0f      	ldr	r3, [pc, #60]	; (800cc0c <udp_input+0x218>)
 800cbce:	899b      	ldrh	r3, [r3, #12]
 800cbd0:	3308      	adds	r3, #8
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	b21b      	sxth	r3, r3
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7f9 ff82 	bl	8006ae2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cbde:	2103      	movs	r1, #3
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f001 f89b 	bl	800dd1c <icmp_dest_unreach>
      pbuf_free(p);
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f7f9 ff8e 	bl	8006b08 <pbuf_free>
  return;
 800cbec:	e003      	b.n	800cbf6 <udp_input+0x202>
    pbuf_free(p);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7f9 ff8a 	bl	8006b08 <pbuf_free>
  return;
 800cbf4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cbf6:	372c      	adds	r7, #44	; 0x2c
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd90      	pop	{r4, r7, pc}
 800cbfc:	080124b0 	.word	0x080124b0
 800cc00:	08012554 	.word	0x08012554
 800cc04:	08012504 	.word	0x08012504
 800cc08:	0801256c 	.word	0x0801256c
 800cc0c:	200032ac 	.word	0x200032ac
 800cc10:	20008a38 	.word	0x20008a38
 800cc14:	08012588 	.word	0x08012588
 800cc18:	200032bc 	.word	0x200032bc

0800cc1c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b085      	sub	sp, #20
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d01e      	beq.n	800cc6a <udp_netif_ip_addr_changed+0x4e>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d01a      	beq.n	800cc6a <udp_netif_ip_addr_changed+0x4e>
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d017      	beq.n	800cc6a <udp_netif_ip_addr_changed+0x4e>
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d013      	beq.n	800cc6a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cc42:	4b0d      	ldr	r3, [pc, #52]	; (800cc78 <udp_netif_ip_addr_changed+0x5c>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	60fb      	str	r3, [r7, #12]
 800cc48:	e00c      	b.n	800cc64 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d103      	bne.n	800cc5e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	60fb      	str	r3, [r7, #12]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1ef      	bne.n	800cc4a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cc6a:	bf00      	nop
 800cc6c:	3714      	adds	r7, #20
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop
 800cc78:	20008a38 	.word	0x20008a38

0800cc7c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cc84:	4915      	ldr	r1, [pc, #84]	; (800ccdc <etharp_free_entry+0x60>)
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	005b      	lsls	r3, r3, #1
 800cc8c:	4413      	add	r3, r2
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	440b      	add	r3, r1
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d013      	beq.n	800ccc0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cc98:	4910      	ldr	r1, [pc, #64]	; (800ccdc <etharp_free_entry+0x60>)
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	4613      	mov	r3, r2
 800cc9e:	005b      	lsls	r3, r3, #1
 800cca0:	4413      	add	r3, r2
 800cca2:	00db      	lsls	r3, r3, #3
 800cca4:	440b      	add	r3, r1
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7f9 ff2d 	bl	8006b08 <pbuf_free>
    arp_table[i].q = NULL;
 800ccae:	490b      	ldr	r1, [pc, #44]	; (800ccdc <etharp_free_entry+0x60>)
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	005b      	lsls	r3, r3, #1
 800ccb6:	4413      	add	r3, r2
 800ccb8:	00db      	lsls	r3, r3, #3
 800ccba:	440b      	add	r3, r1
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ccc0:	4906      	ldr	r1, [pc, #24]	; (800ccdc <etharp_free_entry+0x60>)
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	005b      	lsls	r3, r3, #1
 800ccc8:	4413      	add	r3, r2
 800ccca:	00db      	lsls	r3, r3, #3
 800cccc:	440b      	add	r3, r1
 800ccce:	3314      	adds	r3, #20
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ccd4:	bf00      	nop
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	20008a3c 	.word	0x20008a3c

0800cce0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cce6:	2300      	movs	r3, #0
 800cce8:	607b      	str	r3, [r7, #4]
 800ccea:	e096      	b.n	800ce1a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ccec:	494f      	ldr	r1, [pc, #316]	; (800ce2c <etharp_tmr+0x14c>)
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	005b      	lsls	r3, r3, #1
 800ccf4:	4413      	add	r3, r2
 800ccf6:	00db      	lsls	r3, r3, #3
 800ccf8:	440b      	add	r3, r1
 800ccfa:	3314      	adds	r3, #20
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cd00:	78fb      	ldrb	r3, [r7, #3]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	f000 8086 	beq.w	800ce14 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cd08:	4948      	ldr	r1, [pc, #288]	; (800ce2c <etharp_tmr+0x14c>)
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	005b      	lsls	r3, r3, #1
 800cd10:	4413      	add	r3, r2
 800cd12:	00db      	lsls	r3, r3, #3
 800cd14:	440b      	add	r3, r1
 800cd16:	3312      	adds	r3, #18
 800cd18:	881b      	ldrh	r3, [r3, #0]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	b298      	uxth	r0, r3
 800cd1e:	4943      	ldr	r1, [pc, #268]	; (800ce2c <etharp_tmr+0x14c>)
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	4613      	mov	r3, r2
 800cd24:	005b      	lsls	r3, r3, #1
 800cd26:	4413      	add	r3, r2
 800cd28:	00db      	lsls	r3, r3, #3
 800cd2a:	440b      	add	r3, r1
 800cd2c:	3312      	adds	r3, #18
 800cd2e:	4602      	mov	r2, r0
 800cd30:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cd32:	493e      	ldr	r1, [pc, #248]	; (800ce2c <etharp_tmr+0x14c>)
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	4613      	mov	r3, r2
 800cd38:	005b      	lsls	r3, r3, #1
 800cd3a:	4413      	add	r3, r2
 800cd3c:	00db      	lsls	r3, r3, #3
 800cd3e:	440b      	add	r3, r1
 800cd40:	3312      	adds	r3, #18
 800cd42:	881b      	ldrh	r3, [r3, #0]
 800cd44:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cd48:	d215      	bcs.n	800cd76 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cd4a:	4938      	ldr	r1, [pc, #224]	; (800ce2c <etharp_tmr+0x14c>)
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	4613      	mov	r3, r2
 800cd50:	005b      	lsls	r3, r3, #1
 800cd52:	4413      	add	r3, r2
 800cd54:	00db      	lsls	r3, r3, #3
 800cd56:	440b      	add	r3, r1
 800cd58:	3314      	adds	r3, #20
 800cd5a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d10e      	bne.n	800cd7e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cd60:	4932      	ldr	r1, [pc, #200]	; (800ce2c <etharp_tmr+0x14c>)
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	4613      	mov	r3, r2
 800cd66:	005b      	lsls	r3, r3, #1
 800cd68:	4413      	add	r3, r2
 800cd6a:	00db      	lsls	r3, r3, #3
 800cd6c:	440b      	add	r3, r1
 800cd6e:	3312      	adds	r3, #18
 800cd70:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cd72:	2b04      	cmp	r3, #4
 800cd74:	d903      	bls.n	800cd7e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f7ff ff80 	bl	800cc7c <etharp_free_entry>
 800cd7c:	e04a      	b.n	800ce14 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cd7e:	492b      	ldr	r1, [pc, #172]	; (800ce2c <etharp_tmr+0x14c>)
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	4613      	mov	r3, r2
 800cd84:	005b      	lsls	r3, r3, #1
 800cd86:	4413      	add	r3, r2
 800cd88:	00db      	lsls	r3, r3, #3
 800cd8a:	440b      	add	r3, r1
 800cd8c:	3314      	adds	r3, #20
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	2b03      	cmp	r3, #3
 800cd92:	d10a      	bne.n	800cdaa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cd94:	4925      	ldr	r1, [pc, #148]	; (800ce2c <etharp_tmr+0x14c>)
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	4613      	mov	r3, r2
 800cd9a:	005b      	lsls	r3, r3, #1
 800cd9c:	4413      	add	r3, r2
 800cd9e:	00db      	lsls	r3, r3, #3
 800cda0:	440b      	add	r3, r1
 800cda2:	3314      	adds	r3, #20
 800cda4:	2204      	movs	r2, #4
 800cda6:	701a      	strb	r2, [r3, #0]
 800cda8:	e034      	b.n	800ce14 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cdaa:	4920      	ldr	r1, [pc, #128]	; (800ce2c <etharp_tmr+0x14c>)
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	4613      	mov	r3, r2
 800cdb0:	005b      	lsls	r3, r3, #1
 800cdb2:	4413      	add	r3, r2
 800cdb4:	00db      	lsls	r3, r3, #3
 800cdb6:	440b      	add	r3, r1
 800cdb8:	3314      	adds	r3, #20
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	2b04      	cmp	r3, #4
 800cdbe:	d10a      	bne.n	800cdd6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cdc0:	491a      	ldr	r1, [pc, #104]	; (800ce2c <etharp_tmr+0x14c>)
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	005b      	lsls	r3, r3, #1
 800cdc8:	4413      	add	r3, r2
 800cdca:	00db      	lsls	r3, r3, #3
 800cdcc:	440b      	add	r3, r1
 800cdce:	3314      	adds	r3, #20
 800cdd0:	2202      	movs	r2, #2
 800cdd2:	701a      	strb	r2, [r3, #0]
 800cdd4:	e01e      	b.n	800ce14 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cdd6:	4915      	ldr	r1, [pc, #84]	; (800ce2c <etharp_tmr+0x14c>)
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	4613      	mov	r3, r2
 800cddc:	005b      	lsls	r3, r3, #1
 800cdde:	4413      	add	r3, r2
 800cde0:	00db      	lsls	r3, r3, #3
 800cde2:	440b      	add	r3, r1
 800cde4:	3314      	adds	r3, #20
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d113      	bne.n	800ce14 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cdec:	490f      	ldr	r1, [pc, #60]	; (800ce2c <etharp_tmr+0x14c>)
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	005b      	lsls	r3, r3, #1
 800cdf4:	4413      	add	r3, r2
 800cdf6:	00db      	lsls	r3, r3, #3
 800cdf8:	440b      	add	r3, r1
 800cdfa:	3308      	adds	r3, #8
 800cdfc:	6818      	ldr	r0, [r3, #0]
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	4613      	mov	r3, r2
 800ce02:	005b      	lsls	r3, r3, #1
 800ce04:	4413      	add	r3, r2
 800ce06:	00db      	lsls	r3, r3, #3
 800ce08:	4a08      	ldr	r2, [pc, #32]	; (800ce2c <etharp_tmr+0x14c>)
 800ce0a:	4413      	add	r3, r2
 800ce0c:	3304      	adds	r3, #4
 800ce0e:	4619      	mov	r1, r3
 800ce10:	f000 fe6e 	bl	800daf0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	3301      	adds	r3, #1
 800ce18:	607b      	str	r3, [r7, #4]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2b09      	cmp	r3, #9
 800ce1e:	f77f af65 	ble.w	800ccec <etharp_tmr+0xc>
      }
    }
  }
}
 800ce22:	bf00      	nop
 800ce24:	bf00      	nop
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	20008a3c 	.word	0x20008a3c

0800ce30 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b08a      	sub	sp, #40	; 0x28
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	460b      	mov	r3, r1
 800ce3a:	607a      	str	r2, [r7, #4]
 800ce3c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ce3e:	230a      	movs	r3, #10
 800ce40:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ce42:	230a      	movs	r3, #10
 800ce44:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ce46:	230a      	movs	r3, #10
 800ce48:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ce4e:	230a      	movs	r3, #10
 800ce50:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	83bb      	strh	r3, [r7, #28]
 800ce56:	2300      	movs	r3, #0
 800ce58:	837b      	strh	r3, [r7, #26]
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce5e:	2300      	movs	r3, #0
 800ce60:	843b      	strh	r3, [r7, #32]
 800ce62:	e0ae      	b.n	800cfc2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ce64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce68:	49a6      	ldr	r1, [pc, #664]	; (800d104 <etharp_find_entry+0x2d4>)
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	005b      	lsls	r3, r3, #1
 800ce6e:	4413      	add	r3, r2
 800ce70:	00db      	lsls	r3, r3, #3
 800ce72:	440b      	add	r3, r1
 800ce74:	3314      	adds	r3, #20
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ce7a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ce7e:	2b0a      	cmp	r3, #10
 800ce80:	d105      	bne.n	800ce8e <etharp_find_entry+0x5e>
 800ce82:	7dfb      	ldrb	r3, [r7, #23]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d102      	bne.n	800ce8e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ce88:	8c3b      	ldrh	r3, [r7, #32]
 800ce8a:	847b      	strh	r3, [r7, #34]	; 0x22
 800ce8c:	e095      	b.n	800cfba <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ce8e:	7dfb      	ldrb	r3, [r7, #23]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f000 8092 	beq.w	800cfba <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ce96:	7dfb      	ldrb	r3, [r7, #23]
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d009      	beq.n	800ceb0 <etharp_find_entry+0x80>
 800ce9c:	7dfb      	ldrb	r3, [r7, #23]
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d806      	bhi.n	800ceb0 <etharp_find_entry+0x80>
 800cea2:	4b99      	ldr	r3, [pc, #612]	; (800d108 <etharp_find_entry+0x2d8>)
 800cea4:	f240 1223 	movw	r2, #291	; 0x123
 800cea8:	4998      	ldr	r1, [pc, #608]	; (800d10c <etharp_find_entry+0x2dc>)
 800ceaa:	4899      	ldr	r0, [pc, #612]	; (800d110 <etharp_find_entry+0x2e0>)
 800ceac:	f002 fa86 	bl	800f3bc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d020      	beq.n	800cef8 <etharp_find_entry+0xc8>
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6819      	ldr	r1, [r3, #0]
 800ceba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cebe:	4891      	ldr	r0, [pc, #580]	; (800d104 <etharp_find_entry+0x2d4>)
 800cec0:	4613      	mov	r3, r2
 800cec2:	005b      	lsls	r3, r3, #1
 800cec4:	4413      	add	r3, r2
 800cec6:	00db      	lsls	r3, r3, #3
 800cec8:	4403      	add	r3, r0
 800ceca:	3304      	adds	r3, #4
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4299      	cmp	r1, r3
 800ced0:	d112      	bne.n	800cef8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d00c      	beq.n	800cef2 <etharp_find_entry+0xc2>
 800ced8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cedc:	4989      	ldr	r1, [pc, #548]	; (800d104 <etharp_find_entry+0x2d4>)
 800cede:	4613      	mov	r3, r2
 800cee0:	005b      	lsls	r3, r3, #1
 800cee2:	4413      	add	r3, r2
 800cee4:	00db      	lsls	r3, r3, #3
 800cee6:	440b      	add	r3, r1
 800cee8:	3308      	adds	r3, #8
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d102      	bne.n	800cef8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cef2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cef6:	e100      	b.n	800d0fa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cef8:	7dfb      	ldrb	r3, [r7, #23]
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d140      	bne.n	800cf80 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cefe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf02:	4980      	ldr	r1, [pc, #512]	; (800d104 <etharp_find_entry+0x2d4>)
 800cf04:	4613      	mov	r3, r2
 800cf06:	005b      	lsls	r3, r3, #1
 800cf08:	4413      	add	r3, r2
 800cf0a:	00db      	lsls	r3, r3, #3
 800cf0c:	440b      	add	r3, r1
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d01a      	beq.n	800cf4a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cf14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf18:	497a      	ldr	r1, [pc, #488]	; (800d104 <etharp_find_entry+0x2d4>)
 800cf1a:	4613      	mov	r3, r2
 800cf1c:	005b      	lsls	r3, r3, #1
 800cf1e:	4413      	add	r3, r2
 800cf20:	00db      	lsls	r3, r3, #3
 800cf22:	440b      	add	r3, r1
 800cf24:	3312      	adds	r3, #18
 800cf26:	881b      	ldrh	r3, [r3, #0]
 800cf28:	8bba      	ldrh	r2, [r7, #28]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d845      	bhi.n	800cfba <etharp_find_entry+0x18a>
            old_queue = i;
 800cf2e:	8c3b      	ldrh	r3, [r7, #32]
 800cf30:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cf32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf36:	4973      	ldr	r1, [pc, #460]	; (800d104 <etharp_find_entry+0x2d4>)
 800cf38:	4613      	mov	r3, r2
 800cf3a:	005b      	lsls	r3, r3, #1
 800cf3c:	4413      	add	r3, r2
 800cf3e:	00db      	lsls	r3, r3, #3
 800cf40:	440b      	add	r3, r1
 800cf42:	3312      	adds	r3, #18
 800cf44:	881b      	ldrh	r3, [r3, #0]
 800cf46:	83bb      	strh	r3, [r7, #28]
 800cf48:	e037      	b.n	800cfba <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cf4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf4e:	496d      	ldr	r1, [pc, #436]	; (800d104 <etharp_find_entry+0x2d4>)
 800cf50:	4613      	mov	r3, r2
 800cf52:	005b      	lsls	r3, r3, #1
 800cf54:	4413      	add	r3, r2
 800cf56:	00db      	lsls	r3, r3, #3
 800cf58:	440b      	add	r3, r1
 800cf5a:	3312      	adds	r3, #18
 800cf5c:	881b      	ldrh	r3, [r3, #0]
 800cf5e:	8b7a      	ldrh	r2, [r7, #26]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d82a      	bhi.n	800cfba <etharp_find_entry+0x18a>
            old_pending = i;
 800cf64:	8c3b      	ldrh	r3, [r7, #32]
 800cf66:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800cf68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf6c:	4965      	ldr	r1, [pc, #404]	; (800d104 <etharp_find_entry+0x2d4>)
 800cf6e:	4613      	mov	r3, r2
 800cf70:	005b      	lsls	r3, r3, #1
 800cf72:	4413      	add	r3, r2
 800cf74:	00db      	lsls	r3, r3, #3
 800cf76:	440b      	add	r3, r1
 800cf78:	3312      	adds	r3, #18
 800cf7a:	881b      	ldrh	r3, [r3, #0]
 800cf7c:	837b      	strh	r3, [r7, #26]
 800cf7e:	e01c      	b.n	800cfba <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cf80:	7dfb      	ldrb	r3, [r7, #23]
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d919      	bls.n	800cfba <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cf86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf8a:	495e      	ldr	r1, [pc, #376]	; (800d104 <etharp_find_entry+0x2d4>)
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	005b      	lsls	r3, r3, #1
 800cf90:	4413      	add	r3, r2
 800cf92:	00db      	lsls	r3, r3, #3
 800cf94:	440b      	add	r3, r1
 800cf96:	3312      	adds	r3, #18
 800cf98:	881b      	ldrh	r3, [r3, #0]
 800cf9a:	8b3a      	ldrh	r2, [r7, #24]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d80c      	bhi.n	800cfba <etharp_find_entry+0x18a>
            old_stable = i;
 800cfa0:	8c3b      	ldrh	r3, [r7, #32]
 800cfa2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800cfa4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfa8:	4956      	ldr	r1, [pc, #344]	; (800d104 <etharp_find_entry+0x2d4>)
 800cfaa:	4613      	mov	r3, r2
 800cfac:	005b      	lsls	r3, r3, #1
 800cfae:	4413      	add	r3, r2
 800cfb0:	00db      	lsls	r3, r3, #3
 800cfb2:	440b      	add	r3, r1
 800cfb4:	3312      	adds	r3, #18
 800cfb6:	881b      	ldrh	r3, [r3, #0]
 800cfb8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cfba:	8c3b      	ldrh	r3, [r7, #32]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	843b      	strh	r3, [r7, #32]
 800cfc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cfc6:	2b09      	cmp	r3, #9
 800cfc8:	f77f af4c 	ble.w	800ce64 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cfcc:	7afb      	ldrb	r3, [r7, #11]
 800cfce:	f003 0302 	and.w	r3, r3, #2
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d108      	bne.n	800cfe8 <etharp_find_entry+0x1b8>
 800cfd6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cfda:	2b0a      	cmp	r3, #10
 800cfdc:	d107      	bne.n	800cfee <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cfde:	7afb      	ldrb	r3, [r7, #11]
 800cfe0:	f003 0301 	and.w	r3, r3, #1
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d102      	bne.n	800cfee <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cfe8:	f04f 33ff 	mov.w	r3, #4294967295
 800cfec:	e085      	b.n	800d0fa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cfee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cff2:	2b09      	cmp	r3, #9
 800cff4:	dc02      	bgt.n	800cffc <etharp_find_entry+0x1cc>
    i = empty;
 800cff6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cff8:	843b      	strh	r3, [r7, #32]
 800cffa:	e039      	b.n	800d070 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cffc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d000:	2b09      	cmp	r3, #9
 800d002:	dc14      	bgt.n	800d02e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d006:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d008:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d00c:	493d      	ldr	r1, [pc, #244]	; (800d104 <etharp_find_entry+0x2d4>)
 800d00e:	4613      	mov	r3, r2
 800d010:	005b      	lsls	r3, r3, #1
 800d012:	4413      	add	r3, r2
 800d014:	00db      	lsls	r3, r3, #3
 800d016:	440b      	add	r3, r1
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d018      	beq.n	800d050 <etharp_find_entry+0x220>
 800d01e:	4b3a      	ldr	r3, [pc, #232]	; (800d108 <etharp_find_entry+0x2d8>)
 800d020:	f240 126d 	movw	r2, #365	; 0x16d
 800d024:	493b      	ldr	r1, [pc, #236]	; (800d114 <etharp_find_entry+0x2e4>)
 800d026:	483a      	ldr	r0, [pc, #232]	; (800d110 <etharp_find_entry+0x2e0>)
 800d028:	f002 f9c8 	bl	800f3bc <iprintf>
 800d02c:	e010      	b.n	800d050 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d02e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d032:	2b09      	cmp	r3, #9
 800d034:	dc02      	bgt.n	800d03c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d036:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d038:	843b      	strh	r3, [r7, #32]
 800d03a:	e009      	b.n	800d050 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d03c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d040:	2b09      	cmp	r3, #9
 800d042:	dc02      	bgt.n	800d04a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d044:	8bfb      	ldrh	r3, [r7, #30]
 800d046:	843b      	strh	r3, [r7, #32]
 800d048:	e002      	b.n	800d050 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d04a:	f04f 33ff 	mov.w	r3, #4294967295
 800d04e:	e054      	b.n	800d0fa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d050:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d054:	2b09      	cmp	r3, #9
 800d056:	dd06      	ble.n	800d066 <etharp_find_entry+0x236>
 800d058:	4b2b      	ldr	r3, [pc, #172]	; (800d108 <etharp_find_entry+0x2d8>)
 800d05a:	f240 127f 	movw	r2, #383	; 0x17f
 800d05e:	492e      	ldr	r1, [pc, #184]	; (800d118 <etharp_find_entry+0x2e8>)
 800d060:	482b      	ldr	r0, [pc, #172]	; (800d110 <etharp_find_entry+0x2e0>)
 800d062:	f002 f9ab 	bl	800f3bc <iprintf>
    etharp_free_entry(i);
 800d066:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7ff fe06 	bl	800cc7c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d070:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d074:	2b09      	cmp	r3, #9
 800d076:	dd06      	ble.n	800d086 <etharp_find_entry+0x256>
 800d078:	4b23      	ldr	r3, [pc, #140]	; (800d108 <etharp_find_entry+0x2d8>)
 800d07a:	f240 1283 	movw	r2, #387	; 0x183
 800d07e:	4926      	ldr	r1, [pc, #152]	; (800d118 <etharp_find_entry+0x2e8>)
 800d080:	4823      	ldr	r0, [pc, #140]	; (800d110 <etharp_find_entry+0x2e0>)
 800d082:	f002 f99b 	bl	800f3bc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d086:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d08a:	491e      	ldr	r1, [pc, #120]	; (800d104 <etharp_find_entry+0x2d4>)
 800d08c:	4613      	mov	r3, r2
 800d08e:	005b      	lsls	r3, r3, #1
 800d090:	4413      	add	r3, r2
 800d092:	00db      	lsls	r3, r3, #3
 800d094:	440b      	add	r3, r1
 800d096:	3314      	adds	r3, #20
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d006      	beq.n	800d0ac <etharp_find_entry+0x27c>
 800d09e:	4b1a      	ldr	r3, [pc, #104]	; (800d108 <etharp_find_entry+0x2d8>)
 800d0a0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d0a4:	491d      	ldr	r1, [pc, #116]	; (800d11c <etharp_find_entry+0x2ec>)
 800d0a6:	481a      	ldr	r0, [pc, #104]	; (800d110 <etharp_find_entry+0x2e0>)
 800d0a8:	f002 f988 	bl	800f3bc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d00b      	beq.n	800d0ca <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d0b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	6819      	ldr	r1, [r3, #0]
 800d0ba:	4812      	ldr	r0, [pc, #72]	; (800d104 <etharp_find_entry+0x2d4>)
 800d0bc:	4613      	mov	r3, r2
 800d0be:	005b      	lsls	r3, r3, #1
 800d0c0:	4413      	add	r3, r2
 800d0c2:	00db      	lsls	r3, r3, #3
 800d0c4:	4403      	add	r3, r0
 800d0c6:	3304      	adds	r3, #4
 800d0c8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d0ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d0ce:	490d      	ldr	r1, [pc, #52]	; (800d104 <etharp_find_entry+0x2d4>)
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	005b      	lsls	r3, r3, #1
 800d0d4:	4413      	add	r3, r2
 800d0d6:	00db      	lsls	r3, r3, #3
 800d0d8:	440b      	add	r3, r1
 800d0da:	3312      	adds	r3, #18
 800d0dc:	2200      	movs	r2, #0
 800d0de:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d0e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d0e4:	4907      	ldr	r1, [pc, #28]	; (800d104 <etharp_find_entry+0x2d4>)
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	005b      	lsls	r3, r3, #1
 800d0ea:	4413      	add	r3, r2
 800d0ec:	00db      	lsls	r3, r3, #3
 800d0ee:	440b      	add	r3, r1
 800d0f0:	3308      	adds	r3, #8
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d0f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3728      	adds	r7, #40	; 0x28
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	20008a3c 	.word	0x20008a3c
 800d108:	08012814 	.word	0x08012814
 800d10c:	0801284c 	.word	0x0801284c
 800d110:	0801288c 	.word	0x0801288c
 800d114:	080128b4 	.word	0x080128b4
 800d118:	080128cc 	.word	0x080128cc
 800d11c:	080128e0 	.word	0x080128e0

0800d120 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b088      	sub	sp, #32
 800d124:	af02      	add	r7, sp, #8
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	607a      	str	r2, [r7, #4]
 800d12c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d134:	2b06      	cmp	r3, #6
 800d136:	d006      	beq.n	800d146 <etharp_update_arp_entry+0x26>
 800d138:	4b48      	ldr	r3, [pc, #288]	; (800d25c <etharp_update_arp_entry+0x13c>)
 800d13a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d13e:	4948      	ldr	r1, [pc, #288]	; (800d260 <etharp_update_arp_entry+0x140>)
 800d140:	4848      	ldr	r0, [pc, #288]	; (800d264 <etharp_update_arp_entry+0x144>)
 800d142:	f002 f93b 	bl	800f3bc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d012      	beq.n	800d172 <etharp_update_arp_entry+0x52>
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d00e      	beq.n	800d172 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	68f9      	ldr	r1, [r7, #12]
 800d15a:	4618      	mov	r0, r3
 800d15c:	f001 f8fe 	bl	800e35c <ip4_addr_isbroadcast_u32>
 800d160:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d162:	2b00      	cmp	r3, #0
 800d164:	d105      	bne.n	800d172 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d16e:	2be0      	cmp	r3, #224	; 0xe0
 800d170:	d102      	bne.n	800d178 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d172:	f06f 030f 	mvn.w	r3, #15
 800d176:	e06c      	b.n	800d252 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d178:	78fb      	ldrb	r3, [r7, #3]
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	4619      	mov	r1, r3
 800d17e:	68b8      	ldr	r0, [r7, #8]
 800d180:	f7ff fe56 	bl	800ce30 <etharp_find_entry>
 800d184:	4603      	mov	r3, r0
 800d186:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d188:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	da02      	bge.n	800d196 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d190:	8afb      	ldrh	r3, [r7, #22]
 800d192:	b25b      	sxtb	r3, r3
 800d194:	e05d      	b.n	800d252 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d196:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d19a:	4933      	ldr	r1, [pc, #204]	; (800d268 <etharp_update_arp_entry+0x148>)
 800d19c:	4613      	mov	r3, r2
 800d19e:	005b      	lsls	r3, r3, #1
 800d1a0:	4413      	add	r3, r2
 800d1a2:	00db      	lsls	r3, r3, #3
 800d1a4:	440b      	add	r3, r1
 800d1a6:	3314      	adds	r3, #20
 800d1a8:	2202      	movs	r2, #2
 800d1aa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d1ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1b0:	492d      	ldr	r1, [pc, #180]	; (800d268 <etharp_update_arp_entry+0x148>)
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	005b      	lsls	r3, r3, #1
 800d1b6:	4413      	add	r3, r2
 800d1b8:	00db      	lsls	r3, r3, #3
 800d1ba:	440b      	add	r3, r1
 800d1bc:	3308      	adds	r3, #8
 800d1be:	68fa      	ldr	r2, [r7, #12]
 800d1c0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d1c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	005b      	lsls	r3, r3, #1
 800d1ca:	4413      	add	r3, r2
 800d1cc:	00db      	lsls	r3, r3, #3
 800d1ce:	3308      	adds	r3, #8
 800d1d0:	4a25      	ldr	r2, [pc, #148]	; (800d268 <etharp_update_arp_entry+0x148>)
 800d1d2:	4413      	add	r3, r2
 800d1d4:	3304      	adds	r3, #4
 800d1d6:	2206      	movs	r2, #6
 800d1d8:	6879      	ldr	r1, [r7, #4]
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f002 f8d8 	bl	800f390 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d1e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1e4:	4920      	ldr	r1, [pc, #128]	; (800d268 <etharp_update_arp_entry+0x148>)
 800d1e6:	4613      	mov	r3, r2
 800d1e8:	005b      	lsls	r3, r3, #1
 800d1ea:	4413      	add	r3, r2
 800d1ec:	00db      	lsls	r3, r3, #3
 800d1ee:	440b      	add	r3, r1
 800d1f0:	3312      	adds	r3, #18
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d1f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1fa:	491b      	ldr	r1, [pc, #108]	; (800d268 <etharp_update_arp_entry+0x148>)
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	005b      	lsls	r3, r3, #1
 800d200:	4413      	add	r3, r2
 800d202:	00db      	lsls	r3, r3, #3
 800d204:	440b      	add	r3, r1
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d021      	beq.n	800d250 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d20c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d210:	4915      	ldr	r1, [pc, #84]	; (800d268 <etharp_update_arp_entry+0x148>)
 800d212:	4613      	mov	r3, r2
 800d214:	005b      	lsls	r3, r3, #1
 800d216:	4413      	add	r3, r2
 800d218:	00db      	lsls	r3, r3, #3
 800d21a:	440b      	add	r3, r1
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d220:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d224:	4910      	ldr	r1, [pc, #64]	; (800d268 <etharp_update_arp_entry+0x148>)
 800d226:	4613      	mov	r3, r2
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	4413      	add	r3, r2
 800d22c:	00db      	lsls	r3, r3, #3
 800d22e:	440b      	add	r3, r1
 800d230:	2200      	movs	r2, #0
 800d232:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d23a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6939      	ldr	r1, [r7, #16]
 800d244:	68f8      	ldr	r0, [r7, #12]
 800d246:	f002 f827 	bl	800f298 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d24a:	6938      	ldr	r0, [r7, #16]
 800d24c:	f7f9 fc5c 	bl	8006b08 <pbuf_free>
  }
  return ERR_OK;
 800d250:	2300      	movs	r3, #0
}
 800d252:	4618      	mov	r0, r3
 800d254:	3718      	adds	r7, #24
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	08012814 	.word	0x08012814
 800d260:	0801290c 	.word	0x0801290c
 800d264:	0801288c 	.word	0x0801288c
 800d268:	20008a3c 	.word	0x20008a3c

0800d26c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d274:	2300      	movs	r3, #0
 800d276:	60fb      	str	r3, [r7, #12]
 800d278:	e01e      	b.n	800d2b8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d27a:	4913      	ldr	r1, [pc, #76]	; (800d2c8 <etharp_cleanup_netif+0x5c>)
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	4613      	mov	r3, r2
 800d280:	005b      	lsls	r3, r3, #1
 800d282:	4413      	add	r3, r2
 800d284:	00db      	lsls	r3, r3, #3
 800d286:	440b      	add	r3, r1
 800d288:	3314      	adds	r3, #20
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d28e:	7afb      	ldrb	r3, [r7, #11]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00e      	beq.n	800d2b2 <etharp_cleanup_netif+0x46>
 800d294:	490c      	ldr	r1, [pc, #48]	; (800d2c8 <etharp_cleanup_netif+0x5c>)
 800d296:	68fa      	ldr	r2, [r7, #12]
 800d298:	4613      	mov	r3, r2
 800d29a:	005b      	lsls	r3, r3, #1
 800d29c:	4413      	add	r3, r2
 800d29e:	00db      	lsls	r3, r3, #3
 800d2a0:	440b      	add	r3, r1
 800d2a2:	3308      	adds	r3, #8
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d102      	bne.n	800d2b2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d2ac:	68f8      	ldr	r0, [r7, #12]
 800d2ae:	f7ff fce5 	bl	800cc7c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	60fb      	str	r3, [r7, #12]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2b09      	cmp	r3, #9
 800d2bc:	dddd      	ble.n	800d27a <etharp_cleanup_netif+0xe>
    }
  }
}
 800d2be:	bf00      	nop
 800d2c0:	bf00      	nop
 800d2c2:	3710      	adds	r7, #16
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	20008a3c 	.word	0x20008a3c

0800d2cc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d2cc:	b5b0      	push	{r4, r5, r7, lr}
 800d2ce:	b08a      	sub	sp, #40	; 0x28
 800d2d0:	af04      	add	r7, sp, #16
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d107      	bne.n	800d2ec <etharp_input+0x20>
 800d2dc:	4b3d      	ldr	r3, [pc, #244]	; (800d3d4 <etharp_input+0x108>)
 800d2de:	f240 228a 	movw	r2, #650	; 0x28a
 800d2e2:	493d      	ldr	r1, [pc, #244]	; (800d3d8 <etharp_input+0x10c>)
 800d2e4:	483d      	ldr	r0, [pc, #244]	; (800d3dc <etharp_input+0x110>)
 800d2e6:	f002 f869 	bl	800f3bc <iprintf>
 800d2ea:	e06f      	b.n	800d3cc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	881b      	ldrh	r3, [r3, #0]
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2fc:	d10c      	bne.n	800d318 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d302:	2b06      	cmp	r3, #6
 800d304:	d108      	bne.n	800d318 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d30a:	2b04      	cmp	r3, #4
 800d30c:	d104      	bne.n	800d318 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	885b      	ldrh	r3, [r3, #2]
 800d312:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d314:	2b08      	cmp	r3, #8
 800d316:	d003      	beq.n	800d320 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f7f9 fbf5 	bl	8006b08 <pbuf_free>
    return;
 800d31e:	e055      	b.n	800d3cc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	330e      	adds	r3, #14
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	3318      	adds	r3, #24
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	3304      	adds	r3, #4
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d102      	bne.n	800d340 <etharp_input+0x74>
    for_us = 0;
 800d33a:	2300      	movs	r3, #0
 800d33c:	75fb      	strb	r3, [r7, #23]
 800d33e:	e009      	b.n	800d354 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d340:	68ba      	ldr	r2, [r7, #8]
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	3304      	adds	r3, #4
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	429a      	cmp	r2, r3
 800d34a:	bf0c      	ite	eq
 800d34c:	2301      	moveq	r3, #1
 800d34e:	2300      	movne	r3, #0
 800d350:	b2db      	uxtb	r3, r3
 800d352:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	f103 0208 	add.w	r2, r3, #8
 800d35a:	7dfb      	ldrb	r3, [r7, #23]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d001      	beq.n	800d364 <etharp_input+0x98>
 800d360:	2301      	movs	r3, #1
 800d362:	e000      	b.n	800d366 <etharp_input+0x9a>
 800d364:	2302      	movs	r3, #2
 800d366:	f107 010c 	add.w	r1, r7, #12
 800d36a:	6838      	ldr	r0, [r7, #0]
 800d36c:	f7ff fed8 	bl	800d120 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	88db      	ldrh	r3, [r3, #6]
 800d374:	b29b      	uxth	r3, r3
 800d376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d37a:	d003      	beq.n	800d384 <etharp_input+0xb8>
 800d37c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d380:	d01e      	beq.n	800d3c0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d382:	e020      	b.n	800d3c6 <etharp_input+0xfa>
      if (for_us) {
 800d384:	7dfb      	ldrb	r3, [r7, #23]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d01c      	beq.n	800d3c4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d3a0:	693a      	ldr	r2, [r7, #16]
 800d3a2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d3a4:	2102      	movs	r1, #2
 800d3a6:	9103      	str	r1, [sp, #12]
 800d3a8:	f107 010c 	add.w	r1, r7, #12
 800d3ac:	9102      	str	r1, [sp, #8]
 800d3ae:	9201      	str	r2, [sp, #4]
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	462b      	mov	r3, r5
 800d3b4:	4622      	mov	r2, r4
 800d3b6:	4601      	mov	r1, r0
 800d3b8:	6838      	ldr	r0, [r7, #0]
 800d3ba:	f000 faeb 	bl	800d994 <etharp_raw>
      break;
 800d3be:	e001      	b.n	800d3c4 <etharp_input+0xf8>
      break;
 800d3c0:	bf00      	nop
 800d3c2:	e000      	b.n	800d3c6 <etharp_input+0xfa>
      break;
 800d3c4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f7f9 fb9e 	bl	8006b08 <pbuf_free>
}
 800d3cc:	3718      	adds	r7, #24
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bdb0      	pop	{r4, r5, r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	08012814 	.word	0x08012814
 800d3d8:	08012964 	.word	0x08012964
 800d3dc:	0801288c 	.word	0x0801288c

0800d3e0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af02      	add	r7, sp, #8
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	4613      	mov	r3, r2
 800d3ec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d3ee:	79fa      	ldrb	r2, [r7, #7]
 800d3f0:	4944      	ldr	r1, [pc, #272]	; (800d504 <etharp_output_to_arp_index+0x124>)
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	005b      	lsls	r3, r3, #1
 800d3f6:	4413      	add	r3, r2
 800d3f8:	00db      	lsls	r3, r3, #3
 800d3fa:	440b      	add	r3, r1
 800d3fc:	3314      	adds	r3, #20
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	2b01      	cmp	r3, #1
 800d402:	d806      	bhi.n	800d412 <etharp_output_to_arp_index+0x32>
 800d404:	4b40      	ldr	r3, [pc, #256]	; (800d508 <etharp_output_to_arp_index+0x128>)
 800d406:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d40a:	4940      	ldr	r1, [pc, #256]	; (800d50c <etharp_output_to_arp_index+0x12c>)
 800d40c:	4840      	ldr	r0, [pc, #256]	; (800d510 <etharp_output_to_arp_index+0x130>)
 800d40e:	f001 ffd5 	bl	800f3bc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d412:	79fa      	ldrb	r2, [r7, #7]
 800d414:	493b      	ldr	r1, [pc, #236]	; (800d504 <etharp_output_to_arp_index+0x124>)
 800d416:	4613      	mov	r3, r2
 800d418:	005b      	lsls	r3, r3, #1
 800d41a:	4413      	add	r3, r2
 800d41c:	00db      	lsls	r3, r3, #3
 800d41e:	440b      	add	r3, r1
 800d420:	3314      	adds	r3, #20
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	2b02      	cmp	r3, #2
 800d426:	d153      	bne.n	800d4d0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d428:	79fa      	ldrb	r2, [r7, #7]
 800d42a:	4936      	ldr	r1, [pc, #216]	; (800d504 <etharp_output_to_arp_index+0x124>)
 800d42c:	4613      	mov	r3, r2
 800d42e:	005b      	lsls	r3, r3, #1
 800d430:	4413      	add	r3, r2
 800d432:	00db      	lsls	r3, r3, #3
 800d434:	440b      	add	r3, r1
 800d436:	3312      	adds	r3, #18
 800d438:	881b      	ldrh	r3, [r3, #0]
 800d43a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d43e:	d919      	bls.n	800d474 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d440:	79fa      	ldrb	r2, [r7, #7]
 800d442:	4613      	mov	r3, r2
 800d444:	005b      	lsls	r3, r3, #1
 800d446:	4413      	add	r3, r2
 800d448:	00db      	lsls	r3, r3, #3
 800d44a:	4a2e      	ldr	r2, [pc, #184]	; (800d504 <etharp_output_to_arp_index+0x124>)
 800d44c:	4413      	add	r3, r2
 800d44e:	3304      	adds	r3, #4
 800d450:	4619      	mov	r1, r3
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	f000 fb4c 	bl	800daf0 <etharp_request>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d138      	bne.n	800d4d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d45e:	79fa      	ldrb	r2, [r7, #7]
 800d460:	4928      	ldr	r1, [pc, #160]	; (800d504 <etharp_output_to_arp_index+0x124>)
 800d462:	4613      	mov	r3, r2
 800d464:	005b      	lsls	r3, r3, #1
 800d466:	4413      	add	r3, r2
 800d468:	00db      	lsls	r3, r3, #3
 800d46a:	440b      	add	r3, r1
 800d46c:	3314      	adds	r3, #20
 800d46e:	2203      	movs	r2, #3
 800d470:	701a      	strb	r2, [r3, #0]
 800d472:	e02d      	b.n	800d4d0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d474:	79fa      	ldrb	r2, [r7, #7]
 800d476:	4923      	ldr	r1, [pc, #140]	; (800d504 <etharp_output_to_arp_index+0x124>)
 800d478:	4613      	mov	r3, r2
 800d47a:	005b      	lsls	r3, r3, #1
 800d47c:	4413      	add	r3, r2
 800d47e:	00db      	lsls	r3, r3, #3
 800d480:	440b      	add	r3, r1
 800d482:	3312      	adds	r3, #18
 800d484:	881b      	ldrh	r3, [r3, #0]
 800d486:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d48a:	d321      	bcc.n	800d4d0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d48c:	79fa      	ldrb	r2, [r7, #7]
 800d48e:	4613      	mov	r3, r2
 800d490:	005b      	lsls	r3, r3, #1
 800d492:	4413      	add	r3, r2
 800d494:	00db      	lsls	r3, r3, #3
 800d496:	4a1b      	ldr	r2, [pc, #108]	; (800d504 <etharp_output_to_arp_index+0x124>)
 800d498:	4413      	add	r3, r2
 800d49a:	1d19      	adds	r1, r3, #4
 800d49c:	79fa      	ldrb	r2, [r7, #7]
 800d49e:	4613      	mov	r3, r2
 800d4a0:	005b      	lsls	r3, r3, #1
 800d4a2:	4413      	add	r3, r2
 800d4a4:	00db      	lsls	r3, r3, #3
 800d4a6:	3308      	adds	r3, #8
 800d4a8:	4a16      	ldr	r2, [pc, #88]	; (800d504 <etharp_output_to_arp_index+0x124>)
 800d4aa:	4413      	add	r3, r2
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f000 fafb 	bl	800daac <etharp_request_dst>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d109      	bne.n	800d4d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d4bc:	79fa      	ldrb	r2, [r7, #7]
 800d4be:	4911      	ldr	r1, [pc, #68]	; (800d504 <etharp_output_to_arp_index+0x124>)
 800d4c0:	4613      	mov	r3, r2
 800d4c2:	005b      	lsls	r3, r3, #1
 800d4c4:	4413      	add	r3, r2
 800d4c6:	00db      	lsls	r3, r3, #3
 800d4c8:	440b      	add	r3, r1
 800d4ca:	3314      	adds	r3, #20
 800d4cc:	2203      	movs	r2, #3
 800d4ce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d4d6:	79fa      	ldrb	r2, [r7, #7]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	005b      	lsls	r3, r3, #1
 800d4dc:	4413      	add	r3, r2
 800d4de:	00db      	lsls	r3, r3, #3
 800d4e0:	3308      	adds	r3, #8
 800d4e2:	4a08      	ldr	r2, [pc, #32]	; (800d504 <etharp_output_to_arp_index+0x124>)
 800d4e4:	4413      	add	r3, r2
 800d4e6:	3304      	adds	r3, #4
 800d4e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d4ec:	9200      	str	r2, [sp, #0]
 800d4ee:	460a      	mov	r2, r1
 800d4f0:	68b9      	ldr	r1, [r7, #8]
 800d4f2:	68f8      	ldr	r0, [r7, #12]
 800d4f4:	f001 fed0 	bl	800f298 <ethernet_output>
 800d4f8:	4603      	mov	r3, r0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3710      	adds	r7, #16
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	20008a3c 	.word	0x20008a3c
 800d508:	08012814 	.word	0x08012814
 800d50c:	08012984 	.word	0x08012984
 800d510:	0801288c 	.word	0x0801288c

0800d514 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b08a      	sub	sp, #40	; 0x28
 800d518:	af02      	add	r7, sp, #8
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d106      	bne.n	800d538 <etharp_output+0x24>
 800d52a:	4b73      	ldr	r3, [pc, #460]	; (800d6f8 <etharp_output+0x1e4>)
 800d52c:	f240 321e 	movw	r2, #798	; 0x31e
 800d530:	4972      	ldr	r1, [pc, #456]	; (800d6fc <etharp_output+0x1e8>)
 800d532:	4873      	ldr	r0, [pc, #460]	; (800d700 <etharp_output+0x1ec>)
 800d534:	f001 ff42 	bl	800f3bc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d106      	bne.n	800d54c <etharp_output+0x38>
 800d53e:	4b6e      	ldr	r3, [pc, #440]	; (800d6f8 <etharp_output+0x1e4>)
 800d540:	f240 321f 	movw	r2, #799	; 0x31f
 800d544:	496f      	ldr	r1, [pc, #444]	; (800d704 <etharp_output+0x1f0>)
 800d546:	486e      	ldr	r0, [pc, #440]	; (800d700 <etharp_output+0x1ec>)
 800d548:	f001 ff38 	bl	800f3bc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d106      	bne.n	800d560 <etharp_output+0x4c>
 800d552:	4b69      	ldr	r3, [pc, #420]	; (800d6f8 <etharp_output+0x1e4>)
 800d554:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d558:	496b      	ldr	r1, [pc, #428]	; (800d708 <etharp_output+0x1f4>)
 800d55a:	4869      	ldr	r0, [pc, #420]	; (800d700 <etharp_output+0x1ec>)
 800d55c:	f001 ff2e 	bl	800f3bc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	68f9      	ldr	r1, [r7, #12]
 800d566:	4618      	mov	r0, r3
 800d568:	f000 fef8 	bl	800e35c <ip4_addr_isbroadcast_u32>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d002      	beq.n	800d578 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d572:	4b66      	ldr	r3, [pc, #408]	; (800d70c <etharp_output+0x1f8>)
 800d574:	61fb      	str	r3, [r7, #28]
 800d576:	e0af      	b.n	800d6d8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d580:	2be0      	cmp	r3, #224	; 0xe0
 800d582:	d118      	bne.n	800d5b6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d584:	2301      	movs	r3, #1
 800d586:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d588:	2300      	movs	r3, #0
 800d58a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d58c:	235e      	movs	r3, #94	; 0x5e
 800d58e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	3301      	adds	r3, #1
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	3302      	adds	r3, #2
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	3303      	adds	r3, #3
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d5ae:	f107 0310 	add.w	r3, r7, #16
 800d5b2:	61fb      	str	r3, [r7, #28]
 800d5b4:	e090      	b.n	800d6d8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	3304      	adds	r3, #4
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	405a      	eors	r2, r3
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	3308      	adds	r3, #8
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	4013      	ands	r3, r2
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d012      	beq.n	800d5f4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d5d4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d00b      	beq.n	800d5f4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	330c      	adds	r3, #12
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d003      	beq.n	800d5ee <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	330c      	adds	r3, #12
 800d5ea:	61bb      	str	r3, [r7, #24]
 800d5ec:	e002      	b.n	800d5f4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d5ee:	f06f 0303 	mvn.w	r3, #3
 800d5f2:	e07d      	b.n	800d6f0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d5f4:	4b46      	ldr	r3, [pc, #280]	; (800d710 <etharp_output+0x1fc>)
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	4a46      	ldr	r2, [pc, #280]	; (800d714 <etharp_output+0x200>)
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	005b      	lsls	r3, r3, #1
 800d600:	440b      	add	r3, r1
 800d602:	00db      	lsls	r3, r3, #3
 800d604:	4413      	add	r3, r2
 800d606:	3314      	adds	r3, #20
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d925      	bls.n	800d65a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d60e:	4b40      	ldr	r3, [pc, #256]	; (800d710 <etharp_output+0x1fc>)
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	4619      	mov	r1, r3
 800d614:	4a3f      	ldr	r2, [pc, #252]	; (800d714 <etharp_output+0x200>)
 800d616:	460b      	mov	r3, r1
 800d618:	005b      	lsls	r3, r3, #1
 800d61a:	440b      	add	r3, r1
 800d61c:	00db      	lsls	r3, r3, #3
 800d61e:	4413      	add	r3, r2
 800d620:	3308      	adds	r3, #8
 800d622:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d624:	68fa      	ldr	r2, [r7, #12]
 800d626:	429a      	cmp	r2, r3
 800d628:	d117      	bne.n	800d65a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	4b38      	ldr	r3, [pc, #224]	; (800d710 <etharp_output+0x1fc>)
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	4618      	mov	r0, r3
 800d634:	4937      	ldr	r1, [pc, #220]	; (800d714 <etharp_output+0x200>)
 800d636:	4603      	mov	r3, r0
 800d638:	005b      	lsls	r3, r3, #1
 800d63a:	4403      	add	r3, r0
 800d63c:	00db      	lsls	r3, r3, #3
 800d63e:	440b      	add	r3, r1
 800d640:	3304      	adds	r3, #4
 800d642:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d644:	429a      	cmp	r2, r3
 800d646:	d108      	bne.n	800d65a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d648:	4b31      	ldr	r3, [pc, #196]	; (800d710 <etharp_output+0x1fc>)
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	461a      	mov	r2, r3
 800d64e:	68b9      	ldr	r1, [r7, #8]
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f7ff fec5 	bl	800d3e0 <etharp_output_to_arp_index>
 800d656:	4603      	mov	r3, r0
 800d658:	e04a      	b.n	800d6f0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d65a:	2300      	movs	r3, #0
 800d65c:	75fb      	strb	r3, [r7, #23]
 800d65e:	e031      	b.n	800d6c4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d660:	7dfa      	ldrb	r2, [r7, #23]
 800d662:	492c      	ldr	r1, [pc, #176]	; (800d714 <etharp_output+0x200>)
 800d664:	4613      	mov	r3, r2
 800d666:	005b      	lsls	r3, r3, #1
 800d668:	4413      	add	r3, r2
 800d66a:	00db      	lsls	r3, r3, #3
 800d66c:	440b      	add	r3, r1
 800d66e:	3314      	adds	r3, #20
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	2b01      	cmp	r3, #1
 800d674:	d923      	bls.n	800d6be <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d676:	7dfa      	ldrb	r2, [r7, #23]
 800d678:	4926      	ldr	r1, [pc, #152]	; (800d714 <etharp_output+0x200>)
 800d67a:	4613      	mov	r3, r2
 800d67c:	005b      	lsls	r3, r3, #1
 800d67e:	4413      	add	r3, r2
 800d680:	00db      	lsls	r3, r3, #3
 800d682:	440b      	add	r3, r1
 800d684:	3308      	adds	r3, #8
 800d686:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d688:	68fa      	ldr	r2, [r7, #12]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d117      	bne.n	800d6be <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	6819      	ldr	r1, [r3, #0]
 800d692:	7dfa      	ldrb	r2, [r7, #23]
 800d694:	481f      	ldr	r0, [pc, #124]	; (800d714 <etharp_output+0x200>)
 800d696:	4613      	mov	r3, r2
 800d698:	005b      	lsls	r3, r3, #1
 800d69a:	4413      	add	r3, r2
 800d69c:	00db      	lsls	r3, r3, #3
 800d69e:	4403      	add	r3, r0
 800d6a0:	3304      	adds	r3, #4
 800d6a2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d6a4:	4299      	cmp	r1, r3
 800d6a6:	d10a      	bne.n	800d6be <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d6a8:	4a19      	ldr	r2, [pc, #100]	; (800d710 <etharp_output+0x1fc>)
 800d6aa:	7dfb      	ldrb	r3, [r7, #23]
 800d6ac:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d6ae:	7dfb      	ldrb	r3, [r7, #23]
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	68b9      	ldr	r1, [r7, #8]
 800d6b4:	68f8      	ldr	r0, [r7, #12]
 800d6b6:	f7ff fe93 	bl	800d3e0 <etharp_output_to_arp_index>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	e018      	b.n	800d6f0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d6be:	7dfb      	ldrb	r3, [r7, #23]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	75fb      	strb	r3, [r7, #23]
 800d6c4:	7dfb      	ldrb	r3, [r7, #23]
 800d6c6:	2b09      	cmp	r3, #9
 800d6c8:	d9ca      	bls.n	800d660 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	69b9      	ldr	r1, [r7, #24]
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f000 f822 	bl	800d718 <etharp_query>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	e00b      	b.n	800d6f0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d6de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d6e2:	9300      	str	r3, [sp, #0]
 800d6e4:	69fb      	ldr	r3, [r7, #28]
 800d6e6:	68b9      	ldr	r1, [r7, #8]
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f001 fdd5 	bl	800f298 <ethernet_output>
 800d6ee:	4603      	mov	r3, r0
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3720      	adds	r7, #32
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	08012814 	.word	0x08012814
 800d6fc:	08012964 	.word	0x08012964
 800d700:	0801288c 	.word	0x0801288c
 800d704:	080129b4 	.word	0x080129b4
 800d708:	08012954 	.word	0x08012954
 800d70c:	08012fc4 	.word	0x08012fc4
 800d710:	20008b2c 	.word	0x20008b2c
 800d714:	20008a3c 	.word	0x20008a3c

0800d718 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b08c      	sub	sp, #48	; 0x30
 800d71c:	af02      	add	r7, sp, #8
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	60b9      	str	r1, [r7, #8]
 800d722:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	3326      	adds	r3, #38	; 0x26
 800d728:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d72a:	23ff      	movs	r3, #255	; 0xff
 800d72c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d730:	2300      	movs	r3, #0
 800d732:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	68f9      	ldr	r1, [r7, #12]
 800d73a:	4618      	mov	r0, r3
 800d73c:	f000 fe0e 	bl	800e35c <ip4_addr_isbroadcast_u32>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	d10c      	bne.n	800d760 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d74e:	2be0      	cmp	r3, #224	; 0xe0
 800d750:	d006      	beq.n	800d760 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d003      	beq.n	800d760 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d102      	bne.n	800d766 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d760:	f06f 030f 	mvn.w	r3, #15
 800d764:	e101      	b.n	800d96a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d766:	68fa      	ldr	r2, [r7, #12]
 800d768:	2101      	movs	r1, #1
 800d76a:	68b8      	ldr	r0, [r7, #8]
 800d76c:	f7ff fb60 	bl	800ce30 <etharp_find_entry>
 800d770:	4603      	mov	r3, r0
 800d772:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d774:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	da02      	bge.n	800d782 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d77c:	8a7b      	ldrh	r3, [r7, #18]
 800d77e:	b25b      	sxtb	r3, r3
 800d780:	e0f3      	b.n	800d96a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d782:	8a7b      	ldrh	r3, [r7, #18]
 800d784:	2b7e      	cmp	r3, #126	; 0x7e
 800d786:	d906      	bls.n	800d796 <etharp_query+0x7e>
 800d788:	4b7a      	ldr	r3, [pc, #488]	; (800d974 <etharp_query+0x25c>)
 800d78a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d78e:	497a      	ldr	r1, [pc, #488]	; (800d978 <etharp_query+0x260>)
 800d790:	487a      	ldr	r0, [pc, #488]	; (800d97c <etharp_query+0x264>)
 800d792:	f001 fe13 	bl	800f3bc <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d796:	8a7b      	ldrh	r3, [r7, #18]
 800d798:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d79a:	7c7a      	ldrb	r2, [r7, #17]
 800d79c:	4978      	ldr	r1, [pc, #480]	; (800d980 <etharp_query+0x268>)
 800d79e:	4613      	mov	r3, r2
 800d7a0:	005b      	lsls	r3, r3, #1
 800d7a2:	4413      	add	r3, r2
 800d7a4:	00db      	lsls	r3, r3, #3
 800d7a6:	440b      	add	r3, r1
 800d7a8:	3314      	adds	r3, #20
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d115      	bne.n	800d7dc <etharp_query+0xc4>
    is_new_entry = 1;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d7b4:	7c7a      	ldrb	r2, [r7, #17]
 800d7b6:	4972      	ldr	r1, [pc, #456]	; (800d980 <etharp_query+0x268>)
 800d7b8:	4613      	mov	r3, r2
 800d7ba:	005b      	lsls	r3, r3, #1
 800d7bc:	4413      	add	r3, r2
 800d7be:	00db      	lsls	r3, r3, #3
 800d7c0:	440b      	add	r3, r1
 800d7c2:	3314      	adds	r3, #20
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d7c8:	7c7a      	ldrb	r2, [r7, #17]
 800d7ca:	496d      	ldr	r1, [pc, #436]	; (800d980 <etharp_query+0x268>)
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	005b      	lsls	r3, r3, #1
 800d7d0:	4413      	add	r3, r2
 800d7d2:	00db      	lsls	r3, r3, #3
 800d7d4:	440b      	add	r3, r1
 800d7d6:	3308      	adds	r3, #8
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d7dc:	7c7a      	ldrb	r2, [r7, #17]
 800d7de:	4968      	ldr	r1, [pc, #416]	; (800d980 <etharp_query+0x268>)
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	005b      	lsls	r3, r3, #1
 800d7e4:	4413      	add	r3, r2
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	440b      	add	r3, r1
 800d7ea:	3314      	adds	r3, #20
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d011      	beq.n	800d816 <etharp_query+0xfe>
 800d7f2:	7c7a      	ldrb	r2, [r7, #17]
 800d7f4:	4962      	ldr	r1, [pc, #392]	; (800d980 <etharp_query+0x268>)
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	005b      	lsls	r3, r3, #1
 800d7fa:	4413      	add	r3, r2
 800d7fc:	00db      	lsls	r3, r3, #3
 800d7fe:	440b      	add	r3, r1
 800d800:	3314      	adds	r3, #20
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	2b01      	cmp	r3, #1
 800d806:	d806      	bhi.n	800d816 <etharp_query+0xfe>
 800d808:	4b5a      	ldr	r3, [pc, #360]	; (800d974 <etharp_query+0x25c>)
 800d80a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d80e:	495d      	ldr	r1, [pc, #372]	; (800d984 <etharp_query+0x26c>)
 800d810:	485a      	ldr	r0, [pc, #360]	; (800d97c <etharp_query+0x264>)
 800d812:	f001 fdd3 	bl	800f3bc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d816:	6a3b      	ldr	r3, [r7, #32]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d102      	bne.n	800d822 <etharp_query+0x10a>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d10c      	bne.n	800d83c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d822:	68b9      	ldr	r1, [r7, #8]
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f000 f963 	bl	800daf0 <etharp_request>
 800d82a:	4603      	mov	r3, r0
 800d82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d102      	bne.n	800d83c <etharp_query+0x124>
      return result;
 800d836:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d83a:	e096      	b.n	800d96a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d106      	bne.n	800d850 <etharp_query+0x138>
 800d842:	4b4c      	ldr	r3, [pc, #304]	; (800d974 <etharp_query+0x25c>)
 800d844:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d848:	494f      	ldr	r1, [pc, #316]	; (800d988 <etharp_query+0x270>)
 800d84a:	484c      	ldr	r0, [pc, #304]	; (800d97c <etharp_query+0x264>)
 800d84c:	f001 fdb6 	bl	800f3bc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d850:	7c7a      	ldrb	r2, [r7, #17]
 800d852:	494b      	ldr	r1, [pc, #300]	; (800d980 <etharp_query+0x268>)
 800d854:	4613      	mov	r3, r2
 800d856:	005b      	lsls	r3, r3, #1
 800d858:	4413      	add	r3, r2
 800d85a:	00db      	lsls	r3, r3, #3
 800d85c:	440b      	add	r3, r1
 800d85e:	3314      	adds	r3, #20
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	2b01      	cmp	r3, #1
 800d864:	d917      	bls.n	800d896 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d866:	4a49      	ldr	r2, [pc, #292]	; (800d98c <etharp_query+0x274>)
 800d868:	7c7b      	ldrb	r3, [r7, #17]
 800d86a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d86c:	7c7a      	ldrb	r2, [r7, #17]
 800d86e:	4613      	mov	r3, r2
 800d870:	005b      	lsls	r3, r3, #1
 800d872:	4413      	add	r3, r2
 800d874:	00db      	lsls	r3, r3, #3
 800d876:	3308      	adds	r3, #8
 800d878:	4a41      	ldr	r2, [pc, #260]	; (800d980 <etharp_query+0x268>)
 800d87a:	4413      	add	r3, r2
 800d87c:	3304      	adds	r3, #4
 800d87e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d882:	9200      	str	r2, [sp, #0]
 800d884:	697a      	ldr	r2, [r7, #20]
 800d886:	6879      	ldr	r1, [r7, #4]
 800d888:	68f8      	ldr	r0, [r7, #12]
 800d88a:	f001 fd05 	bl	800f298 <ethernet_output>
 800d88e:	4603      	mov	r3, r0
 800d890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d894:	e067      	b.n	800d966 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d896:	7c7a      	ldrb	r2, [r7, #17]
 800d898:	4939      	ldr	r1, [pc, #228]	; (800d980 <etharp_query+0x268>)
 800d89a:	4613      	mov	r3, r2
 800d89c:	005b      	lsls	r3, r3, #1
 800d89e:	4413      	add	r3, r2
 800d8a0:	00db      	lsls	r3, r3, #3
 800d8a2:	440b      	add	r3, r1
 800d8a4:	3314      	adds	r3, #20
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d15c      	bne.n	800d966 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d8b4:	e01c      	b.n	800d8f0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	895a      	ldrh	r2, [r3, #10]
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	891b      	ldrh	r3, [r3, #8]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d10a      	bne.n	800d8d8 <etharp_query+0x1c0>
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d006      	beq.n	800d8d8 <etharp_query+0x1c0>
 800d8ca:	4b2a      	ldr	r3, [pc, #168]	; (800d974 <etharp_query+0x25c>)
 800d8cc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d8d0:	492f      	ldr	r1, [pc, #188]	; (800d990 <etharp_query+0x278>)
 800d8d2:	482a      	ldr	r0, [pc, #168]	; (800d97c <etharp_query+0x264>)
 800d8d4:	f001 fd72 	bl	800f3bc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d8d8:	69fb      	ldr	r3, [r7, #28]
 800d8da:	7b1b      	ldrb	r3, [r3, #12]
 800d8dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d002      	beq.n	800d8ea <etharp_query+0x1d2>
        copy_needed = 1;
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	61bb      	str	r3, [r7, #24]
        break;
 800d8e8:	e005      	b.n	800d8f6 <etharp_query+0x1de>
      }
      p = p->next;
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d1df      	bne.n	800d8b6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d8f6:	69bb      	ldr	r3, [r7, #24]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d007      	beq.n	800d90c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d8fc:	687a      	ldr	r2, [r7, #4]
 800d8fe:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d902:	200e      	movs	r0, #14
 800d904:	f7f9 fb5c 	bl	8006fc0 <pbuf_clone>
 800d908:	61f8      	str	r0, [r7, #28]
 800d90a:	e004      	b.n	800d916 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d910:	69f8      	ldr	r0, [r7, #28]
 800d912:	f7f9 f999 	bl	8006c48 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d021      	beq.n	800d960 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d91c:	7c7a      	ldrb	r2, [r7, #17]
 800d91e:	4918      	ldr	r1, [pc, #96]	; (800d980 <etharp_query+0x268>)
 800d920:	4613      	mov	r3, r2
 800d922:	005b      	lsls	r3, r3, #1
 800d924:	4413      	add	r3, r2
 800d926:	00db      	lsls	r3, r3, #3
 800d928:	440b      	add	r3, r1
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d00a      	beq.n	800d946 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d930:	7c7a      	ldrb	r2, [r7, #17]
 800d932:	4913      	ldr	r1, [pc, #76]	; (800d980 <etharp_query+0x268>)
 800d934:	4613      	mov	r3, r2
 800d936:	005b      	lsls	r3, r3, #1
 800d938:	4413      	add	r3, r2
 800d93a:	00db      	lsls	r3, r3, #3
 800d93c:	440b      	add	r3, r1
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4618      	mov	r0, r3
 800d942:	f7f9 f8e1 	bl	8006b08 <pbuf_free>
      }
      arp_table[i].q = p;
 800d946:	7c7a      	ldrb	r2, [r7, #17]
 800d948:	490d      	ldr	r1, [pc, #52]	; (800d980 <etharp_query+0x268>)
 800d94a:	4613      	mov	r3, r2
 800d94c:	005b      	lsls	r3, r3, #1
 800d94e:	4413      	add	r3, r2
 800d950:	00db      	lsls	r3, r3, #3
 800d952:	440b      	add	r3, r1
 800d954:	69fa      	ldr	r2, [r7, #28]
 800d956:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d958:	2300      	movs	r3, #0
 800d95a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d95e:	e002      	b.n	800d966 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d960:	23ff      	movs	r3, #255	; 0xff
 800d962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d966:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3728      	adds	r7, #40	; 0x28
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	08012814 	.word	0x08012814
 800d978:	080129c0 	.word	0x080129c0
 800d97c:	0801288c 	.word	0x0801288c
 800d980:	20008a3c 	.word	0x20008a3c
 800d984:	080129d0 	.word	0x080129d0
 800d988:	080129b4 	.word	0x080129b4
 800d98c:	20008b2c 	.word	0x20008b2c
 800d990:	080129f8 	.word	0x080129f8

0800d994 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b08a      	sub	sp, #40	; 0x28
 800d998:	af02      	add	r7, sp, #8
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	607a      	str	r2, [r7, #4]
 800d9a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d106      	bne.n	800d9ba <etharp_raw+0x26>
 800d9ac:	4b3a      	ldr	r3, [pc, #232]	; (800da98 <etharp_raw+0x104>)
 800d9ae:	f240 4257 	movw	r2, #1111	; 0x457
 800d9b2:	493a      	ldr	r1, [pc, #232]	; (800da9c <etharp_raw+0x108>)
 800d9b4:	483a      	ldr	r0, [pc, #232]	; (800daa0 <etharp_raw+0x10c>)
 800d9b6:	f001 fd01 	bl	800f3bc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d9ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9be:	211c      	movs	r1, #28
 800d9c0:	200e      	movs	r0, #14
 800d9c2:	f7f8 fdbd 	bl	8006540 <pbuf_alloc>
 800d9c6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d102      	bne.n	800d9d4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d9ce:	f04f 33ff 	mov.w	r3, #4294967295
 800d9d2:	e05d      	b.n	800da90 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	895b      	ldrh	r3, [r3, #10]
 800d9d8:	2b1b      	cmp	r3, #27
 800d9da:	d806      	bhi.n	800d9ea <etharp_raw+0x56>
 800d9dc:	4b2e      	ldr	r3, [pc, #184]	; (800da98 <etharp_raw+0x104>)
 800d9de:	f240 4262 	movw	r2, #1122	; 0x462
 800d9e2:	4930      	ldr	r1, [pc, #192]	; (800daa4 <etharp_raw+0x110>)
 800d9e4:	482e      	ldr	r0, [pc, #184]	; (800daa0 <etharp_raw+0x10c>)
 800d9e6:	f001 fce9 	bl	800f3bc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d9f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7f7 fdf4 	bl	80055e0 <lwip_htons>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800da06:	2b06      	cmp	r3, #6
 800da08:	d006      	beq.n	800da18 <etharp_raw+0x84>
 800da0a:	4b23      	ldr	r3, [pc, #140]	; (800da98 <etharp_raw+0x104>)
 800da0c:	f240 4269 	movw	r2, #1129	; 0x469
 800da10:	4925      	ldr	r1, [pc, #148]	; (800daa8 <etharp_raw+0x114>)
 800da12:	4823      	ldr	r0, [pc, #140]	; (800daa0 <etharp_raw+0x10c>)
 800da14:	f001 fcd2 	bl	800f3bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	3308      	adds	r3, #8
 800da1c:	2206      	movs	r2, #6
 800da1e:	6839      	ldr	r1, [r7, #0]
 800da20:	4618      	mov	r0, r3
 800da22:	f001 fcb5 	bl	800f390 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	3312      	adds	r3, #18
 800da2a:	2206      	movs	r2, #6
 800da2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da2e:	4618      	mov	r0, r3
 800da30:	f001 fcae 	bl	800f390 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	330e      	adds	r3, #14
 800da38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da3a:	6812      	ldr	r2, [r2, #0]
 800da3c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	3318      	adds	r3, #24
 800da42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da44:	6812      	ldr	r2, [r2, #0]
 800da46:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	2200      	movs	r2, #0
 800da4c:	701a      	strb	r2, [r3, #0]
 800da4e:	2200      	movs	r2, #0
 800da50:	f042 0201 	orr.w	r2, r2, #1
 800da54:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	2200      	movs	r2, #0
 800da5a:	f042 0208 	orr.w	r2, r2, #8
 800da5e:	709a      	strb	r2, [r3, #2]
 800da60:	2200      	movs	r2, #0
 800da62:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	2206      	movs	r2, #6
 800da68:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	2204      	movs	r2, #4
 800da6e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800da70:	f640 0306 	movw	r3, #2054	; 0x806
 800da74:	9300      	str	r3, [sp, #0]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68ba      	ldr	r2, [r7, #8]
 800da7a:	69b9      	ldr	r1, [r7, #24]
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f001 fc0b 	bl	800f298 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800da82:	69b8      	ldr	r0, [r7, #24]
 800da84:	f7f9 f840 	bl	8006b08 <pbuf_free>
  p = NULL;
 800da88:	2300      	movs	r3, #0
 800da8a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800da8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800da90:	4618      	mov	r0, r3
 800da92:	3720      	adds	r7, #32
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	08012814 	.word	0x08012814
 800da9c:	08012964 	.word	0x08012964
 800daa0:	0801288c 	.word	0x0801288c
 800daa4:	08012a14 	.word	0x08012a14
 800daa8:	08012a48 	.word	0x08012a48

0800daac <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b088      	sub	sp, #32
 800dab0:	af04      	add	r7, sp, #16
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dac8:	2201      	movs	r2, #1
 800daca:	9203      	str	r2, [sp, #12]
 800dacc:	68ba      	ldr	r2, [r7, #8]
 800dace:	9202      	str	r2, [sp, #8]
 800dad0:	4a06      	ldr	r2, [pc, #24]	; (800daec <etharp_request_dst+0x40>)
 800dad2:	9201      	str	r2, [sp, #4]
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	4603      	mov	r3, r0
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	68f8      	ldr	r0, [r7, #12]
 800dadc:	f7ff ff5a 	bl	800d994 <etharp_raw>
 800dae0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3710      	adds	r7, #16
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	08012fcc 	.word	0x08012fcc

0800daf0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800dafa:	4a05      	ldr	r2, [pc, #20]	; (800db10 <etharp_request+0x20>)
 800dafc:	6839      	ldr	r1, [r7, #0]
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f7ff ffd4 	bl	800daac <etharp_request_dst>
 800db04:	4603      	mov	r3, r0
}
 800db06:	4618      	mov	r0, r3
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	08012fc4 	.word	0x08012fc4

0800db14 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b08e      	sub	sp, #56	; 0x38
 800db18:	af04      	add	r7, sp, #16
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800db1e:	4b79      	ldr	r3, [pc, #484]	; (800dd04 <icmp_input+0x1f0>)
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800db24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	f003 030f 	and.w	r3, r3, #15
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	b2db      	uxtb	r3, r3
 800db32:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800db34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db36:	2b13      	cmp	r3, #19
 800db38:	f240 80cd 	bls.w	800dcd6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	895b      	ldrh	r3, [r3, #10]
 800db40:	2b03      	cmp	r3, #3
 800db42:	f240 80ca 	bls.w	800dcda <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800db50:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800db54:	2b00      	cmp	r3, #0
 800db56:	f000 80b7 	beq.w	800dcc8 <icmp_input+0x1b4>
 800db5a:	2b08      	cmp	r3, #8
 800db5c:	f040 80b7 	bne.w	800dcce <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800db60:	4b69      	ldr	r3, [pc, #420]	; (800dd08 <icmp_input+0x1f4>)
 800db62:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800db64:	4b67      	ldr	r3, [pc, #412]	; (800dd04 <icmp_input+0x1f0>)
 800db66:	695b      	ldr	r3, [r3, #20]
 800db68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db6c:	2be0      	cmp	r3, #224	; 0xe0
 800db6e:	f000 80bb 	beq.w	800dce8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800db72:	4b64      	ldr	r3, [pc, #400]	; (800dd04 <icmp_input+0x1f0>)
 800db74:	695b      	ldr	r3, [r3, #20]
 800db76:	4a63      	ldr	r2, [pc, #396]	; (800dd04 <icmp_input+0x1f0>)
 800db78:	6812      	ldr	r2, [r2, #0]
 800db7a:	4611      	mov	r1, r2
 800db7c:	4618      	mov	r0, r3
 800db7e:	f000 fbed 	bl	800e35c <ip4_addr_isbroadcast_u32>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	f040 80b1 	bne.w	800dcec <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	891b      	ldrh	r3, [r3, #8]
 800db8e:	2b07      	cmp	r3, #7
 800db90:	f240 80a5 	bls.w	800dcde <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800db94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db96:	330e      	adds	r3, #14
 800db98:	4619      	mov	r1, r3
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f7f8 ff1e 	bl	80069dc <pbuf_add_header>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d04b      	beq.n	800dc3e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	891a      	ldrh	r2, [r3, #8]
 800dbaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbac:	4413      	add	r3, r2
 800dbae:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	891b      	ldrh	r3, [r3, #8]
 800dbb4:	8b7a      	ldrh	r2, [r7, #26]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	f0c0 809a 	bcc.w	800dcf0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dbbc:	8b7b      	ldrh	r3, [r7, #26]
 800dbbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	200e      	movs	r0, #14
 800dbc6:	f7f8 fcbb 	bl	8006540 <pbuf_alloc>
 800dbca:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	f000 8090 	beq.w	800dcf4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	895b      	ldrh	r3, [r3, #10]
 800dbd8:	461a      	mov	r2, r3
 800dbda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbdc:	3308      	adds	r3, #8
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d203      	bcs.n	800dbea <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800dbe2:	6978      	ldr	r0, [r7, #20]
 800dbe4:	f7f8 ff90 	bl	8006b08 <pbuf_free>
          goto icmperr;
 800dbe8:	e085      	b.n	800dcf6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dbf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f001 fbcc 	bl	800f390 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800dbf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	6978      	ldr	r0, [r7, #20]
 800dbfe:	f7f8 fefd 	bl	80069fc <pbuf_remove_header>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d009      	beq.n	800dc1c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dc08:	4b40      	ldr	r3, [pc, #256]	; (800dd0c <icmp_input+0x1f8>)
 800dc0a:	22b6      	movs	r2, #182	; 0xb6
 800dc0c:	4940      	ldr	r1, [pc, #256]	; (800dd10 <icmp_input+0x1fc>)
 800dc0e:	4841      	ldr	r0, [pc, #260]	; (800dd14 <icmp_input+0x200>)
 800dc10:	f001 fbd4 	bl	800f3bc <iprintf>
          pbuf_free(r);
 800dc14:	6978      	ldr	r0, [r7, #20]
 800dc16:	f7f8 ff77 	bl	8006b08 <pbuf_free>
          goto icmperr;
 800dc1a:	e06c      	b.n	800dcf6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800dc1c:	6879      	ldr	r1, [r7, #4]
 800dc1e:	6978      	ldr	r0, [r7, #20]
 800dc20:	f7f9 f88a 	bl	8006d38 <pbuf_copy>
 800dc24:	4603      	mov	r3, r0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d003      	beq.n	800dc32 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800dc2a:	6978      	ldr	r0, [r7, #20]
 800dc2c:	f7f8 ff6c 	bl	8006b08 <pbuf_free>
          goto icmperr;
 800dc30:	e061      	b.n	800dcf6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f7f8 ff68 	bl	8006b08 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	607b      	str	r3, [r7, #4]
 800dc3c:	e00f      	b.n	800dc5e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dc3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc40:	330e      	adds	r3, #14
 800dc42:	4619      	mov	r1, r3
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f7f8 fed9 	bl	80069fc <pbuf_remove_header>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d006      	beq.n	800dc5e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dc50:	4b2e      	ldr	r3, [pc, #184]	; (800dd0c <icmp_input+0x1f8>)
 800dc52:	22c7      	movs	r2, #199	; 0xc7
 800dc54:	4930      	ldr	r1, [pc, #192]	; (800dd18 <icmp_input+0x204>)
 800dc56:	482f      	ldr	r0, [pc, #188]	; (800dd14 <icmp_input+0x200>)
 800dc58:	f001 fbb0 	bl	800f3bc <iprintf>
          goto icmperr;
 800dc5c:	e04b      	b.n	800dcf6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800dc64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc66:	4619      	mov	r1, r3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7f8 feb7 	bl	80069dc <pbuf_add_header>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d12b      	bne.n	800dccc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dc82:	4b20      	ldr	r3, [pc, #128]	; (800dd04 <icmp_input+0x1f0>)
 800dc84:	691a      	ldr	r2, [r3, #16]
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	2200      	movs	r2, #0
 800dc94:	709a      	strb	r2, [r3, #2]
 800dc96:	2200      	movs	r2, #0
 800dc98:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	22ff      	movs	r2, #255	; 0xff
 800dc9e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2200      	movs	r2, #0
 800dca4:	729a      	strb	r2, [r3, #10]
 800dca6:	2200      	movs	r2, #0
 800dca8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	9302      	str	r3, [sp, #8]
 800dcae:	2301      	movs	r3, #1
 800dcb0:	9301      	str	r3, [sp, #4]
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	9300      	str	r3, [sp, #0]
 800dcb6:	23ff      	movs	r3, #255	; 0xff
 800dcb8:	2200      	movs	r2, #0
 800dcba:	69f9      	ldr	r1, [r7, #28]
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 fa75 	bl	800e1ac <ip4_output_if>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800dcc6:	e001      	b.n	800dccc <icmp_input+0x1b8>
      break;
 800dcc8:	bf00      	nop
 800dcca:	e000      	b.n	800dcce <icmp_input+0x1ba>
      break;
 800dccc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f7f8 ff1a 	bl	8006b08 <pbuf_free>
  return;
 800dcd4:	e013      	b.n	800dcfe <icmp_input+0x1ea>
    goto lenerr;
 800dcd6:	bf00      	nop
 800dcd8:	e002      	b.n	800dce0 <icmp_input+0x1cc>
    goto lenerr;
 800dcda:	bf00      	nop
 800dcdc:	e000      	b.n	800dce0 <icmp_input+0x1cc>
        goto lenerr;
 800dcde:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f7f8 ff11 	bl	8006b08 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dce6:	e00a      	b.n	800dcfe <icmp_input+0x1ea>
        goto icmperr;
 800dce8:	bf00      	nop
 800dcea:	e004      	b.n	800dcf6 <icmp_input+0x1e2>
        goto icmperr;
 800dcec:	bf00      	nop
 800dcee:	e002      	b.n	800dcf6 <icmp_input+0x1e2>
          goto icmperr;
 800dcf0:	bf00      	nop
 800dcf2:	e000      	b.n	800dcf6 <icmp_input+0x1e2>
          goto icmperr;
 800dcf4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f7f8 ff06 	bl	8006b08 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dcfc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dcfe:	3728      	adds	r7, #40	; 0x28
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	200032ac 	.word	0x200032ac
 800dd08:	200032c0 	.word	0x200032c0
 800dd0c:	08012a8c 	.word	0x08012a8c
 800dd10:	08012ac4 	.word	0x08012ac4
 800dd14:	08012afc 	.word	0x08012afc
 800dd18:	08012b24 	.word	0x08012b24

0800dd1c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	460b      	mov	r3, r1
 800dd26:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dd28:	78fb      	ldrb	r3, [r7, #3]
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	2103      	movs	r1, #3
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 f814 	bl	800dd5c <icmp_send_response>
}
 800dd34:	bf00      	nop
 800dd36:	3708      	adds	r7, #8
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	460b      	mov	r3, r1
 800dd46:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dd48:	78fb      	ldrb	r3, [r7, #3]
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	210b      	movs	r1, #11
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 f804 	bl	800dd5c <icmp_send_response>
}
 800dd54:	bf00      	nop
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b08c      	sub	sp, #48	; 0x30
 800dd60:	af04      	add	r7, sp, #16
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	460b      	mov	r3, r1
 800dd66:	70fb      	strb	r3, [r7, #3]
 800dd68:	4613      	mov	r3, r2
 800dd6a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dd6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dd70:	2124      	movs	r1, #36	; 0x24
 800dd72:	2022      	movs	r0, #34	; 0x22
 800dd74:	f7f8 fbe4 	bl	8006540 <pbuf_alloc>
 800dd78:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d04c      	beq.n	800de1a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	895b      	ldrh	r3, [r3, #10]
 800dd84:	2b23      	cmp	r3, #35	; 0x23
 800dd86:	d806      	bhi.n	800dd96 <icmp_send_response+0x3a>
 800dd88:	4b26      	ldr	r3, [pc, #152]	; (800de24 <icmp_send_response+0xc8>)
 800dd8a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800dd8e:	4926      	ldr	r1, [pc, #152]	; (800de28 <icmp_send_response+0xcc>)
 800dd90:	4826      	ldr	r0, [pc, #152]	; (800de2c <icmp_send_response+0xd0>)
 800dd92:	f001 fb13 	bl	800f3bc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	78fa      	ldrb	r2, [r7, #3]
 800dda6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	78ba      	ldrb	r2, [r7, #2]
 800ddac:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	711a      	strb	r2, [r3, #4]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	719a      	strb	r2, [r3, #6]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	f103 0008 	add.w	r0, r3, #8
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	221c      	movs	r2, #28
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	f001 fadd 	bl	800f390 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ddd6:	69bb      	ldr	r3, [r7, #24]
 800ddd8:	68db      	ldr	r3, [r3, #12]
 800ddda:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dddc:	f107 030c 	add.w	r3, r7, #12
 800dde0:	4618      	mov	r0, r3
 800dde2:	f000 f825 	bl	800de30 <ip4_route>
 800dde6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d011      	beq.n	800de12 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	709a      	strb	r2, [r3, #2]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ddf8:	f107 020c 	add.w	r2, r7, #12
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	9302      	str	r3, [sp, #8]
 800de00:	2301      	movs	r3, #1
 800de02:	9301      	str	r3, [sp, #4]
 800de04:	2300      	movs	r3, #0
 800de06:	9300      	str	r3, [sp, #0]
 800de08:	23ff      	movs	r3, #255	; 0xff
 800de0a:	2100      	movs	r1, #0
 800de0c:	69f8      	ldr	r0, [r7, #28]
 800de0e:	f000 f9cd 	bl	800e1ac <ip4_output_if>
  }
  pbuf_free(q);
 800de12:	69f8      	ldr	r0, [r7, #28]
 800de14:	f7f8 fe78 	bl	8006b08 <pbuf_free>
 800de18:	e000      	b.n	800de1c <icmp_send_response+0xc0>
    return;
 800de1a:	bf00      	nop
}
 800de1c:	3720      	adds	r7, #32
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	08012a8c 	.word	0x08012a8c
 800de28:	08012b58 	.word	0x08012b58
 800de2c:	08012afc 	.word	0x08012afc

0800de30 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800de30:	b480      	push	{r7}
 800de32:	b085      	sub	sp, #20
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800de38:	4b33      	ldr	r3, [pc, #204]	; (800df08 <ip4_route+0xd8>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	60fb      	str	r3, [r7, #12]
 800de3e:	e036      	b.n	800deae <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de46:	f003 0301 	and.w	r3, r3, #1
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d02b      	beq.n	800dea8 <ip4_route+0x78>
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de56:	089b      	lsrs	r3, r3, #2
 800de58:	f003 0301 	and.w	r3, r3, #1
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d022      	beq.n	800dea8 <ip4_route+0x78>
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	3304      	adds	r3, #4
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d01d      	beq.n	800dea8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	3304      	adds	r3, #4
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	405a      	eors	r2, r3
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	3308      	adds	r3, #8
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4013      	ands	r3, r2
 800de80:	2b00      	cmp	r3, #0
 800de82:	d101      	bne.n	800de88 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	e038      	b.n	800defa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de8e:	f003 0302 	and.w	r3, r3, #2
 800de92:	2b00      	cmp	r3, #0
 800de94:	d108      	bne.n	800dea8 <ip4_route+0x78>
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	330c      	adds	r3, #12
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d101      	bne.n	800dea8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	e028      	b.n	800defa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	60fb      	str	r3, [r7, #12]
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d1c5      	bne.n	800de40 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800deb4:	4b15      	ldr	r3, [pc, #84]	; (800df0c <ip4_route+0xdc>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d01a      	beq.n	800def2 <ip4_route+0xc2>
 800debc:	4b13      	ldr	r3, [pc, #76]	; (800df0c <ip4_route+0xdc>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dec4:	f003 0301 	and.w	r3, r3, #1
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d012      	beq.n	800def2 <ip4_route+0xc2>
 800decc:	4b0f      	ldr	r3, [pc, #60]	; (800df0c <ip4_route+0xdc>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ded4:	f003 0304 	and.w	r3, r3, #4
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d00a      	beq.n	800def2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dedc:	4b0b      	ldr	r3, [pc, #44]	; (800df0c <ip4_route+0xdc>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	3304      	adds	r3, #4
 800dee2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d004      	beq.n	800def2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	b2db      	uxtb	r3, r3
 800deee:	2b7f      	cmp	r3, #127	; 0x7f
 800def0:	d101      	bne.n	800def6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800def2:	2300      	movs	r3, #0
 800def4:	e001      	b.n	800defa <ip4_route+0xca>
  }

  return netif_default;
 800def6:	4b05      	ldr	r3, [pc, #20]	; (800df0c <ip4_route+0xdc>)
 800def8:	681b      	ldr	r3, [r3, #0]
}
 800defa:	4618      	mov	r0, r3
 800defc:	3714      	adds	r7, #20
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr
 800df06:	bf00      	nop
 800df08:	200089d0 	.word	0x200089d0
 800df0c:	200089d4 	.word	0x200089d4

0800df10 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df1e:	f003 0301 	and.w	r3, r3, #1
 800df22:	b2db      	uxtb	r3, r3
 800df24:	2b00      	cmp	r3, #0
 800df26:	d016      	beq.n	800df56 <ip4_input_accept+0x46>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	3304      	adds	r3, #4
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d011      	beq.n	800df56 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800df32:	4b0b      	ldr	r3, [pc, #44]	; (800df60 <ip4_input_accept+0x50>)
 800df34:	695a      	ldr	r2, [r3, #20]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	3304      	adds	r3, #4
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d008      	beq.n	800df52 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800df40:	4b07      	ldr	r3, [pc, #28]	; (800df60 <ip4_input_accept+0x50>)
 800df42:	695b      	ldr	r3, [r3, #20]
 800df44:	6879      	ldr	r1, [r7, #4]
 800df46:	4618      	mov	r0, r3
 800df48:	f000 fa08 	bl	800e35c <ip4_addr_isbroadcast_u32>
 800df4c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d001      	beq.n	800df56 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800df52:	2301      	movs	r3, #1
 800df54:	e000      	b.n	800df58 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800df56:	2300      	movs	r3, #0
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3708      	adds	r7, #8
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	200032ac 	.word	0x200032ac

0800df64 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b086      	sub	sp, #24
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	091b      	lsrs	r3, r3, #4
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	2b04      	cmp	r3, #4
 800df7e:	d004      	beq.n	800df8a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f7f8 fdc1 	bl	8006b08 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800df86:	2300      	movs	r3, #0
 800df88:	e107      	b.n	800e19a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	f003 030f 	and.w	r3, r3, #15
 800df92:	b2db      	uxtb	r3, r3
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	b2db      	uxtb	r3, r3
 800df98:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	885b      	ldrh	r3, [r3, #2]
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7f7 fb1d 	bl	80055e0 <lwip_htons>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	891b      	ldrh	r3, [r3, #8]
 800dfae:	89ba      	ldrh	r2, [r7, #12]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d204      	bcs.n	800dfbe <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dfb4:	89bb      	ldrh	r3, [r7, #12]
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f7f8 fc1f 	bl	80067fc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	895b      	ldrh	r3, [r3, #10]
 800dfc2:	89fa      	ldrh	r2, [r7, #14]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d807      	bhi.n	800dfd8 <ip4_input+0x74>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	891b      	ldrh	r3, [r3, #8]
 800dfcc:	89ba      	ldrh	r2, [r7, #12]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d802      	bhi.n	800dfd8 <ip4_input+0x74>
 800dfd2:	89fb      	ldrh	r3, [r7, #14]
 800dfd4:	2b13      	cmp	r3, #19
 800dfd6:	d804      	bhi.n	800dfe2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f7f8 fd95 	bl	8006b08 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	e0db      	b.n	800e19a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	691b      	ldr	r3, [r3, #16]
 800dfe6:	4a6f      	ldr	r2, [pc, #444]	; (800e1a4 <ip4_input+0x240>)
 800dfe8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	4a6d      	ldr	r2, [pc, #436]	; (800e1a4 <ip4_input+0x240>)
 800dff0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dff2:	4b6c      	ldr	r3, [pc, #432]	; (800e1a4 <ip4_input+0x240>)
 800dff4:	695b      	ldr	r3, [r3, #20]
 800dff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dffa:	2be0      	cmp	r3, #224	; 0xe0
 800dffc:	d112      	bne.n	800e024 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e004:	f003 0301 	and.w	r3, r3, #1
 800e008:	b2db      	uxtb	r3, r3
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d007      	beq.n	800e01e <ip4_input+0xba>
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	3304      	adds	r3, #4
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d002      	beq.n	800e01e <ip4_input+0xba>
      netif = inp;
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	613b      	str	r3, [r7, #16]
 800e01c:	e02a      	b.n	800e074 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e01e:	2300      	movs	r3, #0
 800e020:	613b      	str	r3, [r7, #16]
 800e022:	e027      	b.n	800e074 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e024:	6838      	ldr	r0, [r7, #0]
 800e026:	f7ff ff73 	bl	800df10 <ip4_input_accept>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d002      	beq.n	800e036 <ip4_input+0xd2>
      netif = inp;
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	613b      	str	r3, [r7, #16]
 800e034:	e01e      	b.n	800e074 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e036:	2300      	movs	r3, #0
 800e038:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e03a:	4b5a      	ldr	r3, [pc, #360]	; (800e1a4 <ip4_input+0x240>)
 800e03c:	695b      	ldr	r3, [r3, #20]
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	2b7f      	cmp	r3, #127	; 0x7f
 800e042:	d017      	beq.n	800e074 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e044:	4b58      	ldr	r3, [pc, #352]	; (800e1a8 <ip4_input+0x244>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	613b      	str	r3, [r7, #16]
 800e04a:	e00e      	b.n	800e06a <ip4_input+0x106>
          if (netif == inp) {
 800e04c:	693a      	ldr	r2, [r7, #16]
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	429a      	cmp	r2, r3
 800e052:	d006      	beq.n	800e062 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e054:	6938      	ldr	r0, [r7, #16]
 800e056:	f7ff ff5b 	bl	800df10 <ip4_input_accept>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d108      	bne.n	800e072 <ip4_input+0x10e>
 800e060:	e000      	b.n	800e064 <ip4_input+0x100>
            continue;
 800e062:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	613b      	str	r3, [r7, #16]
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d1ed      	bne.n	800e04c <ip4_input+0xe8>
 800e070:	e000      	b.n	800e074 <ip4_input+0x110>
            break;
 800e072:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e074:	4b4b      	ldr	r3, [pc, #300]	; (800e1a4 <ip4_input+0x240>)
 800e076:	691b      	ldr	r3, [r3, #16]
 800e078:	6839      	ldr	r1, [r7, #0]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f000 f96e 	bl	800e35c <ip4_addr_isbroadcast_u32>
 800e080:	4603      	mov	r3, r0
 800e082:	2b00      	cmp	r3, #0
 800e084:	d105      	bne.n	800e092 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e086:	4b47      	ldr	r3, [pc, #284]	; (800e1a4 <ip4_input+0x240>)
 800e088:	691b      	ldr	r3, [r3, #16]
 800e08a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e08e:	2be0      	cmp	r3, #224	; 0xe0
 800e090:	d104      	bne.n	800e09c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f7f8 fd38 	bl	8006b08 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e098:	2300      	movs	r3, #0
 800e09a:	e07e      	b.n	800e19a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d104      	bne.n	800e0ac <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f7f8 fd30 	bl	8006b08 <pbuf_free>
    return ERR_OK;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	e076      	b.n	800e19a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	88db      	ldrh	r3, [r3, #6]
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e0b8:	4013      	ands	r3, r2
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00b      	beq.n	800e0d6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 fd22 	bl	800eb08 <ip4_reass>
 800e0c4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d101      	bne.n	800e0d0 <ip4_input+0x16c>
      return ERR_OK;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	e064      	b.n	800e19a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e0d6:	4a33      	ldr	r2, [pc, #204]	; (800e1a4 <ip4_input+0x240>)
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e0dc:	4a31      	ldr	r2, [pc, #196]	; (800e1a4 <ip4_input+0x240>)
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e0e2:	4a30      	ldr	r2, [pc, #192]	; (800e1a4 <ip4_input+0x240>)
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	f003 030f 	and.w	r3, r3, #15
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	b29a      	uxth	r2, r3
 800e0f8:	4b2a      	ldr	r3, [pc, #168]	; (800e1a4 <ip4_input+0x240>)
 800e0fa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e0fc:	89fb      	ldrh	r3, [r7, #14]
 800e0fe:	4619      	mov	r1, r3
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f7f8 fc7b 	bl	80069fc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	7a5b      	ldrb	r3, [r3, #9]
 800e10a:	2b11      	cmp	r3, #17
 800e10c:	d006      	beq.n	800e11c <ip4_input+0x1b8>
 800e10e:	2b11      	cmp	r3, #17
 800e110:	dc13      	bgt.n	800e13a <ip4_input+0x1d6>
 800e112:	2b01      	cmp	r3, #1
 800e114:	d00c      	beq.n	800e130 <ip4_input+0x1cc>
 800e116:	2b06      	cmp	r3, #6
 800e118:	d005      	beq.n	800e126 <ip4_input+0x1c2>
 800e11a:	e00e      	b.n	800e13a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e11c:	6839      	ldr	r1, [r7, #0]
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f7fe fc68 	bl	800c9f4 <udp_input>
        break;
 800e124:	e026      	b.n	800e174 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e126:	6839      	ldr	r1, [r7, #0]
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f7fa fd23 	bl	8008b74 <tcp_input>
        break;
 800e12e:	e021      	b.n	800e174 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e130:	6839      	ldr	r1, [r7, #0]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f7ff fcee 	bl	800db14 <icmp_input>
        break;
 800e138:	e01c      	b.n	800e174 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e13a:	4b1a      	ldr	r3, [pc, #104]	; (800e1a4 <ip4_input+0x240>)
 800e13c:	695b      	ldr	r3, [r3, #20]
 800e13e:	6939      	ldr	r1, [r7, #16]
 800e140:	4618      	mov	r0, r3
 800e142:	f000 f90b 	bl	800e35c <ip4_addr_isbroadcast_u32>
 800e146:	4603      	mov	r3, r0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d10f      	bne.n	800e16c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e14c:	4b15      	ldr	r3, [pc, #84]	; (800e1a4 <ip4_input+0x240>)
 800e14e:	695b      	ldr	r3, [r3, #20]
 800e150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e154:	2be0      	cmp	r3, #224	; 0xe0
 800e156:	d009      	beq.n	800e16c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e158:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e15c:	4619      	mov	r1, r3
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7f8 fcbf 	bl	8006ae2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e164:	2102      	movs	r1, #2
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f7ff fdd8 	bl	800dd1c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7f8 fccb 	bl	8006b08 <pbuf_free>
        break;
 800e172:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e174:	4b0b      	ldr	r3, [pc, #44]	; (800e1a4 <ip4_input+0x240>)
 800e176:	2200      	movs	r2, #0
 800e178:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e17a:	4b0a      	ldr	r3, [pc, #40]	; (800e1a4 <ip4_input+0x240>)
 800e17c:	2200      	movs	r2, #0
 800e17e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e180:	4b08      	ldr	r3, [pc, #32]	; (800e1a4 <ip4_input+0x240>)
 800e182:	2200      	movs	r2, #0
 800e184:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e186:	4b07      	ldr	r3, [pc, #28]	; (800e1a4 <ip4_input+0x240>)
 800e188:	2200      	movs	r2, #0
 800e18a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e18c:	4b05      	ldr	r3, [pc, #20]	; (800e1a4 <ip4_input+0x240>)
 800e18e:	2200      	movs	r2, #0
 800e190:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e192:	4b04      	ldr	r3, [pc, #16]	; (800e1a4 <ip4_input+0x240>)
 800e194:	2200      	movs	r2, #0
 800e196:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e198:	2300      	movs	r3, #0
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3718      	adds	r7, #24
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	200032ac 	.word	0x200032ac
 800e1a8:	200089d0 	.word	0x200089d0

0800e1ac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b08a      	sub	sp, #40	; 0x28
 800e1b0:	af04      	add	r7, sp, #16
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	607a      	str	r2, [r7, #4]
 800e1b8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d009      	beq.n	800e1d8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d003      	beq.n	800e1d2 <ip4_output_if+0x26>
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d102      	bne.n	800e1d8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d4:	3304      	adds	r3, #4
 800e1d6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e1d8:	78fa      	ldrb	r2, [r7, #3]
 800e1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1dc:	9302      	str	r3, [sp, #8]
 800e1de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e1e2:	9301      	str	r3, [sp, #4]
 800e1e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	4613      	mov	r3, r2
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	6979      	ldr	r1, [r7, #20]
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f000 f805 	bl	800e200 <ip4_output_if_src>
 800e1f6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3718      	adds	r7, #24
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b088      	sub	sp, #32
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	607a      	str	r2, [r7, #4]
 800e20c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	7b9b      	ldrb	r3, [r3, #14]
 800e212:	2b01      	cmp	r3, #1
 800e214:	d006      	beq.n	800e224 <ip4_output_if_src+0x24>
 800e216:	4b4b      	ldr	r3, [pc, #300]	; (800e344 <ip4_output_if_src+0x144>)
 800e218:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e21c:	494a      	ldr	r1, [pc, #296]	; (800e348 <ip4_output_if_src+0x148>)
 800e21e:	484b      	ldr	r0, [pc, #300]	; (800e34c <ip4_output_if_src+0x14c>)
 800e220:	f001 f8cc 	bl	800f3bc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d060      	beq.n	800e2ec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e22a:	2314      	movs	r3, #20
 800e22c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e22e:	2114      	movs	r1, #20
 800e230:	68f8      	ldr	r0, [r7, #12]
 800e232:	f7f8 fbd3 	bl	80069dc <pbuf_add_header>
 800e236:	4603      	mov	r3, r0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d002      	beq.n	800e242 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e23c:	f06f 0301 	mvn.w	r3, #1
 800e240:	e07c      	b.n	800e33c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	895b      	ldrh	r3, [r3, #10]
 800e24c:	2b13      	cmp	r3, #19
 800e24e:	d806      	bhi.n	800e25e <ip4_output_if_src+0x5e>
 800e250:	4b3c      	ldr	r3, [pc, #240]	; (800e344 <ip4_output_if_src+0x144>)
 800e252:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e256:	493e      	ldr	r1, [pc, #248]	; (800e350 <ip4_output_if_src+0x150>)
 800e258:	483c      	ldr	r0, [pc, #240]	; (800e34c <ip4_output_if_src+0x14c>)
 800e25a:	f001 f8af 	bl	800f3bc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	78fa      	ldrb	r2, [r7, #3]
 800e262:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e26a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681a      	ldr	r2, [r3, #0]
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e274:	8b7b      	ldrh	r3, [r7, #26]
 800e276:	089b      	lsrs	r3, r3, #2
 800e278:	b29b      	uxth	r3, r3
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e280:	b2da      	uxtb	r2, r3
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e28c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	891b      	ldrh	r3, [r3, #8]
 800e292:	4618      	mov	r0, r3
 800e294:	f7f7 f9a4 	bl	80055e0 <lwip_htons>
 800e298:	4603      	mov	r3, r0
 800e29a:	461a      	mov	r2, r3
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	719a      	strb	r2, [r3, #6]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e2aa:	4b2a      	ldr	r3, [pc, #168]	; (800e354 <ip4_output_if_src+0x154>)
 800e2ac:	881b      	ldrh	r3, [r3, #0]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7f7 f996 	bl	80055e0 <lwip_htons>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e2bc:	4b25      	ldr	r3, [pc, #148]	; (800e354 <ip4_output_if_src+0x154>)
 800e2be:	881b      	ldrh	r3, [r3, #0]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	b29a      	uxth	r2, r3
 800e2c4:	4b23      	ldr	r3, [pc, #140]	; (800e354 <ip4_output_if_src+0x154>)
 800e2c6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d104      	bne.n	800e2d8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e2ce:	4b22      	ldr	r3, [pc, #136]	; (800e358 <ip4_output_if_src+0x158>)
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	60da      	str	r2, [r3, #12]
 800e2d6:	e003      	b.n	800e2e0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	729a      	strb	r2, [r3, #10]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	72da      	strb	r2, [r3, #11]
 800e2ea:	e00f      	b.n	800e30c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	895b      	ldrh	r3, [r3, #10]
 800e2f0:	2b13      	cmp	r3, #19
 800e2f2:	d802      	bhi.n	800e2fa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e2f4:	f06f 0301 	mvn.w	r3, #1
 800e2f8:	e020      	b.n	800e33c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	691b      	ldr	r3, [r3, #16]
 800e304:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e306:	f107 0314 	add.w	r3, r7, #20
 800e30a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e30e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e310:	2b00      	cmp	r3, #0
 800e312:	d00c      	beq.n	800e32e <ip4_output_if_src+0x12e>
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	891a      	ldrh	r2, [r3, #8]
 800e318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d906      	bls.n	800e32e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e320:	687a      	ldr	r2, [r7, #4]
 800e322:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e324:	68f8      	ldr	r0, [r7, #12]
 800e326:	f000 fde3 	bl	800eef0 <ip4_frag>
 800e32a:	4603      	mov	r3, r0
 800e32c:	e006      	b.n	800e33c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e330:	695b      	ldr	r3, [r3, #20]
 800e332:	687a      	ldr	r2, [r7, #4]
 800e334:	68f9      	ldr	r1, [r7, #12]
 800e336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e338:	4798      	blx	r3
 800e33a:	4603      	mov	r3, r0
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3720      	adds	r7, #32
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	08012b84 	.word	0x08012b84
 800e348:	08012bb8 	.word	0x08012bb8
 800e34c:	08012bc4 	.word	0x08012bc4
 800e350:	08012bec 	.word	0x08012bec
 800e354:	20008b2e 	.word	0x20008b2e
 800e358:	08012fc0 	.word	0x08012fc0

0800e35c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b085      	sub	sp, #20
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e370:	d002      	beq.n	800e378 <ip4_addr_isbroadcast_u32+0x1c>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d101      	bne.n	800e37c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e378:	2301      	movs	r3, #1
 800e37a:	e02a      	b.n	800e3d2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e382:	f003 0302 	and.w	r3, r3, #2
 800e386:	2b00      	cmp	r3, #0
 800e388:	d101      	bne.n	800e38e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e38a:	2300      	movs	r3, #0
 800e38c:	e021      	b.n	800e3d2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	3304      	adds	r3, #4
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	687a      	ldr	r2, [r7, #4]
 800e396:	429a      	cmp	r2, r3
 800e398:	d101      	bne.n	800e39e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e39a:	2300      	movs	r3, #0
 800e39c:	e019      	b.n	800e3d2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e39e:	68fa      	ldr	r2, [r7, #12]
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	3304      	adds	r3, #4
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	405a      	eors	r2, r3
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	3308      	adds	r3, #8
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	4013      	ands	r3, r2
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d10d      	bne.n	800e3d0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	3308      	adds	r3, #8
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	43da      	mvns	r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	3308      	adds	r3, #8
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d101      	bne.n	800e3d0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e000      	b.n	800e3d2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e3d0:	2300      	movs	r3, #0
  }
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3714      	adds	r7, #20
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr
	...

0800e3e0 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800e3e8:	2210      	movs	r2, #16
 800e3ea:	4904      	ldr	r1, [pc, #16]	; (800e3fc <ip4addr_ntoa+0x1c>)
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 f807 	bl	800e400 <ip4addr_ntoa_r>
 800e3f2:	4603      	mov	r3, r0
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3708      	adds	r7, #8
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	20008b30 	.word	0x20008b30

0800e400 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800e400:	b480      	push	{r7}
 800e402:	b08d      	sub	sp, #52	; 0x34
 800e404:	af00      	add	r7, sp, #0
 800e406:	60f8      	str	r0, [r7, #12]
 800e408:	60b9      	str	r1, [r7, #8]
 800e40a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800e40c:	2300      	movs	r3, #0
 800e40e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800e41a:	f107 0318 	add.w	r3, r7, #24
 800e41e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800e420:	2300      	movs	r3, #0
 800e422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e426:	e058      	b.n	800e4da <ip4addr_ntoa_r+0xda>
    i = 0;
 800e428:	2300      	movs	r3, #0
 800e42a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800e42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e430:	781a      	ldrb	r2, [r3, #0]
 800e432:	4b32      	ldr	r3, [pc, #200]	; (800e4fc <ip4addr_ntoa_r+0xfc>)
 800e434:	fba3 1302 	umull	r1, r3, r3, r2
 800e438:	08d9      	lsrs	r1, r3, #3
 800e43a:	460b      	mov	r3, r1
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	440b      	add	r3, r1
 800e440:	005b      	lsls	r3, r3, #1
 800e442:	1ad3      	subs	r3, r2, r3
 800e444:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800e446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	4a2c      	ldr	r2, [pc, #176]	; (800e4fc <ip4addr_ntoa_r+0xfc>)
 800e44c:	fba2 2303 	umull	r2, r3, r2, r3
 800e450:	08db      	lsrs	r3, r3, #3
 800e452:	b2da      	uxtb	r2, r3
 800e454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e456:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800e458:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e45c:	1c5a      	adds	r2, r3, #1
 800e45e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800e462:	4619      	mov	r1, r3
 800e464:	7ffb      	ldrb	r3, [r7, #31]
 800e466:	3330      	adds	r3, #48	; 0x30
 800e468:	b2da      	uxtb	r2, r3
 800e46a:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800e46e:	443b      	add	r3, r7
 800e470:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800e474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d1d8      	bne.n	800e42e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800e47c:	e011      	b.n	800e4a2 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800e47e:	6a3b      	ldr	r3, [r7, #32]
 800e480:	1c5a      	adds	r2, r3, #1
 800e482:	623a      	str	r2, [r7, #32]
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	429a      	cmp	r2, r3
 800e488:	dc01      	bgt.n	800e48e <ip4addr_ntoa_r+0x8e>
        return NULL;
 800e48a:	2300      	movs	r3, #0
 800e48c:	e030      	b.n	800e4f0 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800e48e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e494:	1c59      	adds	r1, r3, #1
 800e496:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e498:	3230      	adds	r2, #48	; 0x30
 800e49a:	443a      	add	r2, r7
 800e49c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800e4a0:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800e4a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4a6:	1e5a      	subs	r2, r3, #1
 800e4a8:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d1e6      	bne.n	800e47e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800e4b0:	6a3b      	ldr	r3, [r7, #32]
 800e4b2:	1c5a      	adds	r2, r3, #1
 800e4b4:	623a      	str	r2, [r7, #32]
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	dc01      	bgt.n	800e4c0 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	e017      	b.n	800e4f0 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800e4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c2:	1c5a      	adds	r2, r3, #1
 800e4c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e4c6:	222e      	movs	r2, #46	; 0x2e
 800e4c8:	701a      	strb	r2, [r3, #0]
    ap++;
 800e4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800e4d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4de:	2b03      	cmp	r3, #3
 800e4e0:	d9a2      	bls.n	800e428 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800e4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e4:	3b01      	subs	r3, #1
 800e4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	701a      	strb	r2, [r3, #0]
  return buf;
 800e4ee:	68bb      	ldr	r3, [r7, #8]
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3734      	adds	r7, #52	; 0x34
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr
 800e4fc:	cccccccd 	.word	0xcccccccd

0800e500 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e506:	2300      	movs	r3, #0
 800e508:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e50a:	4b12      	ldr	r3, [pc, #72]	; (800e554 <ip_reass_tmr+0x54>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e510:	e018      	b.n	800e544 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	7fdb      	ldrb	r3, [r3, #31]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d00b      	beq.n	800e532 <ip_reass_tmr+0x32>
      r->timer--;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	7fdb      	ldrb	r3, [r3, #31]
 800e51e:	3b01      	subs	r3, #1
 800e520:	b2da      	uxtb	r2, r3
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	60fb      	str	r3, [r7, #12]
 800e530:	e008      	b.n	800e544 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e53c:	68b9      	ldr	r1, [r7, #8]
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f000 f80a 	bl	800e558 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d1e3      	bne.n	800e512 <ip_reass_tmr+0x12>
    }
  }
}
 800e54a:	bf00      	nop
 800e54c:	bf00      	nop
 800e54e:	3710      	adds	r7, #16
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	20008b40 	.word	0x20008b40

0800e558 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b088      	sub	sp, #32
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e562:	2300      	movs	r3, #0
 800e564:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e566:	683a      	ldr	r2, [r7, #0]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d105      	bne.n	800e57a <ip_reass_free_complete_datagram+0x22>
 800e56e:	4b45      	ldr	r3, [pc, #276]	; (800e684 <ip_reass_free_complete_datagram+0x12c>)
 800e570:	22ab      	movs	r2, #171	; 0xab
 800e572:	4945      	ldr	r1, [pc, #276]	; (800e688 <ip_reass_free_complete_datagram+0x130>)
 800e574:	4845      	ldr	r0, [pc, #276]	; (800e68c <ip_reass_free_complete_datagram+0x134>)
 800e576:	f000 ff21 	bl	800f3bc <iprintf>
  if (prev != NULL) {
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d00a      	beq.n	800e596 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	429a      	cmp	r2, r3
 800e588:	d005      	beq.n	800e596 <ip_reass_free_complete_datagram+0x3e>
 800e58a:	4b3e      	ldr	r3, [pc, #248]	; (800e684 <ip_reass_free_complete_datagram+0x12c>)
 800e58c:	22ad      	movs	r2, #173	; 0xad
 800e58e:	4940      	ldr	r1, [pc, #256]	; (800e690 <ip_reass_free_complete_datagram+0x138>)
 800e590:	483e      	ldr	r0, [pc, #248]	; (800e68c <ip_reass_free_complete_datagram+0x134>)
 800e592:	f000 ff13 	bl	800f3bc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	685b      	ldr	r3, [r3, #4]
 800e59c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	889b      	ldrh	r3, [r3, #4]
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d12a      	bne.n	800e5fe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	681a      	ldr	r2, [r3, #0]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e5b6:	69bb      	ldr	r3, [r7, #24]
 800e5b8:	6858      	ldr	r0, [r3, #4]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	3308      	adds	r3, #8
 800e5be:	2214      	movs	r2, #20
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	f000 fee5 	bl	800f390 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e5c6:	2101      	movs	r1, #1
 800e5c8:	69b8      	ldr	r0, [r7, #24]
 800e5ca:	f7ff fbb7 	bl	800dd3c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e5ce:	69b8      	ldr	r0, [r7, #24]
 800e5d0:	f7f8 fb22 	bl	8006c18 <pbuf_clen>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e5d8:	8bfa      	ldrh	r2, [r7, #30]
 800e5da:	8a7b      	ldrh	r3, [r7, #18]
 800e5dc:	4413      	add	r3, r2
 800e5de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5e2:	db05      	blt.n	800e5f0 <ip_reass_free_complete_datagram+0x98>
 800e5e4:	4b27      	ldr	r3, [pc, #156]	; (800e684 <ip_reass_free_complete_datagram+0x12c>)
 800e5e6:	22bc      	movs	r2, #188	; 0xbc
 800e5e8:	492a      	ldr	r1, [pc, #168]	; (800e694 <ip_reass_free_complete_datagram+0x13c>)
 800e5ea:	4828      	ldr	r0, [pc, #160]	; (800e68c <ip_reass_free_complete_datagram+0x134>)
 800e5ec:	f000 fee6 	bl	800f3bc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e5f0:	8bfa      	ldrh	r2, [r7, #30]
 800e5f2:	8a7b      	ldrh	r3, [r7, #18]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e5f8:	69b8      	ldr	r0, [r7, #24]
 800e5fa:	f7f8 fa85 	bl	8006b08 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e604:	e01f      	b.n	800e646 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e616:	68f8      	ldr	r0, [r7, #12]
 800e618:	f7f8 fafe 	bl	8006c18 <pbuf_clen>
 800e61c:	4603      	mov	r3, r0
 800e61e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e620:	8bfa      	ldrh	r2, [r7, #30]
 800e622:	8a7b      	ldrh	r3, [r7, #18]
 800e624:	4413      	add	r3, r2
 800e626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e62a:	db05      	blt.n	800e638 <ip_reass_free_complete_datagram+0xe0>
 800e62c:	4b15      	ldr	r3, [pc, #84]	; (800e684 <ip_reass_free_complete_datagram+0x12c>)
 800e62e:	22cc      	movs	r2, #204	; 0xcc
 800e630:	4918      	ldr	r1, [pc, #96]	; (800e694 <ip_reass_free_complete_datagram+0x13c>)
 800e632:	4816      	ldr	r0, [pc, #88]	; (800e68c <ip_reass_free_complete_datagram+0x134>)
 800e634:	f000 fec2 	bl	800f3bc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e638:	8bfa      	ldrh	r2, [r7, #30]
 800e63a:	8a7b      	ldrh	r3, [r7, #18]
 800e63c:	4413      	add	r3, r2
 800e63e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f7f8 fa61 	bl	8006b08 <pbuf_free>
  while (p != NULL) {
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d1dc      	bne.n	800e606 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e64c:	6839      	ldr	r1, [r7, #0]
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f000 f8c2 	bl	800e7d8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e654:	4b10      	ldr	r3, [pc, #64]	; (800e698 <ip_reass_free_complete_datagram+0x140>)
 800e656:	881b      	ldrh	r3, [r3, #0]
 800e658:	8bfa      	ldrh	r2, [r7, #30]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d905      	bls.n	800e66a <ip_reass_free_complete_datagram+0x112>
 800e65e:	4b09      	ldr	r3, [pc, #36]	; (800e684 <ip_reass_free_complete_datagram+0x12c>)
 800e660:	22d2      	movs	r2, #210	; 0xd2
 800e662:	490e      	ldr	r1, [pc, #56]	; (800e69c <ip_reass_free_complete_datagram+0x144>)
 800e664:	4809      	ldr	r0, [pc, #36]	; (800e68c <ip_reass_free_complete_datagram+0x134>)
 800e666:	f000 fea9 	bl	800f3bc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e66a:	4b0b      	ldr	r3, [pc, #44]	; (800e698 <ip_reass_free_complete_datagram+0x140>)
 800e66c:	881a      	ldrh	r2, [r3, #0]
 800e66e:	8bfb      	ldrh	r3, [r7, #30]
 800e670:	1ad3      	subs	r3, r2, r3
 800e672:	b29a      	uxth	r2, r3
 800e674:	4b08      	ldr	r3, [pc, #32]	; (800e698 <ip_reass_free_complete_datagram+0x140>)
 800e676:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e678:	8bfb      	ldrh	r3, [r7, #30]
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3720      	adds	r7, #32
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	08012c1c 	.word	0x08012c1c
 800e688:	08012c58 	.word	0x08012c58
 800e68c:	08012c64 	.word	0x08012c64
 800e690:	08012c8c 	.word	0x08012c8c
 800e694:	08012ca0 	.word	0x08012ca0
 800e698:	20008b44 	.word	0x20008b44
 800e69c:	08012cc0 	.word	0x08012cc0

0800e6a0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b08a      	sub	sp, #40	; 0x28
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e6be:	4b28      	ldr	r3, [pc, #160]	; (800e760 <ip_reass_remove_oldest_datagram+0xc0>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e6c4:	e030      	b.n	800e728 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c8:	695a      	ldr	r2, [r3, #20]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	d10c      	bne.n	800e6ec <ip_reass_remove_oldest_datagram+0x4c>
 800e6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d4:	699a      	ldr	r2, [r3, #24]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	691b      	ldr	r3, [r3, #16]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d106      	bne.n	800e6ec <ip_reass_remove_oldest_datagram+0x4c>
 800e6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e0:	899a      	ldrh	r2, [r3, #12]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	889b      	ldrh	r3, [r3, #4]
 800e6e6:	b29b      	uxth	r3, r3
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d014      	beq.n	800e716 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e6f2:	6a3b      	ldr	r3, [r7, #32]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d104      	bne.n	800e702 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	61bb      	str	r3, [r7, #24]
 800e700:	e009      	b.n	800e716 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e704:	7fda      	ldrb	r2, [r3, #31]
 800e706:	6a3b      	ldr	r3, [r7, #32]
 800e708:	7fdb      	ldrb	r3, [r3, #31]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d803      	bhi.n	800e716 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e710:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d001      	beq.n	800e722 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e720:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d1cb      	bne.n	800e6c6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e72e:	6a3b      	ldr	r3, [r7, #32]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d008      	beq.n	800e746 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e734:	69b9      	ldr	r1, [r7, #24]
 800e736:	6a38      	ldr	r0, [r7, #32]
 800e738:	f7ff ff0e 	bl	800e558 <ip_reass_free_complete_datagram>
 800e73c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e73e:	697a      	ldr	r2, [r7, #20]
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	4413      	add	r3, r2
 800e744:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e746:	697a      	ldr	r2, [r7, #20]
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	da02      	bge.n	800e754 <ip_reass_remove_oldest_datagram+0xb4>
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	2b01      	cmp	r3, #1
 800e752:	dcac      	bgt.n	800e6ae <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e754:	697b      	ldr	r3, [r7, #20]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3728      	adds	r7, #40	; 0x28
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	20008b40 	.word	0x20008b40

0800e764 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e76e:	2004      	movs	r0, #4
 800e770:	f7f7 fb8c 	bl	8005e8c <memp_malloc>
 800e774:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d110      	bne.n	800e79e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e77c:	6839      	ldr	r1, [r7, #0]
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f7ff ff8e 	bl	800e6a0 <ip_reass_remove_oldest_datagram>
 800e784:	4602      	mov	r2, r0
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	4293      	cmp	r3, r2
 800e78a:	dc03      	bgt.n	800e794 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e78c:	2004      	movs	r0, #4
 800e78e:	f7f7 fb7d 	bl	8005e8c <memp_malloc>
 800e792:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d101      	bne.n	800e79e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e79a:	2300      	movs	r3, #0
 800e79c:	e016      	b.n	800e7cc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e79e:	2220      	movs	r2, #32
 800e7a0:	2100      	movs	r1, #0
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f000 fe02 	bl	800f3ac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	220f      	movs	r2, #15
 800e7ac:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e7ae:	4b09      	ldr	r3, [pc, #36]	; (800e7d4 <ip_reass_enqueue_new_datagram+0x70>)
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e7b6:	4a07      	ldr	r2, [pc, #28]	; (800e7d4 <ip_reass_enqueue_new_datagram+0x70>)
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	3308      	adds	r3, #8
 800e7c0:	2214      	movs	r2, #20
 800e7c2:	6879      	ldr	r1, [r7, #4]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f000 fde3 	bl	800f390 <memcpy>
  return ipr;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3710      	adds	r7, #16
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	20008b40 	.word	0x20008b40

0800e7d8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e7e2:	4b10      	ldr	r3, [pc, #64]	; (800e824 <ip_reass_dequeue_datagram+0x4c>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	687a      	ldr	r2, [r7, #4]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d104      	bne.n	800e7f6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4a0c      	ldr	r2, [pc, #48]	; (800e824 <ip_reass_dequeue_datagram+0x4c>)
 800e7f2:	6013      	str	r3, [r2, #0]
 800e7f4:	e00d      	b.n	800e812 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d106      	bne.n	800e80a <ip_reass_dequeue_datagram+0x32>
 800e7fc:	4b0a      	ldr	r3, [pc, #40]	; (800e828 <ip_reass_dequeue_datagram+0x50>)
 800e7fe:	f240 1245 	movw	r2, #325	; 0x145
 800e802:	490a      	ldr	r1, [pc, #40]	; (800e82c <ip_reass_dequeue_datagram+0x54>)
 800e804:	480a      	ldr	r0, [pc, #40]	; (800e830 <ip_reass_dequeue_datagram+0x58>)
 800e806:	f000 fdd9 	bl	800f3bc <iprintf>
    prev->next = ipr->next;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e812:	6879      	ldr	r1, [r7, #4]
 800e814:	2004      	movs	r0, #4
 800e816:	f7f7 fb85 	bl	8005f24 <memp_free>
}
 800e81a:	bf00      	nop
 800e81c:	3708      	adds	r7, #8
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}
 800e822:	bf00      	nop
 800e824:	20008b40 	.word	0x20008b40
 800e828:	08012c1c 	.word	0x08012c1c
 800e82c:	08012ce4 	.word	0x08012ce4
 800e830:	08012c64 	.word	0x08012c64

0800e834 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b08c      	sub	sp, #48	; 0x30
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e840:	2300      	movs	r3, #0
 800e842:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e844:	2301      	movs	r3, #1
 800e846:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	885b      	ldrh	r3, [r3, #2]
 800e852:	b29b      	uxth	r3, r3
 800e854:	4618      	mov	r0, r3
 800e856:	f7f6 fec3 	bl	80055e0 <lwip_htons>
 800e85a:	4603      	mov	r3, r0
 800e85c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e85e:	69fb      	ldr	r3, [r7, #28]
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	f003 030f 	and.w	r3, r3, #15
 800e866:	b2db      	uxtb	r3, r3
 800e868:	009b      	lsls	r3, r3, #2
 800e86a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e86c:	7e7b      	ldrb	r3, [r7, #25]
 800e86e:	b29b      	uxth	r3, r3
 800e870:	8b7a      	ldrh	r2, [r7, #26]
 800e872:	429a      	cmp	r2, r3
 800e874:	d202      	bcs.n	800e87c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e876:	f04f 33ff 	mov.w	r3, #4294967295
 800e87a:	e135      	b.n	800eae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e87c:	7e7b      	ldrb	r3, [r7, #25]
 800e87e:	b29b      	uxth	r3, r3
 800e880:	8b7a      	ldrh	r2, [r7, #26]
 800e882:	1ad3      	subs	r3, r2, r3
 800e884:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	88db      	ldrh	r3, [r3, #6]
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7f6 fea7 	bl	80055e0 <lwip_htons>
 800e892:	4603      	mov	r3, r0
 800e894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e898:	b29b      	uxth	r3, r3
 800e89a:	00db      	lsls	r3, r3, #3
 800e89c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	701a      	strb	r2, [r3, #0]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	705a      	strb	r2, [r3, #1]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	709a      	strb	r2, [r3, #2]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b8:	8afa      	ldrh	r2, [r7, #22]
 800e8ba:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e8bc:	8afa      	ldrh	r2, [r7, #22]
 800e8be:	8b7b      	ldrh	r3, [r7, #26]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	b29a      	uxth	r2, r3
 800e8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ca:	88db      	ldrh	r3, [r3, #6]
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	8afa      	ldrh	r2, [r7, #22]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d902      	bls.n	800e8da <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e8d8:	e106      	b.n	800eae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	627b      	str	r3, [r7, #36]	; 0x24
 800e8e0:	e068      	b.n	800e9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ea:	889b      	ldrh	r3, [r3, #4]
 800e8ec:	b29a      	uxth	r2, r3
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	889b      	ldrh	r3, [r3, #4]
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d235      	bcs.n	800e964 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e900:	2b00      	cmp	r3, #0
 800e902:	d020      	beq.n	800e946 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e906:	889b      	ldrh	r3, [r3, #4]
 800e908:	b29a      	uxth	r2, r3
 800e90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90c:	88db      	ldrh	r3, [r3, #6]
 800e90e:	b29b      	uxth	r3, r3
 800e910:	429a      	cmp	r2, r3
 800e912:	d307      	bcc.n	800e924 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e916:	88db      	ldrh	r3, [r3, #6]
 800e918:	b29a      	uxth	r2, r3
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	889b      	ldrh	r3, [r3, #4]
 800e91e:	b29b      	uxth	r3, r3
 800e920:	429a      	cmp	r2, r3
 800e922:	d902      	bls.n	800e92a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e924:	f04f 33ff 	mov.w	r3, #4294967295
 800e928:	e0de      	b.n	800eae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92c:	68ba      	ldr	r2, [r7, #8]
 800e92e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e932:	88db      	ldrh	r3, [r3, #6]
 800e934:	b29a      	uxth	r2, r3
 800e936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e938:	889b      	ldrh	r3, [r3, #4]
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d03d      	beq.n	800e9bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e940:	2300      	movs	r3, #0
 800e942:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e944:	e03a      	b.n	800e9bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	88db      	ldrh	r3, [r3, #6]
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	889b      	ldrh	r3, [r3, #4]
 800e950:	b29b      	uxth	r3, r3
 800e952:	429a      	cmp	r2, r3
 800e954:	d902      	bls.n	800e95c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e956:	f04f 33ff 	mov.w	r3, #4294967295
 800e95a:	e0c5      	b.n	800eae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	68ba      	ldr	r2, [r7, #8]
 800e960:	605a      	str	r2, [r3, #4]
      break;
 800e962:	e02b      	b.n	800e9bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e966:	889b      	ldrh	r3, [r3, #4]
 800e968:	b29a      	uxth	r2, r3
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	889b      	ldrh	r3, [r3, #4]
 800e96e:	b29b      	uxth	r3, r3
 800e970:	429a      	cmp	r2, r3
 800e972:	d102      	bne.n	800e97a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e974:	f04f 33ff 	mov.w	r3, #4294967295
 800e978:	e0b6      	b.n	800eae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97c:	889b      	ldrh	r3, [r3, #4]
 800e97e:	b29a      	uxth	r2, r3
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	88db      	ldrh	r3, [r3, #6]
 800e984:	b29b      	uxth	r3, r3
 800e986:	429a      	cmp	r2, r3
 800e988:	d202      	bcs.n	800e990 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e98a:	f04f 33ff 	mov.w	r3, #4294967295
 800e98e:	e0ab      	b.n	800eae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e992:	2b00      	cmp	r3, #0
 800e994:	d009      	beq.n	800e9aa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e998:	88db      	ldrh	r3, [r3, #6]
 800e99a:	b29a      	uxth	r2, r3
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	889b      	ldrh	r3, [r3, #4]
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d001      	beq.n	800e9aa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d193      	bne.n	800e8e2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e9ba:	e000      	b.n	800e9be <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e9bc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d12d      	bne.n	800ea20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d01c      	beq.n	800ea04 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9cc:	88db      	ldrh	r3, [r3, #6]
 800e9ce:	b29a      	uxth	r2, r3
 800e9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d2:	889b      	ldrh	r3, [r3, #4]
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d906      	bls.n	800e9e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e9da:	4b45      	ldr	r3, [pc, #276]	; (800eaf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e9dc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e9e0:	4944      	ldr	r1, [pc, #272]	; (800eaf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e9e2:	4845      	ldr	r0, [pc, #276]	; (800eaf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e9e4:	f000 fcea 	bl	800f3bc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ea:	68ba      	ldr	r2, [r7, #8]
 800e9ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f0:	88db      	ldrh	r3, [r3, #6]
 800e9f2:	b29a      	uxth	r2, r3
 800e9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f6:	889b      	ldrh	r3, [r3, #4]
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d010      	beq.n	800ea20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	623b      	str	r3, [r7, #32]
 800ea02:	e00d      	b.n	800ea20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d006      	beq.n	800ea1a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ea0c:	4b38      	ldr	r3, [pc, #224]	; (800eaf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ea0e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800ea12:	493a      	ldr	r1, [pc, #232]	; (800eafc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ea14:	4838      	ldr	r0, [pc, #224]	; (800eaf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ea16:	f000 fcd1 	bl	800f3bc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	68ba      	ldr	r2, [r7, #8]
 800ea1e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d105      	bne.n	800ea32 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	7f9b      	ldrb	r3, [r3, #30]
 800ea2a:	f003 0301 	and.w	r3, r3, #1
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d059      	beq.n	800eae6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ea32:	6a3b      	ldr	r3, [r7, #32]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d04f      	beq.n	800ead8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d006      	beq.n	800ea4e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	889b      	ldrh	r3, [r3, #4]
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d002      	beq.n	800ea54 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	623b      	str	r3, [r7, #32]
 800ea52:	e041      	b.n	800ead8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ea54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea56:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800ea58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ea5e:	e012      	b.n	800ea86 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ea60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800ea66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea68:	88db      	ldrh	r3, [r3, #6]
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6e:	889b      	ldrh	r3, [r3, #4]
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d002      	beq.n	800ea7c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ea76:	2300      	movs	r3, #0
 800ea78:	623b      	str	r3, [r7, #32]
            break;
 800ea7a:	e007      	b.n	800ea8c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ea7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800ea80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ea86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1e9      	bne.n	800ea60 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ea8c:	6a3b      	ldr	r3, [r7, #32]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d022      	beq.n	800ead8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d106      	bne.n	800eaa8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800ea9a:	4b15      	ldr	r3, [pc, #84]	; (800eaf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ea9c:	f240 12df 	movw	r2, #479	; 0x1df
 800eaa0:	4917      	ldr	r1, [pc, #92]	; (800eb00 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800eaa2:	4815      	ldr	r0, [pc, #84]	; (800eaf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800eaa4:	f000 fc8a 	bl	800f3bc <iprintf>
          LWIP_ASSERT("sanity check",
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d106      	bne.n	800eac2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800eab4:	4b0e      	ldr	r3, [pc, #56]	; (800eaf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eab6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800eaba:	4911      	ldr	r1, [pc, #68]	; (800eb00 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800eabc:	480e      	ldr	r0, [pc, #56]	; (800eaf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800eabe:	f000 fc7d 	bl	800f3bc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800eac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d006      	beq.n	800ead8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800eaca:	4b09      	ldr	r3, [pc, #36]	; (800eaf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eacc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800ead0:	490c      	ldr	r1, [pc, #48]	; (800eb04 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ead2:	4809      	ldr	r0, [pc, #36]	; (800eaf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ead4:	f000 fc72 	bl	800f3bc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ead8:	6a3b      	ldr	r3, [r7, #32]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	bf14      	ite	ne
 800eade:	2301      	movne	r3, #1
 800eae0:	2300      	moveq	r3, #0
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	e000      	b.n	800eae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800eae6:	2300      	movs	r3, #0
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3730      	adds	r7, #48	; 0x30
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	08012c1c 	.word	0x08012c1c
 800eaf4:	08012d00 	.word	0x08012d00
 800eaf8:	08012c64 	.word	0x08012c64
 800eafc:	08012d20 	.word	0x08012d20
 800eb00:	08012d58 	.word	0x08012d58
 800eb04:	08012d68 	.word	0x08012d68

0800eb08 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b08e      	sub	sp, #56	; 0x38
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800eb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	f003 030f 	and.w	r3, r3, #15
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	009b      	lsls	r3, r3, #2
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	2b14      	cmp	r3, #20
 800eb26:	f040 8171 	bne.w	800ee0c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800eb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2c:	88db      	ldrh	r3, [r3, #6]
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7f6 fd55 	bl	80055e0 <lwip_htons>
 800eb36:	4603      	mov	r3, r0
 800eb38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	00db      	lsls	r3, r3, #3
 800eb40:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800eb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb44:	885b      	ldrh	r3, [r3, #2]
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7f6 fd49 	bl	80055e0 <lwip_htons>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800eb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	f003 030f 	and.w	r3, r3, #15
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	009b      	lsls	r3, r3, #2
 800eb5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800eb62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	f0c0 8150 	bcc.w	800ee10 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800eb70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb74:	b29b      	uxth	r3, r3
 800eb76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb78:	1ad3      	subs	r3, r2, r3
 800eb7a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f7f8 f84b 	bl	8006c18 <pbuf_clen>
 800eb82:	4603      	mov	r3, r0
 800eb84:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800eb86:	4b8c      	ldr	r3, [pc, #560]	; (800edb8 <ip4_reass+0x2b0>)
 800eb88:	881b      	ldrh	r3, [r3, #0]
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	8c3b      	ldrh	r3, [r7, #32]
 800eb8e:	4413      	add	r3, r2
 800eb90:	2b0a      	cmp	r3, #10
 800eb92:	dd10      	ble.n	800ebb6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800eb94:	8c3b      	ldrh	r3, [r7, #32]
 800eb96:	4619      	mov	r1, r3
 800eb98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb9a:	f7ff fd81 	bl	800e6a0 <ip_reass_remove_oldest_datagram>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	f000 8137 	beq.w	800ee14 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800eba6:	4b84      	ldr	r3, [pc, #528]	; (800edb8 <ip4_reass+0x2b0>)
 800eba8:	881b      	ldrh	r3, [r3, #0]
 800ebaa:	461a      	mov	r2, r3
 800ebac:	8c3b      	ldrh	r3, [r7, #32]
 800ebae:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ebb0:	2b0a      	cmp	r3, #10
 800ebb2:	f300 812f 	bgt.w	800ee14 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ebb6:	4b81      	ldr	r3, [pc, #516]	; (800edbc <ip4_reass+0x2b4>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	633b      	str	r3, [r7, #48]	; 0x30
 800ebbc:	e015      	b.n	800ebea <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ebbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc0:	695a      	ldr	r2, [r3, #20]
 800ebc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc4:	68db      	ldr	r3, [r3, #12]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d10c      	bne.n	800ebe4 <ip4_reass+0xdc>
 800ebca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebcc:	699a      	ldr	r2, [r3, #24]
 800ebce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd0:	691b      	ldr	r3, [r3, #16]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d106      	bne.n	800ebe4 <ip4_reass+0xdc>
 800ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd8:	899a      	ldrh	r2, [r3, #12]
 800ebda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebdc:	889b      	ldrh	r3, [r3, #4]
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d006      	beq.n	800ebf2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ebe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	633b      	str	r3, [r7, #48]	; 0x30
 800ebea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1e6      	bne.n	800ebbe <ip4_reass+0xb6>
 800ebf0:	e000      	b.n	800ebf4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ebf2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ebf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d109      	bne.n	800ec0e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ebfa:	8c3b      	ldrh	r3, [r7, #32]
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec00:	f7ff fdb0 	bl	800e764 <ip_reass_enqueue_new_datagram>
 800ec04:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ec06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d11c      	bne.n	800ec46 <ip4_reass+0x13e>
      goto nullreturn;
 800ec0c:	e105      	b.n	800ee1a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ec0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec10:	88db      	ldrh	r3, [r3, #6]
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7f6 fce3 	bl	80055e0 <lwip_htons>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d110      	bne.n	800ec46 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ec24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec26:	89db      	ldrh	r3, [r3, #14]
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7f6 fcd9 	bl	80055e0 <lwip_htons>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d006      	beq.n	800ec46 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ec38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3a:	3308      	adds	r3, #8
 800ec3c:	2214      	movs	r2, #20
 800ec3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec40:	4618      	mov	r0, r3
 800ec42:	f000 fba5 	bl	800f390 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ec46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec48:	88db      	ldrh	r3, [r3, #6]
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	f003 0320 	and.w	r3, r3, #32
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	bf0c      	ite	eq
 800ec54:	2301      	moveq	r3, #1
 800ec56:	2300      	movne	r3, #0
 800ec58:	b2db      	uxtb	r3, r3
 800ec5a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d00e      	beq.n	800ec80 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ec62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ec64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec66:	4413      	add	r3, r2
 800ec68:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ec6a:	8b7a      	ldrh	r2, [r7, #26]
 800ec6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	f0c0 80a0 	bcc.w	800edb4 <ip4_reass+0x2ac>
 800ec74:	8b7b      	ldrh	r3, [r7, #26]
 800ec76:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	f200 809a 	bhi.w	800edb4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ec80:	69fa      	ldr	r2, [r7, #28]
 800ec82:	6879      	ldr	r1, [r7, #4]
 800ec84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec86:	f7ff fdd5 	bl	800e834 <ip_reass_chain_frag_into_datagram_and_validate>
 800ec8a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec92:	f000 809b 	beq.w	800edcc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ec96:	4b48      	ldr	r3, [pc, #288]	; (800edb8 <ip4_reass+0x2b0>)
 800ec98:	881a      	ldrh	r2, [r3, #0]
 800ec9a:	8c3b      	ldrh	r3, [r7, #32]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	4b45      	ldr	r3, [pc, #276]	; (800edb8 <ip4_reass+0x2b0>)
 800eca2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800eca4:	69fb      	ldr	r3, [r7, #28]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d00d      	beq.n	800ecc6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ecaa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ecac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecae:	4413      	add	r3, r2
 800ecb0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ecb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb4:	8a7a      	ldrh	r2, [r7, #18]
 800ecb6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ecb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecba:	7f9b      	ldrb	r3, [r3, #30]
 800ecbc:	f043 0301 	orr.w	r3, r3, #1
 800ecc0:	b2da      	uxtb	r2, r3
 800ecc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d171      	bne.n	800edb0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800eccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecce:	8b9b      	ldrh	r3, [r3, #28]
 800ecd0:	3314      	adds	r3, #20
 800ecd2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ecd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ecde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ece6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece8:	3308      	adds	r3, #8
 800ecea:	2214      	movs	r2, #20
 800ecec:	4619      	mov	r1, r3
 800ecee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecf0:	f000 fb4e 	bl	800f390 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ecf4:	8a3b      	ldrh	r3, [r7, #16]
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7f6 fc72 	bl	80055e0 <lwip_htons>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	461a      	mov	r2, r3
 800ed00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed02:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ed04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed06:	2200      	movs	r2, #0
 800ed08:	719a      	strb	r2, [r3, #6]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ed0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed10:	2200      	movs	r2, #0
 800ed12:	729a      	strb	r2, [r3, #10]
 800ed14:	2200      	movs	r2, #0
 800ed16:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ed18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ed1e:	e00d      	b.n	800ed3c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ed20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ed26:	2114      	movs	r1, #20
 800ed28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed2a:	f7f7 fe67 	bl	80069fc <pbuf_remove_header>
      pbuf_cat(p, r);
 800ed2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f7f7 ffab 	bl	8006c8c <pbuf_cat>
      r = iprh->next_pbuf;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800ed3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1ee      	bne.n	800ed20 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ed42:	4b1e      	ldr	r3, [pc, #120]	; (800edbc <ip4_reass+0x2b4>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d102      	bne.n	800ed52 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed50:	e010      	b.n	800ed74 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ed52:	4b1a      	ldr	r3, [pc, #104]	; (800edbc <ip4_reass+0x2b4>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed58:	e007      	b.n	800ed6a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ed5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d006      	beq.n	800ed72 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ed64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1f4      	bne.n	800ed5a <ip4_reass+0x252>
 800ed70:	e000      	b.n	800ed74 <ip4_reass+0x26c>
          break;
 800ed72:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ed74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed78:	f7ff fd2e 	bl	800e7d8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f7f7 ff4b 	bl	8006c18 <pbuf_clen>
 800ed82:	4603      	mov	r3, r0
 800ed84:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ed86:	4b0c      	ldr	r3, [pc, #48]	; (800edb8 <ip4_reass+0x2b0>)
 800ed88:	881b      	ldrh	r3, [r3, #0]
 800ed8a:	8c3a      	ldrh	r2, [r7, #32]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d906      	bls.n	800ed9e <ip4_reass+0x296>
 800ed90:	4b0b      	ldr	r3, [pc, #44]	; (800edc0 <ip4_reass+0x2b8>)
 800ed92:	f240 229b 	movw	r2, #667	; 0x29b
 800ed96:	490b      	ldr	r1, [pc, #44]	; (800edc4 <ip4_reass+0x2bc>)
 800ed98:	480b      	ldr	r0, [pc, #44]	; (800edc8 <ip4_reass+0x2c0>)
 800ed9a:	f000 fb0f 	bl	800f3bc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ed9e:	4b06      	ldr	r3, [pc, #24]	; (800edb8 <ip4_reass+0x2b0>)
 800eda0:	881a      	ldrh	r2, [r3, #0]
 800eda2:	8c3b      	ldrh	r3, [r7, #32]
 800eda4:	1ad3      	subs	r3, r2, r3
 800eda6:	b29a      	uxth	r2, r3
 800eda8:	4b03      	ldr	r3, [pc, #12]	; (800edb8 <ip4_reass+0x2b0>)
 800edaa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	e038      	b.n	800ee22 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800edb0:	2300      	movs	r3, #0
 800edb2:	e036      	b.n	800ee22 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800edb4:	bf00      	nop
 800edb6:	e00a      	b.n	800edce <ip4_reass+0x2c6>
 800edb8:	20008b44 	.word	0x20008b44
 800edbc:	20008b40 	.word	0x20008b40
 800edc0:	08012c1c 	.word	0x08012c1c
 800edc4:	08012d8c 	.word	0x08012d8c
 800edc8:	08012c64 	.word	0x08012c64
    goto nullreturn_ipr;
 800edcc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800edce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d106      	bne.n	800ede2 <ip4_reass+0x2da>
 800edd4:	4b15      	ldr	r3, [pc, #84]	; (800ee2c <ip4_reass+0x324>)
 800edd6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800edda:	4915      	ldr	r1, [pc, #84]	; (800ee30 <ip4_reass+0x328>)
 800eddc:	4815      	ldr	r0, [pc, #84]	; (800ee34 <ip4_reass+0x32c>)
 800edde:	f000 faed 	bl	800f3bc <iprintf>
  if (ipr->p == NULL) {
 800ede2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d116      	bne.n	800ee18 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800edea:	4b13      	ldr	r3, [pc, #76]	; (800ee38 <ip4_reass+0x330>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d006      	beq.n	800ee02 <ip4_reass+0x2fa>
 800edf4:	4b0d      	ldr	r3, [pc, #52]	; (800ee2c <ip4_reass+0x324>)
 800edf6:	f240 22ab 	movw	r2, #683	; 0x2ab
 800edfa:	4910      	ldr	r1, [pc, #64]	; (800ee3c <ip4_reass+0x334>)
 800edfc:	480d      	ldr	r0, [pc, #52]	; (800ee34 <ip4_reass+0x32c>)
 800edfe:	f000 fadd 	bl	800f3bc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ee02:	2100      	movs	r1, #0
 800ee04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee06:	f7ff fce7 	bl	800e7d8 <ip_reass_dequeue_datagram>
 800ee0a:	e006      	b.n	800ee1a <ip4_reass+0x312>
    goto nullreturn;
 800ee0c:	bf00      	nop
 800ee0e:	e004      	b.n	800ee1a <ip4_reass+0x312>
    goto nullreturn;
 800ee10:	bf00      	nop
 800ee12:	e002      	b.n	800ee1a <ip4_reass+0x312>
      goto nullreturn;
 800ee14:	bf00      	nop
 800ee16:	e000      	b.n	800ee1a <ip4_reass+0x312>
  }

nullreturn:
 800ee18:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f7f7 fe74 	bl	8006b08 <pbuf_free>
  return NULL;
 800ee20:	2300      	movs	r3, #0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3738      	adds	r7, #56	; 0x38
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
 800ee2a:	bf00      	nop
 800ee2c:	08012c1c 	.word	0x08012c1c
 800ee30:	08012da8 	.word	0x08012da8
 800ee34:	08012c64 	.word	0x08012c64
 800ee38:	20008b40 	.word	0x20008b40
 800ee3c:	08012db4 	.word	0x08012db4

0800ee40 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ee44:	2005      	movs	r0, #5
 800ee46:	f7f7 f821 	bl	8005e8c <memp_malloc>
 800ee4a:	4603      	mov	r3, r0
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b082      	sub	sp, #8
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d106      	bne.n	800ee6c <ip_frag_free_pbuf_custom_ref+0x1c>
 800ee5e:	4b07      	ldr	r3, [pc, #28]	; (800ee7c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ee60:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ee64:	4906      	ldr	r1, [pc, #24]	; (800ee80 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ee66:	4807      	ldr	r0, [pc, #28]	; (800ee84 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ee68:	f000 faa8 	bl	800f3bc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ee6c:	6879      	ldr	r1, [r7, #4]
 800ee6e:	2005      	movs	r0, #5
 800ee70:	f7f7 f858 	bl	8005f24 <memp_free>
}
 800ee74:	bf00      	nop
 800ee76:	3708      	adds	r7, #8
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	08012c1c 	.word	0x08012c1c
 800ee80:	08012dd4 	.word	0x08012dd4
 800ee84:	08012c64 	.word	0x08012c64

0800ee88 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d106      	bne.n	800eea8 <ipfrag_free_pbuf_custom+0x20>
 800ee9a:	4b11      	ldr	r3, [pc, #68]	; (800eee0 <ipfrag_free_pbuf_custom+0x58>)
 800ee9c:	f240 22ce 	movw	r2, #718	; 0x2ce
 800eea0:	4910      	ldr	r1, [pc, #64]	; (800eee4 <ipfrag_free_pbuf_custom+0x5c>)
 800eea2:	4811      	ldr	r0, [pc, #68]	; (800eee8 <ipfrag_free_pbuf_custom+0x60>)
 800eea4:	f000 fa8a 	bl	800f3bc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800eea8:	68fa      	ldr	r2, [r7, #12]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d006      	beq.n	800eebe <ipfrag_free_pbuf_custom+0x36>
 800eeb0:	4b0b      	ldr	r3, [pc, #44]	; (800eee0 <ipfrag_free_pbuf_custom+0x58>)
 800eeb2:	f240 22cf 	movw	r2, #719	; 0x2cf
 800eeb6:	490d      	ldr	r1, [pc, #52]	; (800eeec <ipfrag_free_pbuf_custom+0x64>)
 800eeb8:	480b      	ldr	r0, [pc, #44]	; (800eee8 <ipfrag_free_pbuf_custom+0x60>)
 800eeba:	f000 fa7f 	bl	800f3bc <iprintf>
  if (pcr->original != NULL) {
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	695b      	ldr	r3, [r3, #20]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d004      	beq.n	800eed0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	695b      	ldr	r3, [r3, #20]
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7f7 fe1c 	bl	8006b08 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800eed0:	68f8      	ldr	r0, [r7, #12]
 800eed2:	f7ff ffbd 	bl	800ee50 <ip_frag_free_pbuf_custom_ref>
}
 800eed6:	bf00      	nop
 800eed8:	3710      	adds	r7, #16
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
 800eede:	bf00      	nop
 800eee0:	08012c1c 	.word	0x08012c1c
 800eee4:	08012de0 	.word	0x08012de0
 800eee8:	08012c64 	.word	0x08012c64
 800eeec:	08012dec 	.word	0x08012dec

0800eef0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b094      	sub	sp, #80	; 0x50
 800eef4:	af02      	add	r7, sp, #8
 800eef6:	60f8      	str	r0, [r7, #12]
 800eef8:	60b9      	str	r1, [r7, #8]
 800eefa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800eefc:	2300      	movs	r3, #0
 800eefe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ef06:	3b14      	subs	r3, #20
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	da00      	bge.n	800ef0e <ip4_frag+0x1e>
 800ef0c:	3307      	adds	r3, #7
 800ef0e:	10db      	asrs	r3, r3, #3
 800ef10:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ef12:	2314      	movs	r3, #20
 800ef14:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	685b      	ldr	r3, [r3, #4]
 800ef1a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ef1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef1e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ef20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	f003 030f 	and.w	r3, r3, #15
 800ef28:	b2db      	uxtb	r3, r3
 800ef2a:	009b      	lsls	r3, r3, #2
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	2b14      	cmp	r3, #20
 800ef30:	d002      	beq.n	800ef38 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ef32:	f06f 0305 	mvn.w	r3, #5
 800ef36:	e110      	b.n	800f15a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	895b      	ldrh	r3, [r3, #10]
 800ef3c:	2b13      	cmp	r3, #19
 800ef3e:	d809      	bhi.n	800ef54 <ip4_frag+0x64>
 800ef40:	4b88      	ldr	r3, [pc, #544]	; (800f164 <ip4_frag+0x274>)
 800ef42:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ef46:	4988      	ldr	r1, [pc, #544]	; (800f168 <ip4_frag+0x278>)
 800ef48:	4888      	ldr	r0, [pc, #544]	; (800f16c <ip4_frag+0x27c>)
 800ef4a:	f000 fa37 	bl	800f3bc <iprintf>
 800ef4e:	f06f 0305 	mvn.w	r3, #5
 800ef52:	e102      	b.n	800f15a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ef54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef56:	88db      	ldrh	r3, [r3, #6]
 800ef58:	b29b      	uxth	r3, r3
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7f6 fb40 	bl	80055e0 <lwip_htons>
 800ef60:	4603      	mov	r3, r0
 800ef62:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ef64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ef6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ef74:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	891b      	ldrh	r3, [r3, #8]
 800ef7a:	3b14      	subs	r3, #20
 800ef7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ef80:	e0e1      	b.n	800f146 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ef82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef84:	00db      	lsls	r3, r3, #3
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	bf28      	it	cs
 800ef90:	4613      	movcs	r3, r2
 800ef92:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ef94:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef98:	2114      	movs	r1, #20
 800ef9a:	200e      	movs	r0, #14
 800ef9c:	f7f7 fad0 	bl	8006540 <pbuf_alloc>
 800efa0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800efa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	f000 80d5 	beq.w	800f154 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800efaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efac:	895b      	ldrh	r3, [r3, #10]
 800efae:	2b13      	cmp	r3, #19
 800efb0:	d806      	bhi.n	800efc0 <ip4_frag+0xd0>
 800efb2:	4b6c      	ldr	r3, [pc, #432]	; (800f164 <ip4_frag+0x274>)
 800efb4:	f44f 7249 	mov.w	r2, #804	; 0x324
 800efb8:	496d      	ldr	r1, [pc, #436]	; (800f170 <ip4_frag+0x280>)
 800efba:	486c      	ldr	r0, [pc, #432]	; (800f16c <ip4_frag+0x27c>)
 800efbc:	f000 f9fe 	bl	800f3bc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800efc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc2:	685b      	ldr	r3, [r3, #4]
 800efc4:	2214      	movs	r2, #20
 800efc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800efc8:	4618      	mov	r0, r3
 800efca:	f000 f9e1 	bl	800f390 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800efce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800efd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800efd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800efda:	e064      	b.n	800f0a6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	895a      	ldrh	r2, [r3, #10]
 800efe0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800efe2:	1ad3      	subs	r3, r2, r3
 800efe4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	895b      	ldrh	r3, [r3, #10]
 800efea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800efec:	429a      	cmp	r2, r3
 800efee:	d906      	bls.n	800effe <ip4_frag+0x10e>
 800eff0:	4b5c      	ldr	r3, [pc, #368]	; (800f164 <ip4_frag+0x274>)
 800eff2:	f240 322d 	movw	r2, #813	; 0x32d
 800eff6:	495f      	ldr	r1, [pc, #380]	; (800f174 <ip4_frag+0x284>)
 800eff8:	485c      	ldr	r0, [pc, #368]	; (800f16c <ip4_frag+0x27c>)
 800effa:	f000 f9df 	bl	800f3bc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800effe:	8bfa      	ldrh	r2, [r7, #30]
 800f000:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f004:	4293      	cmp	r3, r2
 800f006:	bf28      	it	cs
 800f008:	4613      	movcs	r3, r2
 800f00a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f00e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f012:	2b00      	cmp	r3, #0
 800f014:	d105      	bne.n	800f022 <ip4_frag+0x132>
        poff = 0;
 800f016:	2300      	movs	r3, #0
 800f018:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	60fb      	str	r3, [r7, #12]
        continue;
 800f020:	e041      	b.n	800f0a6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f022:	f7ff ff0d 	bl	800ee40 <ip_frag_alloc_pbuf_custom_ref>
 800f026:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d103      	bne.n	800f036 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f02e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f030:	f7f7 fd6a 	bl	8006b08 <pbuf_free>
        goto memerr;
 800f034:	e08f      	b.n	800f156 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f036:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f03c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f03e:	4413      	add	r3, r2
 800f040:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f044:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f048:	9201      	str	r2, [sp, #4]
 800f04a:	9300      	str	r3, [sp, #0]
 800f04c:	4603      	mov	r3, r0
 800f04e:	2241      	movs	r2, #65	; 0x41
 800f050:	2000      	movs	r0, #0
 800f052:	f7f7 fb9f 	bl	8006794 <pbuf_alloced_custom>
 800f056:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d106      	bne.n	800f06c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f05e:	69b8      	ldr	r0, [r7, #24]
 800f060:	f7ff fef6 	bl	800ee50 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f066:	f7f7 fd4f 	bl	8006b08 <pbuf_free>
        goto memerr;
 800f06a:	e074      	b.n	800f156 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f06c:	68f8      	ldr	r0, [r7, #12]
 800f06e:	f7f7 fdeb 	bl	8006c48 <pbuf_ref>
      pcr->original = p;
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	68fa      	ldr	r2, [r7, #12]
 800f076:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	4a3f      	ldr	r2, [pc, #252]	; (800f178 <ip4_frag+0x288>)
 800f07c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f07e:	6979      	ldr	r1, [r7, #20]
 800f080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f082:	f7f7 fe03 	bl	8006c8c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f086:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f08a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f08e:	1ad3      	subs	r3, r2, r3
 800f090:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f094:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d004      	beq.n	800f0a6 <ip4_frag+0x1b6>
        poff = 0;
 800f09c:	2300      	movs	r3, #0
 800f09e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f0a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d196      	bne.n	800efdc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f0ae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f0b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f0b4:	4413      	add	r3, r2
 800f0b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f0bc:	f1a3 0213 	sub.w	r2, r3, #19
 800f0c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	bfcc      	ite	gt
 800f0c8:	2301      	movgt	r3, #1
 800f0ca:	2300      	movle	r3, #0
 800f0cc:	b2db      	uxtb	r3, r3
 800f0ce:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f0d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f0d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f0d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f0da:	6a3b      	ldr	r3, [r7, #32]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d002      	beq.n	800f0e6 <ip4_frag+0x1f6>
 800f0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d003      	beq.n	800f0ee <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f0e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f0e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f0ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f0ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7f6 fa75 	bl	80055e0 <lwip_htons>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0fc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f0fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f100:	3314      	adds	r3, #20
 800f102:	b29b      	uxth	r3, r3
 800f104:	4618      	mov	r0, r3
 800f106:	f7f6 fa6b 	bl	80055e0 <lwip_htons>
 800f10a:	4603      	mov	r3, r0
 800f10c:	461a      	mov	r2, r3
 800f10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f110:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f114:	2200      	movs	r2, #0
 800f116:	729a      	strb	r2, [r3, #10]
 800f118:	2200      	movs	r2, #0
 800f11a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	695b      	ldr	r3, [r3, #20]
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f124:	68b8      	ldr	r0, [r7, #8]
 800f126:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f12a:	f7f7 fced 	bl	8006b08 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f12e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f132:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f134:	1ad3      	subs	r3, r2, r3
 800f136:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f13a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f13e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f140:	4413      	add	r3, r2
 800f142:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f146:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	f47f af19 	bne.w	800ef82 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f150:	2300      	movs	r3, #0
 800f152:	e002      	b.n	800f15a <ip4_frag+0x26a>
      goto memerr;
 800f154:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f156:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3748      	adds	r7, #72	; 0x48
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	08012c1c 	.word	0x08012c1c
 800f168:	08012df8 	.word	0x08012df8
 800f16c:	08012c64 	.word	0x08012c64
 800f170:	08012e14 	.word	0x08012e14
 800f174:	08012e34 	.word	0x08012e34
 800f178:	0800ee89 	.word	0x0800ee89

0800f17c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b086      	sub	sp, #24
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f186:	230e      	movs	r3, #14
 800f188:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	895b      	ldrh	r3, [r3, #10]
 800f18e:	2b0e      	cmp	r3, #14
 800f190:	d96e      	bls.n	800f270 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	7bdb      	ldrb	r3, [r3, #15]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d106      	bne.n	800f1a8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	b2da      	uxtb	r2, r3
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	7b1a      	ldrb	r2, [r3, #12]
 800f1b2:	7b5b      	ldrb	r3, [r3, #13]
 800f1b4:	021b      	lsls	r3, r3, #8
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	f003 0301 	and.w	r3, r3, #1
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d023      	beq.n	800f20e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	781b      	ldrb	r3, [r3, #0]
 800f1ca:	2b01      	cmp	r3, #1
 800f1cc:	d10f      	bne.n	800f1ee <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	785b      	ldrb	r3, [r3, #1]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d11b      	bne.n	800f20e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f1da:	2b5e      	cmp	r3, #94	; 0x5e
 800f1dc:	d117      	bne.n	800f20e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	7b5b      	ldrb	r3, [r3, #13]
 800f1e2:	f043 0310 	orr.w	r3, r3, #16
 800f1e6:	b2da      	uxtb	r2, r3
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	735a      	strb	r2, [r3, #13]
 800f1ec:	e00f      	b.n	800f20e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	2206      	movs	r2, #6
 800f1f2:	4928      	ldr	r1, [pc, #160]	; (800f294 <ethernet_input+0x118>)
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f000 f8bb 	bl	800f370 <memcmp>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d106      	bne.n	800f20e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	7b5b      	ldrb	r3, [r3, #13]
 800f204:	f043 0308 	orr.w	r3, r3, #8
 800f208:	b2da      	uxtb	r2, r3
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f20e:	89fb      	ldrh	r3, [r7, #14]
 800f210:	2b08      	cmp	r3, #8
 800f212:	d003      	beq.n	800f21c <ethernet_input+0xa0>
 800f214:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f218:	d014      	beq.n	800f244 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f21a:	e032      	b.n	800f282 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f222:	f003 0308 	and.w	r3, r3, #8
 800f226:	2b00      	cmp	r3, #0
 800f228:	d024      	beq.n	800f274 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f22a:	8afb      	ldrh	r3, [r7, #22]
 800f22c:	4619      	mov	r1, r3
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f7f7 fbe4 	bl	80069fc <pbuf_remove_header>
 800f234:	4603      	mov	r3, r0
 800f236:	2b00      	cmp	r3, #0
 800f238:	d11e      	bne.n	800f278 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f23a:	6839      	ldr	r1, [r7, #0]
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f7fe fe91 	bl	800df64 <ip4_input>
      break;
 800f242:	e013      	b.n	800f26c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f24a:	f003 0308 	and.w	r3, r3, #8
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d014      	beq.n	800f27c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f252:	8afb      	ldrh	r3, [r7, #22]
 800f254:	4619      	mov	r1, r3
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f7f7 fbd0 	bl	80069fc <pbuf_remove_header>
 800f25c:	4603      	mov	r3, r0
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d10e      	bne.n	800f280 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f262:	6839      	ldr	r1, [r7, #0]
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7fe f831 	bl	800d2cc <etharp_input>
      break;
 800f26a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f26c:	2300      	movs	r3, #0
 800f26e:	e00c      	b.n	800f28a <ethernet_input+0x10e>
    goto free_and_return;
 800f270:	bf00      	nop
 800f272:	e006      	b.n	800f282 <ethernet_input+0x106>
        goto free_and_return;
 800f274:	bf00      	nop
 800f276:	e004      	b.n	800f282 <ethernet_input+0x106>
        goto free_and_return;
 800f278:	bf00      	nop
 800f27a:	e002      	b.n	800f282 <ethernet_input+0x106>
        goto free_and_return;
 800f27c:	bf00      	nop
 800f27e:	e000      	b.n	800f282 <ethernet_input+0x106>
        goto free_and_return;
 800f280:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f7f7 fc40 	bl	8006b08 <pbuf_free>
  return ERR_OK;
 800f288:	2300      	movs	r3, #0
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3718      	adds	r7, #24
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}
 800f292:	bf00      	nop
 800f294:	08012fc4 	.word	0x08012fc4

0800f298 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f298:	b580      	push	{r7, lr}
 800f29a:	b086      	sub	sp, #24
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	60f8      	str	r0, [r7, #12]
 800f2a0:	60b9      	str	r1, [r7, #8]
 800f2a2:	607a      	str	r2, [r7, #4]
 800f2a4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f2a6:	8c3b      	ldrh	r3, [r7, #32]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7f6 f999 	bl	80055e0 <lwip_htons>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f2b2:	210e      	movs	r1, #14
 800f2b4:	68b8      	ldr	r0, [r7, #8]
 800f2b6:	f7f7 fb91 	bl	80069dc <pbuf_add_header>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d125      	bne.n	800f30c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	8afa      	ldrh	r2, [r7, #22]
 800f2ca:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	2206      	movs	r2, #6
 800f2d0:	6839      	ldr	r1, [r7, #0]
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f000 f85c 	bl	800f390 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f2d8:	693b      	ldr	r3, [r7, #16]
 800f2da:	3306      	adds	r3, #6
 800f2dc:	2206      	movs	r2, #6
 800f2de:	6879      	ldr	r1, [r7, #4]
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f000 f855 	bl	800f390 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f2ec:	2b06      	cmp	r3, #6
 800f2ee:	d006      	beq.n	800f2fe <ethernet_output+0x66>
 800f2f0:	4b0a      	ldr	r3, [pc, #40]	; (800f31c <ethernet_output+0x84>)
 800f2f2:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f2f6:	490a      	ldr	r1, [pc, #40]	; (800f320 <ethernet_output+0x88>)
 800f2f8:	480a      	ldr	r0, [pc, #40]	; (800f324 <ethernet_output+0x8c>)
 800f2fa:	f000 f85f 	bl	800f3bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	699b      	ldr	r3, [r3, #24]
 800f302:	68b9      	ldr	r1, [r7, #8]
 800f304:	68f8      	ldr	r0, [r7, #12]
 800f306:	4798      	blx	r3
 800f308:	4603      	mov	r3, r0
 800f30a:	e002      	b.n	800f312 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f30c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f30e:	f06f 0301 	mvn.w	r3, #1
}
 800f312:	4618      	mov	r0, r3
 800f314:	3718      	adds	r7, #24
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	bf00      	nop
 800f31c:	08012e44 	.word	0x08012e44
 800f320:	08012e7c 	.word	0x08012e7c
 800f324:	08012eb0 	.word	0x08012eb0

0800f328 <__libc_init_array>:
 800f328:	b570      	push	{r4, r5, r6, lr}
 800f32a:	4d0d      	ldr	r5, [pc, #52]	; (800f360 <__libc_init_array+0x38>)
 800f32c:	4c0d      	ldr	r4, [pc, #52]	; (800f364 <__libc_init_array+0x3c>)
 800f32e:	1b64      	subs	r4, r4, r5
 800f330:	10a4      	asrs	r4, r4, #2
 800f332:	2600      	movs	r6, #0
 800f334:	42a6      	cmp	r6, r4
 800f336:	d109      	bne.n	800f34c <__libc_init_array+0x24>
 800f338:	4d0b      	ldr	r5, [pc, #44]	; (800f368 <__libc_init_array+0x40>)
 800f33a:	4c0c      	ldr	r4, [pc, #48]	; (800f36c <__libc_init_array+0x44>)
 800f33c:	f001 f88e 	bl	801045c <_init>
 800f340:	1b64      	subs	r4, r4, r5
 800f342:	10a4      	asrs	r4, r4, #2
 800f344:	2600      	movs	r6, #0
 800f346:	42a6      	cmp	r6, r4
 800f348:	d105      	bne.n	800f356 <__libc_init_array+0x2e>
 800f34a:	bd70      	pop	{r4, r5, r6, pc}
 800f34c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f350:	4798      	blx	r3
 800f352:	3601      	adds	r6, #1
 800f354:	e7ee      	b.n	800f334 <__libc_init_array+0xc>
 800f356:	f855 3b04 	ldr.w	r3, [r5], #4
 800f35a:	4798      	blx	r3
 800f35c:	3601      	adds	r6, #1
 800f35e:	e7f2      	b.n	800f346 <__libc_init_array+0x1e>
 800f360:	08013124 	.word	0x08013124
 800f364:	08013124 	.word	0x08013124
 800f368:	08013124 	.word	0x08013124
 800f36c:	08013128 	.word	0x08013128

0800f370 <memcmp>:
 800f370:	b510      	push	{r4, lr}
 800f372:	3901      	subs	r1, #1
 800f374:	4402      	add	r2, r0
 800f376:	4290      	cmp	r0, r2
 800f378:	d101      	bne.n	800f37e <memcmp+0xe>
 800f37a:	2000      	movs	r0, #0
 800f37c:	e005      	b.n	800f38a <memcmp+0x1a>
 800f37e:	7803      	ldrb	r3, [r0, #0]
 800f380:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f384:	42a3      	cmp	r3, r4
 800f386:	d001      	beq.n	800f38c <memcmp+0x1c>
 800f388:	1b18      	subs	r0, r3, r4
 800f38a:	bd10      	pop	{r4, pc}
 800f38c:	3001      	adds	r0, #1
 800f38e:	e7f2      	b.n	800f376 <memcmp+0x6>

0800f390 <memcpy>:
 800f390:	440a      	add	r2, r1
 800f392:	4291      	cmp	r1, r2
 800f394:	f100 33ff 	add.w	r3, r0, #4294967295
 800f398:	d100      	bne.n	800f39c <memcpy+0xc>
 800f39a:	4770      	bx	lr
 800f39c:	b510      	push	{r4, lr}
 800f39e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3a6:	4291      	cmp	r1, r2
 800f3a8:	d1f9      	bne.n	800f39e <memcpy+0xe>
 800f3aa:	bd10      	pop	{r4, pc}

0800f3ac <memset>:
 800f3ac:	4402      	add	r2, r0
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	d100      	bne.n	800f3b6 <memset+0xa>
 800f3b4:	4770      	bx	lr
 800f3b6:	f803 1b01 	strb.w	r1, [r3], #1
 800f3ba:	e7f9      	b.n	800f3b0 <memset+0x4>

0800f3bc <iprintf>:
 800f3bc:	b40f      	push	{r0, r1, r2, r3}
 800f3be:	4b0a      	ldr	r3, [pc, #40]	; (800f3e8 <iprintf+0x2c>)
 800f3c0:	b513      	push	{r0, r1, r4, lr}
 800f3c2:	681c      	ldr	r4, [r3, #0]
 800f3c4:	b124      	cbz	r4, 800f3d0 <iprintf+0x14>
 800f3c6:	69a3      	ldr	r3, [r4, #24]
 800f3c8:	b913      	cbnz	r3, 800f3d0 <iprintf+0x14>
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	f000 f8c2 	bl	800f554 <__sinit>
 800f3d0:	ab05      	add	r3, sp, #20
 800f3d2:	9a04      	ldr	r2, [sp, #16]
 800f3d4:	68a1      	ldr	r1, [r4, #8]
 800f3d6:	9301      	str	r3, [sp, #4]
 800f3d8:	4620      	mov	r0, r4
 800f3da:	f000 fa7f 	bl	800f8dc <_vfiprintf_r>
 800f3de:	b002      	add	sp, #8
 800f3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3e4:	b004      	add	sp, #16
 800f3e6:	4770      	bx	lr
 800f3e8:	20000014 	.word	0x20000014

0800f3ec <rand>:
 800f3ec:	4b16      	ldr	r3, [pc, #88]	; (800f448 <rand+0x5c>)
 800f3ee:	b510      	push	{r4, lr}
 800f3f0:	681c      	ldr	r4, [r3, #0]
 800f3f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f3f4:	b9b3      	cbnz	r3, 800f424 <rand+0x38>
 800f3f6:	2018      	movs	r0, #24
 800f3f8:	f000 f95e 	bl	800f6b8 <malloc>
 800f3fc:	63a0      	str	r0, [r4, #56]	; 0x38
 800f3fe:	b928      	cbnz	r0, 800f40c <rand+0x20>
 800f400:	4602      	mov	r2, r0
 800f402:	4b12      	ldr	r3, [pc, #72]	; (800f44c <rand+0x60>)
 800f404:	4812      	ldr	r0, [pc, #72]	; (800f450 <rand+0x64>)
 800f406:	214e      	movs	r1, #78	; 0x4e
 800f408:	f000 f82e 	bl	800f468 <__assert_func>
 800f40c:	4a11      	ldr	r2, [pc, #68]	; (800f454 <rand+0x68>)
 800f40e:	4b12      	ldr	r3, [pc, #72]	; (800f458 <rand+0x6c>)
 800f410:	e9c0 2300 	strd	r2, r3, [r0]
 800f414:	4b11      	ldr	r3, [pc, #68]	; (800f45c <rand+0x70>)
 800f416:	6083      	str	r3, [r0, #8]
 800f418:	230b      	movs	r3, #11
 800f41a:	8183      	strh	r3, [r0, #12]
 800f41c:	2201      	movs	r2, #1
 800f41e:	2300      	movs	r3, #0
 800f420:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f424:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800f426:	4a0e      	ldr	r2, [pc, #56]	; (800f460 <rand+0x74>)
 800f428:	6920      	ldr	r0, [r4, #16]
 800f42a:	6963      	ldr	r3, [r4, #20]
 800f42c:	490d      	ldr	r1, [pc, #52]	; (800f464 <rand+0x78>)
 800f42e:	4342      	muls	r2, r0
 800f430:	fb01 2203 	mla	r2, r1, r3, r2
 800f434:	fba0 0101 	umull	r0, r1, r0, r1
 800f438:	1c43      	adds	r3, r0, #1
 800f43a:	eb42 0001 	adc.w	r0, r2, r1
 800f43e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800f442:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f446:	bd10      	pop	{r4, pc}
 800f448:	20000014 	.word	0x20000014
 800f44c:	08012fd8 	.word	0x08012fd8
 800f450:	08012fef 	.word	0x08012fef
 800f454:	abcd330e 	.word	0xabcd330e
 800f458:	e66d1234 	.word	0xe66d1234
 800f45c:	0005deec 	.word	0x0005deec
 800f460:	5851f42d 	.word	0x5851f42d
 800f464:	4c957f2d 	.word	0x4c957f2d

0800f468 <__assert_func>:
 800f468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f46a:	4614      	mov	r4, r2
 800f46c:	461a      	mov	r2, r3
 800f46e:	4b09      	ldr	r3, [pc, #36]	; (800f494 <__assert_func+0x2c>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	4605      	mov	r5, r0
 800f474:	68d8      	ldr	r0, [r3, #12]
 800f476:	b14c      	cbz	r4, 800f48c <__assert_func+0x24>
 800f478:	4b07      	ldr	r3, [pc, #28]	; (800f498 <__assert_func+0x30>)
 800f47a:	9100      	str	r1, [sp, #0]
 800f47c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f480:	4906      	ldr	r1, [pc, #24]	; (800f49c <__assert_func+0x34>)
 800f482:	462b      	mov	r3, r5
 800f484:	f000 f8e4 	bl	800f650 <fiprintf>
 800f488:	f000 fe12 	bl	80100b0 <abort>
 800f48c:	4b04      	ldr	r3, [pc, #16]	; (800f4a0 <__assert_func+0x38>)
 800f48e:	461c      	mov	r4, r3
 800f490:	e7f3      	b.n	800f47a <__assert_func+0x12>
 800f492:	bf00      	nop
 800f494:	20000014 	.word	0x20000014
 800f498:	0801304a 	.word	0x0801304a
 800f49c:	08013057 	.word	0x08013057
 800f4a0:	08013085 	.word	0x08013085

0800f4a4 <std>:
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	b510      	push	{r4, lr}
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	e9c0 3300 	strd	r3, r3, [r0]
 800f4ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f4b2:	6083      	str	r3, [r0, #8]
 800f4b4:	8181      	strh	r1, [r0, #12]
 800f4b6:	6643      	str	r3, [r0, #100]	; 0x64
 800f4b8:	81c2      	strh	r2, [r0, #14]
 800f4ba:	6183      	str	r3, [r0, #24]
 800f4bc:	4619      	mov	r1, r3
 800f4be:	2208      	movs	r2, #8
 800f4c0:	305c      	adds	r0, #92	; 0x5c
 800f4c2:	f7ff ff73 	bl	800f3ac <memset>
 800f4c6:	4b05      	ldr	r3, [pc, #20]	; (800f4dc <std+0x38>)
 800f4c8:	6263      	str	r3, [r4, #36]	; 0x24
 800f4ca:	4b05      	ldr	r3, [pc, #20]	; (800f4e0 <std+0x3c>)
 800f4cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800f4ce:	4b05      	ldr	r3, [pc, #20]	; (800f4e4 <std+0x40>)
 800f4d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f4d2:	4b05      	ldr	r3, [pc, #20]	; (800f4e8 <std+0x44>)
 800f4d4:	6224      	str	r4, [r4, #32]
 800f4d6:	6323      	str	r3, [r4, #48]	; 0x30
 800f4d8:	bd10      	pop	{r4, pc}
 800f4da:	bf00      	nop
 800f4dc:	0800fe85 	.word	0x0800fe85
 800f4e0:	0800fea7 	.word	0x0800fea7
 800f4e4:	0800fedf 	.word	0x0800fedf
 800f4e8:	0800ff03 	.word	0x0800ff03

0800f4ec <_cleanup_r>:
 800f4ec:	4901      	ldr	r1, [pc, #4]	; (800f4f4 <_cleanup_r+0x8>)
 800f4ee:	f000 b8c1 	b.w	800f674 <_fwalk_reent>
 800f4f2:	bf00      	nop
 800f4f4:	080101ed 	.word	0x080101ed

0800f4f8 <__sfmoreglue>:
 800f4f8:	b570      	push	{r4, r5, r6, lr}
 800f4fa:	2268      	movs	r2, #104	; 0x68
 800f4fc:	1e4d      	subs	r5, r1, #1
 800f4fe:	4355      	muls	r5, r2
 800f500:	460e      	mov	r6, r1
 800f502:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f506:	f000 f94b 	bl	800f7a0 <_malloc_r>
 800f50a:	4604      	mov	r4, r0
 800f50c:	b140      	cbz	r0, 800f520 <__sfmoreglue+0x28>
 800f50e:	2100      	movs	r1, #0
 800f510:	e9c0 1600 	strd	r1, r6, [r0]
 800f514:	300c      	adds	r0, #12
 800f516:	60a0      	str	r0, [r4, #8]
 800f518:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f51c:	f7ff ff46 	bl	800f3ac <memset>
 800f520:	4620      	mov	r0, r4
 800f522:	bd70      	pop	{r4, r5, r6, pc}

0800f524 <__sfp_lock_acquire>:
 800f524:	4801      	ldr	r0, [pc, #4]	; (800f52c <__sfp_lock_acquire+0x8>)
 800f526:	f000 b8c5 	b.w	800f6b4 <__retarget_lock_acquire_recursive>
 800f52a:	bf00      	nop
 800f52c:	20008b4d 	.word	0x20008b4d

0800f530 <__sfp_lock_release>:
 800f530:	4801      	ldr	r0, [pc, #4]	; (800f538 <__sfp_lock_release+0x8>)
 800f532:	f000 b8c0 	b.w	800f6b6 <__retarget_lock_release_recursive>
 800f536:	bf00      	nop
 800f538:	20008b4d 	.word	0x20008b4d

0800f53c <__sinit_lock_acquire>:
 800f53c:	4801      	ldr	r0, [pc, #4]	; (800f544 <__sinit_lock_acquire+0x8>)
 800f53e:	f000 b8b9 	b.w	800f6b4 <__retarget_lock_acquire_recursive>
 800f542:	bf00      	nop
 800f544:	20008b4e 	.word	0x20008b4e

0800f548 <__sinit_lock_release>:
 800f548:	4801      	ldr	r0, [pc, #4]	; (800f550 <__sinit_lock_release+0x8>)
 800f54a:	f000 b8b4 	b.w	800f6b6 <__retarget_lock_release_recursive>
 800f54e:	bf00      	nop
 800f550:	20008b4e 	.word	0x20008b4e

0800f554 <__sinit>:
 800f554:	b510      	push	{r4, lr}
 800f556:	4604      	mov	r4, r0
 800f558:	f7ff fff0 	bl	800f53c <__sinit_lock_acquire>
 800f55c:	69a3      	ldr	r3, [r4, #24]
 800f55e:	b11b      	cbz	r3, 800f568 <__sinit+0x14>
 800f560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f564:	f7ff bff0 	b.w	800f548 <__sinit_lock_release>
 800f568:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f56c:	6523      	str	r3, [r4, #80]	; 0x50
 800f56e:	4b13      	ldr	r3, [pc, #76]	; (800f5bc <__sinit+0x68>)
 800f570:	4a13      	ldr	r2, [pc, #76]	; (800f5c0 <__sinit+0x6c>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	62a2      	str	r2, [r4, #40]	; 0x28
 800f576:	42a3      	cmp	r3, r4
 800f578:	bf04      	itt	eq
 800f57a:	2301      	moveq	r3, #1
 800f57c:	61a3      	streq	r3, [r4, #24]
 800f57e:	4620      	mov	r0, r4
 800f580:	f000 f820 	bl	800f5c4 <__sfp>
 800f584:	6060      	str	r0, [r4, #4]
 800f586:	4620      	mov	r0, r4
 800f588:	f000 f81c 	bl	800f5c4 <__sfp>
 800f58c:	60a0      	str	r0, [r4, #8]
 800f58e:	4620      	mov	r0, r4
 800f590:	f000 f818 	bl	800f5c4 <__sfp>
 800f594:	2200      	movs	r2, #0
 800f596:	60e0      	str	r0, [r4, #12]
 800f598:	2104      	movs	r1, #4
 800f59a:	6860      	ldr	r0, [r4, #4]
 800f59c:	f7ff ff82 	bl	800f4a4 <std>
 800f5a0:	68a0      	ldr	r0, [r4, #8]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	2109      	movs	r1, #9
 800f5a6:	f7ff ff7d 	bl	800f4a4 <std>
 800f5aa:	68e0      	ldr	r0, [r4, #12]
 800f5ac:	2202      	movs	r2, #2
 800f5ae:	2112      	movs	r1, #18
 800f5b0:	f7ff ff78 	bl	800f4a4 <std>
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	61a3      	str	r3, [r4, #24]
 800f5b8:	e7d2      	b.n	800f560 <__sinit+0xc>
 800f5ba:	bf00      	nop
 800f5bc:	08012fd4 	.word	0x08012fd4
 800f5c0:	0800f4ed 	.word	0x0800f4ed

0800f5c4 <__sfp>:
 800f5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5c6:	4607      	mov	r7, r0
 800f5c8:	f7ff ffac 	bl	800f524 <__sfp_lock_acquire>
 800f5cc:	4b1e      	ldr	r3, [pc, #120]	; (800f648 <__sfp+0x84>)
 800f5ce:	681e      	ldr	r6, [r3, #0]
 800f5d0:	69b3      	ldr	r3, [r6, #24]
 800f5d2:	b913      	cbnz	r3, 800f5da <__sfp+0x16>
 800f5d4:	4630      	mov	r0, r6
 800f5d6:	f7ff ffbd 	bl	800f554 <__sinit>
 800f5da:	3648      	adds	r6, #72	; 0x48
 800f5dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f5e0:	3b01      	subs	r3, #1
 800f5e2:	d503      	bpl.n	800f5ec <__sfp+0x28>
 800f5e4:	6833      	ldr	r3, [r6, #0]
 800f5e6:	b30b      	cbz	r3, 800f62c <__sfp+0x68>
 800f5e8:	6836      	ldr	r6, [r6, #0]
 800f5ea:	e7f7      	b.n	800f5dc <__sfp+0x18>
 800f5ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f5f0:	b9d5      	cbnz	r5, 800f628 <__sfp+0x64>
 800f5f2:	4b16      	ldr	r3, [pc, #88]	; (800f64c <__sfp+0x88>)
 800f5f4:	60e3      	str	r3, [r4, #12]
 800f5f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f5fa:	6665      	str	r5, [r4, #100]	; 0x64
 800f5fc:	f000 f859 	bl	800f6b2 <__retarget_lock_init_recursive>
 800f600:	f7ff ff96 	bl	800f530 <__sfp_lock_release>
 800f604:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f608:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f60c:	6025      	str	r5, [r4, #0]
 800f60e:	61a5      	str	r5, [r4, #24]
 800f610:	2208      	movs	r2, #8
 800f612:	4629      	mov	r1, r5
 800f614:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f618:	f7ff fec8 	bl	800f3ac <memset>
 800f61c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f620:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f624:	4620      	mov	r0, r4
 800f626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f628:	3468      	adds	r4, #104	; 0x68
 800f62a:	e7d9      	b.n	800f5e0 <__sfp+0x1c>
 800f62c:	2104      	movs	r1, #4
 800f62e:	4638      	mov	r0, r7
 800f630:	f7ff ff62 	bl	800f4f8 <__sfmoreglue>
 800f634:	4604      	mov	r4, r0
 800f636:	6030      	str	r0, [r6, #0]
 800f638:	2800      	cmp	r0, #0
 800f63a:	d1d5      	bne.n	800f5e8 <__sfp+0x24>
 800f63c:	f7ff ff78 	bl	800f530 <__sfp_lock_release>
 800f640:	230c      	movs	r3, #12
 800f642:	603b      	str	r3, [r7, #0]
 800f644:	e7ee      	b.n	800f624 <__sfp+0x60>
 800f646:	bf00      	nop
 800f648:	08012fd4 	.word	0x08012fd4
 800f64c:	ffff0001 	.word	0xffff0001

0800f650 <fiprintf>:
 800f650:	b40e      	push	{r1, r2, r3}
 800f652:	b503      	push	{r0, r1, lr}
 800f654:	4601      	mov	r1, r0
 800f656:	ab03      	add	r3, sp, #12
 800f658:	4805      	ldr	r0, [pc, #20]	; (800f670 <fiprintf+0x20>)
 800f65a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f65e:	6800      	ldr	r0, [r0, #0]
 800f660:	9301      	str	r3, [sp, #4]
 800f662:	f000 f93b 	bl	800f8dc <_vfiprintf_r>
 800f666:	b002      	add	sp, #8
 800f668:	f85d eb04 	ldr.w	lr, [sp], #4
 800f66c:	b003      	add	sp, #12
 800f66e:	4770      	bx	lr
 800f670:	20000014 	.word	0x20000014

0800f674 <_fwalk_reent>:
 800f674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f678:	4606      	mov	r6, r0
 800f67a:	4688      	mov	r8, r1
 800f67c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f680:	2700      	movs	r7, #0
 800f682:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f686:	f1b9 0901 	subs.w	r9, r9, #1
 800f68a:	d505      	bpl.n	800f698 <_fwalk_reent+0x24>
 800f68c:	6824      	ldr	r4, [r4, #0]
 800f68e:	2c00      	cmp	r4, #0
 800f690:	d1f7      	bne.n	800f682 <_fwalk_reent+0xe>
 800f692:	4638      	mov	r0, r7
 800f694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f698:	89ab      	ldrh	r3, [r5, #12]
 800f69a:	2b01      	cmp	r3, #1
 800f69c:	d907      	bls.n	800f6ae <_fwalk_reent+0x3a>
 800f69e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	d003      	beq.n	800f6ae <_fwalk_reent+0x3a>
 800f6a6:	4629      	mov	r1, r5
 800f6a8:	4630      	mov	r0, r6
 800f6aa:	47c0      	blx	r8
 800f6ac:	4307      	orrs	r7, r0
 800f6ae:	3568      	adds	r5, #104	; 0x68
 800f6b0:	e7e9      	b.n	800f686 <_fwalk_reent+0x12>

0800f6b2 <__retarget_lock_init_recursive>:
 800f6b2:	4770      	bx	lr

0800f6b4 <__retarget_lock_acquire_recursive>:
 800f6b4:	4770      	bx	lr

0800f6b6 <__retarget_lock_release_recursive>:
 800f6b6:	4770      	bx	lr

0800f6b8 <malloc>:
 800f6b8:	4b02      	ldr	r3, [pc, #8]	; (800f6c4 <malloc+0xc>)
 800f6ba:	4601      	mov	r1, r0
 800f6bc:	6818      	ldr	r0, [r3, #0]
 800f6be:	f000 b86f 	b.w	800f7a0 <_malloc_r>
 800f6c2:	bf00      	nop
 800f6c4:	20000014 	.word	0x20000014

0800f6c8 <_free_r>:
 800f6c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6ca:	2900      	cmp	r1, #0
 800f6cc:	d044      	beq.n	800f758 <_free_r+0x90>
 800f6ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6d2:	9001      	str	r0, [sp, #4]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	f1a1 0404 	sub.w	r4, r1, #4
 800f6da:	bfb8      	it	lt
 800f6dc:	18e4      	addlt	r4, r4, r3
 800f6de:	f000 fe39 	bl	8010354 <__malloc_lock>
 800f6e2:	4a1e      	ldr	r2, [pc, #120]	; (800f75c <_free_r+0x94>)
 800f6e4:	9801      	ldr	r0, [sp, #4]
 800f6e6:	6813      	ldr	r3, [r2, #0]
 800f6e8:	b933      	cbnz	r3, 800f6f8 <_free_r+0x30>
 800f6ea:	6063      	str	r3, [r4, #4]
 800f6ec:	6014      	str	r4, [r2, #0]
 800f6ee:	b003      	add	sp, #12
 800f6f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6f4:	f000 be34 	b.w	8010360 <__malloc_unlock>
 800f6f8:	42a3      	cmp	r3, r4
 800f6fa:	d908      	bls.n	800f70e <_free_r+0x46>
 800f6fc:	6825      	ldr	r5, [r4, #0]
 800f6fe:	1961      	adds	r1, r4, r5
 800f700:	428b      	cmp	r3, r1
 800f702:	bf01      	itttt	eq
 800f704:	6819      	ldreq	r1, [r3, #0]
 800f706:	685b      	ldreq	r3, [r3, #4]
 800f708:	1949      	addeq	r1, r1, r5
 800f70a:	6021      	streq	r1, [r4, #0]
 800f70c:	e7ed      	b.n	800f6ea <_free_r+0x22>
 800f70e:	461a      	mov	r2, r3
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	b10b      	cbz	r3, 800f718 <_free_r+0x50>
 800f714:	42a3      	cmp	r3, r4
 800f716:	d9fa      	bls.n	800f70e <_free_r+0x46>
 800f718:	6811      	ldr	r1, [r2, #0]
 800f71a:	1855      	adds	r5, r2, r1
 800f71c:	42a5      	cmp	r5, r4
 800f71e:	d10b      	bne.n	800f738 <_free_r+0x70>
 800f720:	6824      	ldr	r4, [r4, #0]
 800f722:	4421      	add	r1, r4
 800f724:	1854      	adds	r4, r2, r1
 800f726:	42a3      	cmp	r3, r4
 800f728:	6011      	str	r1, [r2, #0]
 800f72a:	d1e0      	bne.n	800f6ee <_free_r+0x26>
 800f72c:	681c      	ldr	r4, [r3, #0]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	6053      	str	r3, [r2, #4]
 800f732:	4421      	add	r1, r4
 800f734:	6011      	str	r1, [r2, #0]
 800f736:	e7da      	b.n	800f6ee <_free_r+0x26>
 800f738:	d902      	bls.n	800f740 <_free_r+0x78>
 800f73a:	230c      	movs	r3, #12
 800f73c:	6003      	str	r3, [r0, #0]
 800f73e:	e7d6      	b.n	800f6ee <_free_r+0x26>
 800f740:	6825      	ldr	r5, [r4, #0]
 800f742:	1961      	adds	r1, r4, r5
 800f744:	428b      	cmp	r3, r1
 800f746:	bf04      	itt	eq
 800f748:	6819      	ldreq	r1, [r3, #0]
 800f74a:	685b      	ldreq	r3, [r3, #4]
 800f74c:	6063      	str	r3, [r4, #4]
 800f74e:	bf04      	itt	eq
 800f750:	1949      	addeq	r1, r1, r5
 800f752:	6021      	streq	r1, [r4, #0]
 800f754:	6054      	str	r4, [r2, #4]
 800f756:	e7ca      	b.n	800f6ee <_free_r+0x26>
 800f758:	b003      	add	sp, #12
 800f75a:	bd30      	pop	{r4, r5, pc}
 800f75c:	20008b50 	.word	0x20008b50

0800f760 <sbrk_aligned>:
 800f760:	b570      	push	{r4, r5, r6, lr}
 800f762:	4e0e      	ldr	r6, [pc, #56]	; (800f79c <sbrk_aligned+0x3c>)
 800f764:	460c      	mov	r4, r1
 800f766:	6831      	ldr	r1, [r6, #0]
 800f768:	4605      	mov	r5, r0
 800f76a:	b911      	cbnz	r1, 800f772 <sbrk_aligned+0x12>
 800f76c:	f000 fb7a 	bl	800fe64 <_sbrk_r>
 800f770:	6030      	str	r0, [r6, #0]
 800f772:	4621      	mov	r1, r4
 800f774:	4628      	mov	r0, r5
 800f776:	f000 fb75 	bl	800fe64 <_sbrk_r>
 800f77a:	1c43      	adds	r3, r0, #1
 800f77c:	d00a      	beq.n	800f794 <sbrk_aligned+0x34>
 800f77e:	1cc4      	adds	r4, r0, #3
 800f780:	f024 0403 	bic.w	r4, r4, #3
 800f784:	42a0      	cmp	r0, r4
 800f786:	d007      	beq.n	800f798 <sbrk_aligned+0x38>
 800f788:	1a21      	subs	r1, r4, r0
 800f78a:	4628      	mov	r0, r5
 800f78c:	f000 fb6a 	bl	800fe64 <_sbrk_r>
 800f790:	3001      	adds	r0, #1
 800f792:	d101      	bne.n	800f798 <sbrk_aligned+0x38>
 800f794:	f04f 34ff 	mov.w	r4, #4294967295
 800f798:	4620      	mov	r0, r4
 800f79a:	bd70      	pop	{r4, r5, r6, pc}
 800f79c:	20008b54 	.word	0x20008b54

0800f7a0 <_malloc_r>:
 800f7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7a4:	1ccd      	adds	r5, r1, #3
 800f7a6:	f025 0503 	bic.w	r5, r5, #3
 800f7aa:	3508      	adds	r5, #8
 800f7ac:	2d0c      	cmp	r5, #12
 800f7ae:	bf38      	it	cc
 800f7b0:	250c      	movcc	r5, #12
 800f7b2:	2d00      	cmp	r5, #0
 800f7b4:	4607      	mov	r7, r0
 800f7b6:	db01      	blt.n	800f7bc <_malloc_r+0x1c>
 800f7b8:	42a9      	cmp	r1, r5
 800f7ba:	d905      	bls.n	800f7c8 <_malloc_r+0x28>
 800f7bc:	230c      	movs	r3, #12
 800f7be:	603b      	str	r3, [r7, #0]
 800f7c0:	2600      	movs	r6, #0
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c8:	4e2e      	ldr	r6, [pc, #184]	; (800f884 <_malloc_r+0xe4>)
 800f7ca:	f000 fdc3 	bl	8010354 <__malloc_lock>
 800f7ce:	6833      	ldr	r3, [r6, #0]
 800f7d0:	461c      	mov	r4, r3
 800f7d2:	bb34      	cbnz	r4, 800f822 <_malloc_r+0x82>
 800f7d4:	4629      	mov	r1, r5
 800f7d6:	4638      	mov	r0, r7
 800f7d8:	f7ff ffc2 	bl	800f760 <sbrk_aligned>
 800f7dc:	1c43      	adds	r3, r0, #1
 800f7de:	4604      	mov	r4, r0
 800f7e0:	d14d      	bne.n	800f87e <_malloc_r+0xde>
 800f7e2:	6834      	ldr	r4, [r6, #0]
 800f7e4:	4626      	mov	r6, r4
 800f7e6:	2e00      	cmp	r6, #0
 800f7e8:	d140      	bne.n	800f86c <_malloc_r+0xcc>
 800f7ea:	6823      	ldr	r3, [r4, #0]
 800f7ec:	4631      	mov	r1, r6
 800f7ee:	4638      	mov	r0, r7
 800f7f0:	eb04 0803 	add.w	r8, r4, r3
 800f7f4:	f000 fb36 	bl	800fe64 <_sbrk_r>
 800f7f8:	4580      	cmp	r8, r0
 800f7fa:	d13a      	bne.n	800f872 <_malloc_r+0xd2>
 800f7fc:	6821      	ldr	r1, [r4, #0]
 800f7fe:	3503      	adds	r5, #3
 800f800:	1a6d      	subs	r5, r5, r1
 800f802:	f025 0503 	bic.w	r5, r5, #3
 800f806:	3508      	adds	r5, #8
 800f808:	2d0c      	cmp	r5, #12
 800f80a:	bf38      	it	cc
 800f80c:	250c      	movcc	r5, #12
 800f80e:	4629      	mov	r1, r5
 800f810:	4638      	mov	r0, r7
 800f812:	f7ff ffa5 	bl	800f760 <sbrk_aligned>
 800f816:	3001      	adds	r0, #1
 800f818:	d02b      	beq.n	800f872 <_malloc_r+0xd2>
 800f81a:	6823      	ldr	r3, [r4, #0]
 800f81c:	442b      	add	r3, r5
 800f81e:	6023      	str	r3, [r4, #0]
 800f820:	e00e      	b.n	800f840 <_malloc_r+0xa0>
 800f822:	6822      	ldr	r2, [r4, #0]
 800f824:	1b52      	subs	r2, r2, r5
 800f826:	d41e      	bmi.n	800f866 <_malloc_r+0xc6>
 800f828:	2a0b      	cmp	r2, #11
 800f82a:	d916      	bls.n	800f85a <_malloc_r+0xba>
 800f82c:	1961      	adds	r1, r4, r5
 800f82e:	42a3      	cmp	r3, r4
 800f830:	6025      	str	r5, [r4, #0]
 800f832:	bf18      	it	ne
 800f834:	6059      	strne	r1, [r3, #4]
 800f836:	6863      	ldr	r3, [r4, #4]
 800f838:	bf08      	it	eq
 800f83a:	6031      	streq	r1, [r6, #0]
 800f83c:	5162      	str	r2, [r4, r5]
 800f83e:	604b      	str	r3, [r1, #4]
 800f840:	4638      	mov	r0, r7
 800f842:	f104 060b 	add.w	r6, r4, #11
 800f846:	f000 fd8b 	bl	8010360 <__malloc_unlock>
 800f84a:	f026 0607 	bic.w	r6, r6, #7
 800f84e:	1d23      	adds	r3, r4, #4
 800f850:	1af2      	subs	r2, r6, r3
 800f852:	d0b6      	beq.n	800f7c2 <_malloc_r+0x22>
 800f854:	1b9b      	subs	r3, r3, r6
 800f856:	50a3      	str	r3, [r4, r2]
 800f858:	e7b3      	b.n	800f7c2 <_malloc_r+0x22>
 800f85a:	6862      	ldr	r2, [r4, #4]
 800f85c:	42a3      	cmp	r3, r4
 800f85e:	bf0c      	ite	eq
 800f860:	6032      	streq	r2, [r6, #0]
 800f862:	605a      	strne	r2, [r3, #4]
 800f864:	e7ec      	b.n	800f840 <_malloc_r+0xa0>
 800f866:	4623      	mov	r3, r4
 800f868:	6864      	ldr	r4, [r4, #4]
 800f86a:	e7b2      	b.n	800f7d2 <_malloc_r+0x32>
 800f86c:	4634      	mov	r4, r6
 800f86e:	6876      	ldr	r6, [r6, #4]
 800f870:	e7b9      	b.n	800f7e6 <_malloc_r+0x46>
 800f872:	230c      	movs	r3, #12
 800f874:	603b      	str	r3, [r7, #0]
 800f876:	4638      	mov	r0, r7
 800f878:	f000 fd72 	bl	8010360 <__malloc_unlock>
 800f87c:	e7a1      	b.n	800f7c2 <_malloc_r+0x22>
 800f87e:	6025      	str	r5, [r4, #0]
 800f880:	e7de      	b.n	800f840 <_malloc_r+0xa0>
 800f882:	bf00      	nop
 800f884:	20008b50 	.word	0x20008b50

0800f888 <__sfputc_r>:
 800f888:	6893      	ldr	r3, [r2, #8]
 800f88a:	3b01      	subs	r3, #1
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	b410      	push	{r4}
 800f890:	6093      	str	r3, [r2, #8]
 800f892:	da08      	bge.n	800f8a6 <__sfputc_r+0x1e>
 800f894:	6994      	ldr	r4, [r2, #24]
 800f896:	42a3      	cmp	r3, r4
 800f898:	db01      	blt.n	800f89e <__sfputc_r+0x16>
 800f89a:	290a      	cmp	r1, #10
 800f89c:	d103      	bne.n	800f8a6 <__sfputc_r+0x1e>
 800f89e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8a2:	f000 bb33 	b.w	800ff0c <__swbuf_r>
 800f8a6:	6813      	ldr	r3, [r2, #0]
 800f8a8:	1c58      	adds	r0, r3, #1
 800f8aa:	6010      	str	r0, [r2, #0]
 800f8ac:	7019      	strb	r1, [r3, #0]
 800f8ae:	4608      	mov	r0, r1
 800f8b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8b4:	4770      	bx	lr

0800f8b6 <__sfputs_r>:
 800f8b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8b8:	4606      	mov	r6, r0
 800f8ba:	460f      	mov	r7, r1
 800f8bc:	4614      	mov	r4, r2
 800f8be:	18d5      	adds	r5, r2, r3
 800f8c0:	42ac      	cmp	r4, r5
 800f8c2:	d101      	bne.n	800f8c8 <__sfputs_r+0x12>
 800f8c4:	2000      	movs	r0, #0
 800f8c6:	e007      	b.n	800f8d8 <__sfputs_r+0x22>
 800f8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8cc:	463a      	mov	r2, r7
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	f7ff ffda 	bl	800f888 <__sfputc_r>
 800f8d4:	1c43      	adds	r3, r0, #1
 800f8d6:	d1f3      	bne.n	800f8c0 <__sfputs_r+0xa>
 800f8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f8dc <_vfiprintf_r>:
 800f8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e0:	460d      	mov	r5, r1
 800f8e2:	b09d      	sub	sp, #116	; 0x74
 800f8e4:	4614      	mov	r4, r2
 800f8e6:	4698      	mov	r8, r3
 800f8e8:	4606      	mov	r6, r0
 800f8ea:	b118      	cbz	r0, 800f8f4 <_vfiprintf_r+0x18>
 800f8ec:	6983      	ldr	r3, [r0, #24]
 800f8ee:	b90b      	cbnz	r3, 800f8f4 <_vfiprintf_r+0x18>
 800f8f0:	f7ff fe30 	bl	800f554 <__sinit>
 800f8f4:	4b89      	ldr	r3, [pc, #548]	; (800fb1c <_vfiprintf_r+0x240>)
 800f8f6:	429d      	cmp	r5, r3
 800f8f8:	d11b      	bne.n	800f932 <_vfiprintf_r+0x56>
 800f8fa:	6875      	ldr	r5, [r6, #4]
 800f8fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8fe:	07d9      	lsls	r1, r3, #31
 800f900:	d405      	bmi.n	800f90e <_vfiprintf_r+0x32>
 800f902:	89ab      	ldrh	r3, [r5, #12]
 800f904:	059a      	lsls	r2, r3, #22
 800f906:	d402      	bmi.n	800f90e <_vfiprintf_r+0x32>
 800f908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f90a:	f7ff fed3 	bl	800f6b4 <__retarget_lock_acquire_recursive>
 800f90e:	89ab      	ldrh	r3, [r5, #12]
 800f910:	071b      	lsls	r3, r3, #28
 800f912:	d501      	bpl.n	800f918 <_vfiprintf_r+0x3c>
 800f914:	692b      	ldr	r3, [r5, #16]
 800f916:	b9eb      	cbnz	r3, 800f954 <_vfiprintf_r+0x78>
 800f918:	4629      	mov	r1, r5
 800f91a:	4630      	mov	r0, r6
 800f91c:	f000 fb5a 	bl	800ffd4 <__swsetup_r>
 800f920:	b1c0      	cbz	r0, 800f954 <_vfiprintf_r+0x78>
 800f922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f924:	07dc      	lsls	r4, r3, #31
 800f926:	d50e      	bpl.n	800f946 <_vfiprintf_r+0x6a>
 800f928:	f04f 30ff 	mov.w	r0, #4294967295
 800f92c:	b01d      	add	sp, #116	; 0x74
 800f92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f932:	4b7b      	ldr	r3, [pc, #492]	; (800fb20 <_vfiprintf_r+0x244>)
 800f934:	429d      	cmp	r5, r3
 800f936:	d101      	bne.n	800f93c <_vfiprintf_r+0x60>
 800f938:	68b5      	ldr	r5, [r6, #8]
 800f93a:	e7df      	b.n	800f8fc <_vfiprintf_r+0x20>
 800f93c:	4b79      	ldr	r3, [pc, #484]	; (800fb24 <_vfiprintf_r+0x248>)
 800f93e:	429d      	cmp	r5, r3
 800f940:	bf08      	it	eq
 800f942:	68f5      	ldreq	r5, [r6, #12]
 800f944:	e7da      	b.n	800f8fc <_vfiprintf_r+0x20>
 800f946:	89ab      	ldrh	r3, [r5, #12]
 800f948:	0598      	lsls	r0, r3, #22
 800f94a:	d4ed      	bmi.n	800f928 <_vfiprintf_r+0x4c>
 800f94c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f94e:	f7ff feb2 	bl	800f6b6 <__retarget_lock_release_recursive>
 800f952:	e7e9      	b.n	800f928 <_vfiprintf_r+0x4c>
 800f954:	2300      	movs	r3, #0
 800f956:	9309      	str	r3, [sp, #36]	; 0x24
 800f958:	2320      	movs	r3, #32
 800f95a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f95e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f962:	2330      	movs	r3, #48	; 0x30
 800f964:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fb28 <_vfiprintf_r+0x24c>
 800f968:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f96c:	f04f 0901 	mov.w	r9, #1
 800f970:	4623      	mov	r3, r4
 800f972:	469a      	mov	sl, r3
 800f974:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f978:	b10a      	cbz	r2, 800f97e <_vfiprintf_r+0xa2>
 800f97a:	2a25      	cmp	r2, #37	; 0x25
 800f97c:	d1f9      	bne.n	800f972 <_vfiprintf_r+0x96>
 800f97e:	ebba 0b04 	subs.w	fp, sl, r4
 800f982:	d00b      	beq.n	800f99c <_vfiprintf_r+0xc0>
 800f984:	465b      	mov	r3, fp
 800f986:	4622      	mov	r2, r4
 800f988:	4629      	mov	r1, r5
 800f98a:	4630      	mov	r0, r6
 800f98c:	f7ff ff93 	bl	800f8b6 <__sfputs_r>
 800f990:	3001      	adds	r0, #1
 800f992:	f000 80aa 	beq.w	800faea <_vfiprintf_r+0x20e>
 800f996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f998:	445a      	add	r2, fp
 800f99a:	9209      	str	r2, [sp, #36]	; 0x24
 800f99c:	f89a 3000 	ldrb.w	r3, [sl]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f000 80a2 	beq.w	800faea <_vfiprintf_r+0x20e>
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f9ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9b0:	f10a 0a01 	add.w	sl, sl, #1
 800f9b4:	9304      	str	r3, [sp, #16]
 800f9b6:	9307      	str	r3, [sp, #28]
 800f9b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f9bc:	931a      	str	r3, [sp, #104]	; 0x68
 800f9be:	4654      	mov	r4, sl
 800f9c0:	2205      	movs	r2, #5
 800f9c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9c6:	4858      	ldr	r0, [pc, #352]	; (800fb28 <_vfiprintf_r+0x24c>)
 800f9c8:	f7f0 fc22 	bl	8000210 <memchr>
 800f9cc:	9a04      	ldr	r2, [sp, #16]
 800f9ce:	b9d8      	cbnz	r0, 800fa08 <_vfiprintf_r+0x12c>
 800f9d0:	06d1      	lsls	r1, r2, #27
 800f9d2:	bf44      	itt	mi
 800f9d4:	2320      	movmi	r3, #32
 800f9d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9da:	0713      	lsls	r3, r2, #28
 800f9dc:	bf44      	itt	mi
 800f9de:	232b      	movmi	r3, #43	; 0x2b
 800f9e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9e4:	f89a 3000 	ldrb.w	r3, [sl]
 800f9e8:	2b2a      	cmp	r3, #42	; 0x2a
 800f9ea:	d015      	beq.n	800fa18 <_vfiprintf_r+0x13c>
 800f9ec:	9a07      	ldr	r2, [sp, #28]
 800f9ee:	4654      	mov	r4, sl
 800f9f0:	2000      	movs	r0, #0
 800f9f2:	f04f 0c0a 	mov.w	ip, #10
 800f9f6:	4621      	mov	r1, r4
 800f9f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9fc:	3b30      	subs	r3, #48	; 0x30
 800f9fe:	2b09      	cmp	r3, #9
 800fa00:	d94e      	bls.n	800faa0 <_vfiprintf_r+0x1c4>
 800fa02:	b1b0      	cbz	r0, 800fa32 <_vfiprintf_r+0x156>
 800fa04:	9207      	str	r2, [sp, #28]
 800fa06:	e014      	b.n	800fa32 <_vfiprintf_r+0x156>
 800fa08:	eba0 0308 	sub.w	r3, r0, r8
 800fa0c:	fa09 f303 	lsl.w	r3, r9, r3
 800fa10:	4313      	orrs	r3, r2
 800fa12:	9304      	str	r3, [sp, #16]
 800fa14:	46a2      	mov	sl, r4
 800fa16:	e7d2      	b.n	800f9be <_vfiprintf_r+0xe2>
 800fa18:	9b03      	ldr	r3, [sp, #12]
 800fa1a:	1d19      	adds	r1, r3, #4
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	9103      	str	r1, [sp, #12]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	bfbb      	ittet	lt
 800fa24:	425b      	neglt	r3, r3
 800fa26:	f042 0202 	orrlt.w	r2, r2, #2
 800fa2a:	9307      	strge	r3, [sp, #28]
 800fa2c:	9307      	strlt	r3, [sp, #28]
 800fa2e:	bfb8      	it	lt
 800fa30:	9204      	strlt	r2, [sp, #16]
 800fa32:	7823      	ldrb	r3, [r4, #0]
 800fa34:	2b2e      	cmp	r3, #46	; 0x2e
 800fa36:	d10c      	bne.n	800fa52 <_vfiprintf_r+0x176>
 800fa38:	7863      	ldrb	r3, [r4, #1]
 800fa3a:	2b2a      	cmp	r3, #42	; 0x2a
 800fa3c:	d135      	bne.n	800faaa <_vfiprintf_r+0x1ce>
 800fa3e:	9b03      	ldr	r3, [sp, #12]
 800fa40:	1d1a      	adds	r2, r3, #4
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	9203      	str	r2, [sp, #12]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	bfb8      	it	lt
 800fa4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa4e:	3402      	adds	r4, #2
 800fa50:	9305      	str	r3, [sp, #20]
 800fa52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fb38 <_vfiprintf_r+0x25c>
 800fa56:	7821      	ldrb	r1, [r4, #0]
 800fa58:	2203      	movs	r2, #3
 800fa5a:	4650      	mov	r0, sl
 800fa5c:	f7f0 fbd8 	bl	8000210 <memchr>
 800fa60:	b140      	cbz	r0, 800fa74 <_vfiprintf_r+0x198>
 800fa62:	2340      	movs	r3, #64	; 0x40
 800fa64:	eba0 000a 	sub.w	r0, r0, sl
 800fa68:	fa03 f000 	lsl.w	r0, r3, r0
 800fa6c:	9b04      	ldr	r3, [sp, #16]
 800fa6e:	4303      	orrs	r3, r0
 800fa70:	3401      	adds	r4, #1
 800fa72:	9304      	str	r3, [sp, #16]
 800fa74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa78:	482c      	ldr	r0, [pc, #176]	; (800fb2c <_vfiprintf_r+0x250>)
 800fa7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa7e:	2206      	movs	r2, #6
 800fa80:	f7f0 fbc6 	bl	8000210 <memchr>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d03f      	beq.n	800fb08 <_vfiprintf_r+0x22c>
 800fa88:	4b29      	ldr	r3, [pc, #164]	; (800fb30 <_vfiprintf_r+0x254>)
 800fa8a:	bb1b      	cbnz	r3, 800fad4 <_vfiprintf_r+0x1f8>
 800fa8c:	9b03      	ldr	r3, [sp, #12]
 800fa8e:	3307      	adds	r3, #7
 800fa90:	f023 0307 	bic.w	r3, r3, #7
 800fa94:	3308      	adds	r3, #8
 800fa96:	9303      	str	r3, [sp, #12]
 800fa98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa9a:	443b      	add	r3, r7
 800fa9c:	9309      	str	r3, [sp, #36]	; 0x24
 800fa9e:	e767      	b.n	800f970 <_vfiprintf_r+0x94>
 800faa0:	fb0c 3202 	mla	r2, ip, r2, r3
 800faa4:	460c      	mov	r4, r1
 800faa6:	2001      	movs	r0, #1
 800faa8:	e7a5      	b.n	800f9f6 <_vfiprintf_r+0x11a>
 800faaa:	2300      	movs	r3, #0
 800faac:	3401      	adds	r4, #1
 800faae:	9305      	str	r3, [sp, #20]
 800fab0:	4619      	mov	r1, r3
 800fab2:	f04f 0c0a 	mov.w	ip, #10
 800fab6:	4620      	mov	r0, r4
 800fab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fabc:	3a30      	subs	r2, #48	; 0x30
 800fabe:	2a09      	cmp	r2, #9
 800fac0:	d903      	bls.n	800faca <_vfiprintf_r+0x1ee>
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d0c5      	beq.n	800fa52 <_vfiprintf_r+0x176>
 800fac6:	9105      	str	r1, [sp, #20]
 800fac8:	e7c3      	b.n	800fa52 <_vfiprintf_r+0x176>
 800faca:	fb0c 2101 	mla	r1, ip, r1, r2
 800face:	4604      	mov	r4, r0
 800fad0:	2301      	movs	r3, #1
 800fad2:	e7f0      	b.n	800fab6 <_vfiprintf_r+0x1da>
 800fad4:	ab03      	add	r3, sp, #12
 800fad6:	9300      	str	r3, [sp, #0]
 800fad8:	462a      	mov	r2, r5
 800fada:	4b16      	ldr	r3, [pc, #88]	; (800fb34 <_vfiprintf_r+0x258>)
 800fadc:	a904      	add	r1, sp, #16
 800fade:	4630      	mov	r0, r6
 800fae0:	f3af 8000 	nop.w
 800fae4:	4607      	mov	r7, r0
 800fae6:	1c78      	adds	r0, r7, #1
 800fae8:	d1d6      	bne.n	800fa98 <_vfiprintf_r+0x1bc>
 800faea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800faec:	07d9      	lsls	r1, r3, #31
 800faee:	d405      	bmi.n	800fafc <_vfiprintf_r+0x220>
 800faf0:	89ab      	ldrh	r3, [r5, #12]
 800faf2:	059a      	lsls	r2, r3, #22
 800faf4:	d402      	bmi.n	800fafc <_vfiprintf_r+0x220>
 800faf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800faf8:	f7ff fddd 	bl	800f6b6 <__retarget_lock_release_recursive>
 800fafc:	89ab      	ldrh	r3, [r5, #12]
 800fafe:	065b      	lsls	r3, r3, #25
 800fb00:	f53f af12 	bmi.w	800f928 <_vfiprintf_r+0x4c>
 800fb04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb06:	e711      	b.n	800f92c <_vfiprintf_r+0x50>
 800fb08:	ab03      	add	r3, sp, #12
 800fb0a:	9300      	str	r3, [sp, #0]
 800fb0c:	462a      	mov	r2, r5
 800fb0e:	4b09      	ldr	r3, [pc, #36]	; (800fb34 <_vfiprintf_r+0x258>)
 800fb10:	a904      	add	r1, sp, #16
 800fb12:	4630      	mov	r0, r6
 800fb14:	f000 f880 	bl	800fc18 <_printf_i>
 800fb18:	e7e4      	b.n	800fae4 <_vfiprintf_r+0x208>
 800fb1a:	bf00      	nop
 800fb1c:	080130a8 	.word	0x080130a8
 800fb20:	080130c8 	.word	0x080130c8
 800fb24:	08013088 	.word	0x08013088
 800fb28:	080130e8 	.word	0x080130e8
 800fb2c:	080130f2 	.word	0x080130f2
 800fb30:	00000000 	.word	0x00000000
 800fb34:	0800f8b7 	.word	0x0800f8b7
 800fb38:	080130ee 	.word	0x080130ee

0800fb3c <_printf_common>:
 800fb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb40:	4616      	mov	r6, r2
 800fb42:	4699      	mov	r9, r3
 800fb44:	688a      	ldr	r2, [r1, #8]
 800fb46:	690b      	ldr	r3, [r1, #16]
 800fb48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	bfb8      	it	lt
 800fb50:	4613      	movlt	r3, r2
 800fb52:	6033      	str	r3, [r6, #0]
 800fb54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb58:	4607      	mov	r7, r0
 800fb5a:	460c      	mov	r4, r1
 800fb5c:	b10a      	cbz	r2, 800fb62 <_printf_common+0x26>
 800fb5e:	3301      	adds	r3, #1
 800fb60:	6033      	str	r3, [r6, #0]
 800fb62:	6823      	ldr	r3, [r4, #0]
 800fb64:	0699      	lsls	r1, r3, #26
 800fb66:	bf42      	ittt	mi
 800fb68:	6833      	ldrmi	r3, [r6, #0]
 800fb6a:	3302      	addmi	r3, #2
 800fb6c:	6033      	strmi	r3, [r6, #0]
 800fb6e:	6825      	ldr	r5, [r4, #0]
 800fb70:	f015 0506 	ands.w	r5, r5, #6
 800fb74:	d106      	bne.n	800fb84 <_printf_common+0x48>
 800fb76:	f104 0a19 	add.w	sl, r4, #25
 800fb7a:	68e3      	ldr	r3, [r4, #12]
 800fb7c:	6832      	ldr	r2, [r6, #0]
 800fb7e:	1a9b      	subs	r3, r3, r2
 800fb80:	42ab      	cmp	r3, r5
 800fb82:	dc26      	bgt.n	800fbd2 <_printf_common+0x96>
 800fb84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb88:	1e13      	subs	r3, r2, #0
 800fb8a:	6822      	ldr	r2, [r4, #0]
 800fb8c:	bf18      	it	ne
 800fb8e:	2301      	movne	r3, #1
 800fb90:	0692      	lsls	r2, r2, #26
 800fb92:	d42b      	bmi.n	800fbec <_printf_common+0xb0>
 800fb94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb98:	4649      	mov	r1, r9
 800fb9a:	4638      	mov	r0, r7
 800fb9c:	47c0      	blx	r8
 800fb9e:	3001      	adds	r0, #1
 800fba0:	d01e      	beq.n	800fbe0 <_printf_common+0xa4>
 800fba2:	6823      	ldr	r3, [r4, #0]
 800fba4:	68e5      	ldr	r5, [r4, #12]
 800fba6:	6832      	ldr	r2, [r6, #0]
 800fba8:	f003 0306 	and.w	r3, r3, #6
 800fbac:	2b04      	cmp	r3, #4
 800fbae:	bf08      	it	eq
 800fbb0:	1aad      	subeq	r5, r5, r2
 800fbb2:	68a3      	ldr	r3, [r4, #8]
 800fbb4:	6922      	ldr	r2, [r4, #16]
 800fbb6:	bf0c      	ite	eq
 800fbb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbbc:	2500      	movne	r5, #0
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	bfc4      	itt	gt
 800fbc2:	1a9b      	subgt	r3, r3, r2
 800fbc4:	18ed      	addgt	r5, r5, r3
 800fbc6:	2600      	movs	r6, #0
 800fbc8:	341a      	adds	r4, #26
 800fbca:	42b5      	cmp	r5, r6
 800fbcc:	d11a      	bne.n	800fc04 <_printf_common+0xc8>
 800fbce:	2000      	movs	r0, #0
 800fbd0:	e008      	b.n	800fbe4 <_printf_common+0xa8>
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	4652      	mov	r2, sl
 800fbd6:	4649      	mov	r1, r9
 800fbd8:	4638      	mov	r0, r7
 800fbda:	47c0      	blx	r8
 800fbdc:	3001      	adds	r0, #1
 800fbde:	d103      	bne.n	800fbe8 <_printf_common+0xac>
 800fbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbe8:	3501      	adds	r5, #1
 800fbea:	e7c6      	b.n	800fb7a <_printf_common+0x3e>
 800fbec:	18e1      	adds	r1, r4, r3
 800fbee:	1c5a      	adds	r2, r3, #1
 800fbf0:	2030      	movs	r0, #48	; 0x30
 800fbf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fbf6:	4422      	add	r2, r4
 800fbf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fbfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc00:	3302      	adds	r3, #2
 800fc02:	e7c7      	b.n	800fb94 <_printf_common+0x58>
 800fc04:	2301      	movs	r3, #1
 800fc06:	4622      	mov	r2, r4
 800fc08:	4649      	mov	r1, r9
 800fc0a:	4638      	mov	r0, r7
 800fc0c:	47c0      	blx	r8
 800fc0e:	3001      	adds	r0, #1
 800fc10:	d0e6      	beq.n	800fbe0 <_printf_common+0xa4>
 800fc12:	3601      	adds	r6, #1
 800fc14:	e7d9      	b.n	800fbca <_printf_common+0x8e>
	...

0800fc18 <_printf_i>:
 800fc18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc1c:	7e0f      	ldrb	r7, [r1, #24]
 800fc1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc20:	2f78      	cmp	r7, #120	; 0x78
 800fc22:	4691      	mov	r9, r2
 800fc24:	4680      	mov	r8, r0
 800fc26:	460c      	mov	r4, r1
 800fc28:	469a      	mov	sl, r3
 800fc2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc2e:	d807      	bhi.n	800fc40 <_printf_i+0x28>
 800fc30:	2f62      	cmp	r7, #98	; 0x62
 800fc32:	d80a      	bhi.n	800fc4a <_printf_i+0x32>
 800fc34:	2f00      	cmp	r7, #0
 800fc36:	f000 80d8 	beq.w	800fdea <_printf_i+0x1d2>
 800fc3a:	2f58      	cmp	r7, #88	; 0x58
 800fc3c:	f000 80a3 	beq.w	800fd86 <_printf_i+0x16e>
 800fc40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc48:	e03a      	b.n	800fcc0 <_printf_i+0xa8>
 800fc4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc4e:	2b15      	cmp	r3, #21
 800fc50:	d8f6      	bhi.n	800fc40 <_printf_i+0x28>
 800fc52:	a101      	add	r1, pc, #4	; (adr r1, 800fc58 <_printf_i+0x40>)
 800fc54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc58:	0800fcb1 	.word	0x0800fcb1
 800fc5c:	0800fcc5 	.word	0x0800fcc5
 800fc60:	0800fc41 	.word	0x0800fc41
 800fc64:	0800fc41 	.word	0x0800fc41
 800fc68:	0800fc41 	.word	0x0800fc41
 800fc6c:	0800fc41 	.word	0x0800fc41
 800fc70:	0800fcc5 	.word	0x0800fcc5
 800fc74:	0800fc41 	.word	0x0800fc41
 800fc78:	0800fc41 	.word	0x0800fc41
 800fc7c:	0800fc41 	.word	0x0800fc41
 800fc80:	0800fc41 	.word	0x0800fc41
 800fc84:	0800fdd1 	.word	0x0800fdd1
 800fc88:	0800fcf5 	.word	0x0800fcf5
 800fc8c:	0800fdb3 	.word	0x0800fdb3
 800fc90:	0800fc41 	.word	0x0800fc41
 800fc94:	0800fc41 	.word	0x0800fc41
 800fc98:	0800fdf3 	.word	0x0800fdf3
 800fc9c:	0800fc41 	.word	0x0800fc41
 800fca0:	0800fcf5 	.word	0x0800fcf5
 800fca4:	0800fc41 	.word	0x0800fc41
 800fca8:	0800fc41 	.word	0x0800fc41
 800fcac:	0800fdbb 	.word	0x0800fdbb
 800fcb0:	682b      	ldr	r3, [r5, #0]
 800fcb2:	1d1a      	adds	r2, r3, #4
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	602a      	str	r2, [r5, #0]
 800fcb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	e0a3      	b.n	800fe0c <_printf_i+0x1f4>
 800fcc4:	6820      	ldr	r0, [r4, #0]
 800fcc6:	6829      	ldr	r1, [r5, #0]
 800fcc8:	0606      	lsls	r6, r0, #24
 800fcca:	f101 0304 	add.w	r3, r1, #4
 800fcce:	d50a      	bpl.n	800fce6 <_printf_i+0xce>
 800fcd0:	680e      	ldr	r6, [r1, #0]
 800fcd2:	602b      	str	r3, [r5, #0]
 800fcd4:	2e00      	cmp	r6, #0
 800fcd6:	da03      	bge.n	800fce0 <_printf_i+0xc8>
 800fcd8:	232d      	movs	r3, #45	; 0x2d
 800fcda:	4276      	negs	r6, r6
 800fcdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fce0:	485e      	ldr	r0, [pc, #376]	; (800fe5c <_printf_i+0x244>)
 800fce2:	230a      	movs	r3, #10
 800fce4:	e019      	b.n	800fd1a <_printf_i+0x102>
 800fce6:	680e      	ldr	r6, [r1, #0]
 800fce8:	602b      	str	r3, [r5, #0]
 800fcea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fcee:	bf18      	it	ne
 800fcf0:	b236      	sxthne	r6, r6
 800fcf2:	e7ef      	b.n	800fcd4 <_printf_i+0xbc>
 800fcf4:	682b      	ldr	r3, [r5, #0]
 800fcf6:	6820      	ldr	r0, [r4, #0]
 800fcf8:	1d19      	adds	r1, r3, #4
 800fcfa:	6029      	str	r1, [r5, #0]
 800fcfc:	0601      	lsls	r1, r0, #24
 800fcfe:	d501      	bpl.n	800fd04 <_printf_i+0xec>
 800fd00:	681e      	ldr	r6, [r3, #0]
 800fd02:	e002      	b.n	800fd0a <_printf_i+0xf2>
 800fd04:	0646      	lsls	r6, r0, #25
 800fd06:	d5fb      	bpl.n	800fd00 <_printf_i+0xe8>
 800fd08:	881e      	ldrh	r6, [r3, #0]
 800fd0a:	4854      	ldr	r0, [pc, #336]	; (800fe5c <_printf_i+0x244>)
 800fd0c:	2f6f      	cmp	r7, #111	; 0x6f
 800fd0e:	bf0c      	ite	eq
 800fd10:	2308      	moveq	r3, #8
 800fd12:	230a      	movne	r3, #10
 800fd14:	2100      	movs	r1, #0
 800fd16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd1a:	6865      	ldr	r5, [r4, #4]
 800fd1c:	60a5      	str	r5, [r4, #8]
 800fd1e:	2d00      	cmp	r5, #0
 800fd20:	bfa2      	ittt	ge
 800fd22:	6821      	ldrge	r1, [r4, #0]
 800fd24:	f021 0104 	bicge.w	r1, r1, #4
 800fd28:	6021      	strge	r1, [r4, #0]
 800fd2a:	b90e      	cbnz	r6, 800fd30 <_printf_i+0x118>
 800fd2c:	2d00      	cmp	r5, #0
 800fd2e:	d04d      	beq.n	800fdcc <_printf_i+0x1b4>
 800fd30:	4615      	mov	r5, r2
 800fd32:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd36:	fb03 6711 	mls	r7, r3, r1, r6
 800fd3a:	5dc7      	ldrb	r7, [r0, r7]
 800fd3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd40:	4637      	mov	r7, r6
 800fd42:	42bb      	cmp	r3, r7
 800fd44:	460e      	mov	r6, r1
 800fd46:	d9f4      	bls.n	800fd32 <_printf_i+0x11a>
 800fd48:	2b08      	cmp	r3, #8
 800fd4a:	d10b      	bne.n	800fd64 <_printf_i+0x14c>
 800fd4c:	6823      	ldr	r3, [r4, #0]
 800fd4e:	07de      	lsls	r6, r3, #31
 800fd50:	d508      	bpl.n	800fd64 <_printf_i+0x14c>
 800fd52:	6923      	ldr	r3, [r4, #16]
 800fd54:	6861      	ldr	r1, [r4, #4]
 800fd56:	4299      	cmp	r1, r3
 800fd58:	bfde      	ittt	le
 800fd5a:	2330      	movle	r3, #48	; 0x30
 800fd5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd60:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd64:	1b52      	subs	r2, r2, r5
 800fd66:	6122      	str	r2, [r4, #16]
 800fd68:	f8cd a000 	str.w	sl, [sp]
 800fd6c:	464b      	mov	r3, r9
 800fd6e:	aa03      	add	r2, sp, #12
 800fd70:	4621      	mov	r1, r4
 800fd72:	4640      	mov	r0, r8
 800fd74:	f7ff fee2 	bl	800fb3c <_printf_common>
 800fd78:	3001      	adds	r0, #1
 800fd7a:	d14c      	bne.n	800fe16 <_printf_i+0x1fe>
 800fd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd80:	b004      	add	sp, #16
 800fd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd86:	4835      	ldr	r0, [pc, #212]	; (800fe5c <_printf_i+0x244>)
 800fd88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fd8c:	6829      	ldr	r1, [r5, #0]
 800fd8e:	6823      	ldr	r3, [r4, #0]
 800fd90:	f851 6b04 	ldr.w	r6, [r1], #4
 800fd94:	6029      	str	r1, [r5, #0]
 800fd96:	061d      	lsls	r5, r3, #24
 800fd98:	d514      	bpl.n	800fdc4 <_printf_i+0x1ac>
 800fd9a:	07df      	lsls	r7, r3, #31
 800fd9c:	bf44      	itt	mi
 800fd9e:	f043 0320 	orrmi.w	r3, r3, #32
 800fda2:	6023      	strmi	r3, [r4, #0]
 800fda4:	b91e      	cbnz	r6, 800fdae <_printf_i+0x196>
 800fda6:	6823      	ldr	r3, [r4, #0]
 800fda8:	f023 0320 	bic.w	r3, r3, #32
 800fdac:	6023      	str	r3, [r4, #0]
 800fdae:	2310      	movs	r3, #16
 800fdb0:	e7b0      	b.n	800fd14 <_printf_i+0xfc>
 800fdb2:	6823      	ldr	r3, [r4, #0]
 800fdb4:	f043 0320 	orr.w	r3, r3, #32
 800fdb8:	6023      	str	r3, [r4, #0]
 800fdba:	2378      	movs	r3, #120	; 0x78
 800fdbc:	4828      	ldr	r0, [pc, #160]	; (800fe60 <_printf_i+0x248>)
 800fdbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fdc2:	e7e3      	b.n	800fd8c <_printf_i+0x174>
 800fdc4:	0659      	lsls	r1, r3, #25
 800fdc6:	bf48      	it	mi
 800fdc8:	b2b6      	uxthmi	r6, r6
 800fdca:	e7e6      	b.n	800fd9a <_printf_i+0x182>
 800fdcc:	4615      	mov	r5, r2
 800fdce:	e7bb      	b.n	800fd48 <_printf_i+0x130>
 800fdd0:	682b      	ldr	r3, [r5, #0]
 800fdd2:	6826      	ldr	r6, [r4, #0]
 800fdd4:	6961      	ldr	r1, [r4, #20]
 800fdd6:	1d18      	adds	r0, r3, #4
 800fdd8:	6028      	str	r0, [r5, #0]
 800fdda:	0635      	lsls	r5, r6, #24
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	d501      	bpl.n	800fde4 <_printf_i+0x1cc>
 800fde0:	6019      	str	r1, [r3, #0]
 800fde2:	e002      	b.n	800fdea <_printf_i+0x1d2>
 800fde4:	0670      	lsls	r0, r6, #25
 800fde6:	d5fb      	bpl.n	800fde0 <_printf_i+0x1c8>
 800fde8:	8019      	strh	r1, [r3, #0]
 800fdea:	2300      	movs	r3, #0
 800fdec:	6123      	str	r3, [r4, #16]
 800fdee:	4615      	mov	r5, r2
 800fdf0:	e7ba      	b.n	800fd68 <_printf_i+0x150>
 800fdf2:	682b      	ldr	r3, [r5, #0]
 800fdf4:	1d1a      	adds	r2, r3, #4
 800fdf6:	602a      	str	r2, [r5, #0]
 800fdf8:	681d      	ldr	r5, [r3, #0]
 800fdfa:	6862      	ldr	r2, [r4, #4]
 800fdfc:	2100      	movs	r1, #0
 800fdfe:	4628      	mov	r0, r5
 800fe00:	f7f0 fa06 	bl	8000210 <memchr>
 800fe04:	b108      	cbz	r0, 800fe0a <_printf_i+0x1f2>
 800fe06:	1b40      	subs	r0, r0, r5
 800fe08:	6060      	str	r0, [r4, #4]
 800fe0a:	6863      	ldr	r3, [r4, #4]
 800fe0c:	6123      	str	r3, [r4, #16]
 800fe0e:	2300      	movs	r3, #0
 800fe10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe14:	e7a8      	b.n	800fd68 <_printf_i+0x150>
 800fe16:	6923      	ldr	r3, [r4, #16]
 800fe18:	462a      	mov	r2, r5
 800fe1a:	4649      	mov	r1, r9
 800fe1c:	4640      	mov	r0, r8
 800fe1e:	47d0      	blx	sl
 800fe20:	3001      	adds	r0, #1
 800fe22:	d0ab      	beq.n	800fd7c <_printf_i+0x164>
 800fe24:	6823      	ldr	r3, [r4, #0]
 800fe26:	079b      	lsls	r3, r3, #30
 800fe28:	d413      	bmi.n	800fe52 <_printf_i+0x23a>
 800fe2a:	68e0      	ldr	r0, [r4, #12]
 800fe2c:	9b03      	ldr	r3, [sp, #12]
 800fe2e:	4298      	cmp	r0, r3
 800fe30:	bfb8      	it	lt
 800fe32:	4618      	movlt	r0, r3
 800fe34:	e7a4      	b.n	800fd80 <_printf_i+0x168>
 800fe36:	2301      	movs	r3, #1
 800fe38:	4632      	mov	r2, r6
 800fe3a:	4649      	mov	r1, r9
 800fe3c:	4640      	mov	r0, r8
 800fe3e:	47d0      	blx	sl
 800fe40:	3001      	adds	r0, #1
 800fe42:	d09b      	beq.n	800fd7c <_printf_i+0x164>
 800fe44:	3501      	adds	r5, #1
 800fe46:	68e3      	ldr	r3, [r4, #12]
 800fe48:	9903      	ldr	r1, [sp, #12]
 800fe4a:	1a5b      	subs	r3, r3, r1
 800fe4c:	42ab      	cmp	r3, r5
 800fe4e:	dcf2      	bgt.n	800fe36 <_printf_i+0x21e>
 800fe50:	e7eb      	b.n	800fe2a <_printf_i+0x212>
 800fe52:	2500      	movs	r5, #0
 800fe54:	f104 0619 	add.w	r6, r4, #25
 800fe58:	e7f5      	b.n	800fe46 <_printf_i+0x22e>
 800fe5a:	bf00      	nop
 800fe5c:	080130f9 	.word	0x080130f9
 800fe60:	0801310a 	.word	0x0801310a

0800fe64 <_sbrk_r>:
 800fe64:	b538      	push	{r3, r4, r5, lr}
 800fe66:	4d06      	ldr	r5, [pc, #24]	; (800fe80 <_sbrk_r+0x1c>)
 800fe68:	2300      	movs	r3, #0
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	4608      	mov	r0, r1
 800fe6e:	602b      	str	r3, [r5, #0]
 800fe70:	f7f0 ffe6 	bl	8000e40 <_sbrk>
 800fe74:	1c43      	adds	r3, r0, #1
 800fe76:	d102      	bne.n	800fe7e <_sbrk_r+0x1a>
 800fe78:	682b      	ldr	r3, [r5, #0]
 800fe7a:	b103      	cbz	r3, 800fe7e <_sbrk_r+0x1a>
 800fe7c:	6023      	str	r3, [r4, #0]
 800fe7e:	bd38      	pop	{r3, r4, r5, pc}
 800fe80:	20008b48 	.word	0x20008b48

0800fe84 <__sread>:
 800fe84:	b510      	push	{r4, lr}
 800fe86:	460c      	mov	r4, r1
 800fe88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe8c:	f000 fa6e 	bl	801036c <_read_r>
 800fe90:	2800      	cmp	r0, #0
 800fe92:	bfab      	itete	ge
 800fe94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe96:	89a3      	ldrhlt	r3, [r4, #12]
 800fe98:	181b      	addge	r3, r3, r0
 800fe9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe9e:	bfac      	ite	ge
 800fea0:	6563      	strge	r3, [r4, #84]	; 0x54
 800fea2:	81a3      	strhlt	r3, [r4, #12]
 800fea4:	bd10      	pop	{r4, pc}

0800fea6 <__swrite>:
 800fea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feaa:	461f      	mov	r7, r3
 800feac:	898b      	ldrh	r3, [r1, #12]
 800feae:	05db      	lsls	r3, r3, #23
 800feb0:	4605      	mov	r5, r0
 800feb2:	460c      	mov	r4, r1
 800feb4:	4616      	mov	r6, r2
 800feb6:	d505      	bpl.n	800fec4 <__swrite+0x1e>
 800feb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800febc:	2302      	movs	r3, #2
 800febe:	2200      	movs	r2, #0
 800fec0:	f000 f9d0 	bl	8010264 <_lseek_r>
 800fec4:	89a3      	ldrh	r3, [r4, #12]
 800fec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800feca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fece:	81a3      	strh	r3, [r4, #12]
 800fed0:	4632      	mov	r2, r6
 800fed2:	463b      	mov	r3, r7
 800fed4:	4628      	mov	r0, r5
 800fed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feda:	f000 b869 	b.w	800ffb0 <_write_r>

0800fede <__sseek>:
 800fede:	b510      	push	{r4, lr}
 800fee0:	460c      	mov	r4, r1
 800fee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fee6:	f000 f9bd 	bl	8010264 <_lseek_r>
 800feea:	1c43      	adds	r3, r0, #1
 800feec:	89a3      	ldrh	r3, [r4, #12]
 800feee:	bf15      	itete	ne
 800fef0:	6560      	strne	r0, [r4, #84]	; 0x54
 800fef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fefa:	81a3      	strheq	r3, [r4, #12]
 800fefc:	bf18      	it	ne
 800fefe:	81a3      	strhne	r3, [r4, #12]
 800ff00:	bd10      	pop	{r4, pc}

0800ff02 <__sclose>:
 800ff02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff06:	f000 b8db 	b.w	80100c0 <_close_r>
	...

0800ff0c <__swbuf_r>:
 800ff0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff0e:	460e      	mov	r6, r1
 800ff10:	4614      	mov	r4, r2
 800ff12:	4605      	mov	r5, r0
 800ff14:	b118      	cbz	r0, 800ff1e <__swbuf_r+0x12>
 800ff16:	6983      	ldr	r3, [r0, #24]
 800ff18:	b90b      	cbnz	r3, 800ff1e <__swbuf_r+0x12>
 800ff1a:	f7ff fb1b 	bl	800f554 <__sinit>
 800ff1e:	4b21      	ldr	r3, [pc, #132]	; (800ffa4 <__swbuf_r+0x98>)
 800ff20:	429c      	cmp	r4, r3
 800ff22:	d12b      	bne.n	800ff7c <__swbuf_r+0x70>
 800ff24:	686c      	ldr	r4, [r5, #4]
 800ff26:	69a3      	ldr	r3, [r4, #24]
 800ff28:	60a3      	str	r3, [r4, #8]
 800ff2a:	89a3      	ldrh	r3, [r4, #12]
 800ff2c:	071a      	lsls	r2, r3, #28
 800ff2e:	d52f      	bpl.n	800ff90 <__swbuf_r+0x84>
 800ff30:	6923      	ldr	r3, [r4, #16]
 800ff32:	b36b      	cbz	r3, 800ff90 <__swbuf_r+0x84>
 800ff34:	6923      	ldr	r3, [r4, #16]
 800ff36:	6820      	ldr	r0, [r4, #0]
 800ff38:	1ac0      	subs	r0, r0, r3
 800ff3a:	6963      	ldr	r3, [r4, #20]
 800ff3c:	b2f6      	uxtb	r6, r6
 800ff3e:	4283      	cmp	r3, r0
 800ff40:	4637      	mov	r7, r6
 800ff42:	dc04      	bgt.n	800ff4e <__swbuf_r+0x42>
 800ff44:	4621      	mov	r1, r4
 800ff46:	4628      	mov	r0, r5
 800ff48:	f000 f950 	bl	80101ec <_fflush_r>
 800ff4c:	bb30      	cbnz	r0, 800ff9c <__swbuf_r+0x90>
 800ff4e:	68a3      	ldr	r3, [r4, #8]
 800ff50:	3b01      	subs	r3, #1
 800ff52:	60a3      	str	r3, [r4, #8]
 800ff54:	6823      	ldr	r3, [r4, #0]
 800ff56:	1c5a      	adds	r2, r3, #1
 800ff58:	6022      	str	r2, [r4, #0]
 800ff5a:	701e      	strb	r6, [r3, #0]
 800ff5c:	6963      	ldr	r3, [r4, #20]
 800ff5e:	3001      	adds	r0, #1
 800ff60:	4283      	cmp	r3, r0
 800ff62:	d004      	beq.n	800ff6e <__swbuf_r+0x62>
 800ff64:	89a3      	ldrh	r3, [r4, #12]
 800ff66:	07db      	lsls	r3, r3, #31
 800ff68:	d506      	bpl.n	800ff78 <__swbuf_r+0x6c>
 800ff6a:	2e0a      	cmp	r6, #10
 800ff6c:	d104      	bne.n	800ff78 <__swbuf_r+0x6c>
 800ff6e:	4621      	mov	r1, r4
 800ff70:	4628      	mov	r0, r5
 800ff72:	f000 f93b 	bl	80101ec <_fflush_r>
 800ff76:	b988      	cbnz	r0, 800ff9c <__swbuf_r+0x90>
 800ff78:	4638      	mov	r0, r7
 800ff7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff7c:	4b0a      	ldr	r3, [pc, #40]	; (800ffa8 <__swbuf_r+0x9c>)
 800ff7e:	429c      	cmp	r4, r3
 800ff80:	d101      	bne.n	800ff86 <__swbuf_r+0x7a>
 800ff82:	68ac      	ldr	r4, [r5, #8]
 800ff84:	e7cf      	b.n	800ff26 <__swbuf_r+0x1a>
 800ff86:	4b09      	ldr	r3, [pc, #36]	; (800ffac <__swbuf_r+0xa0>)
 800ff88:	429c      	cmp	r4, r3
 800ff8a:	bf08      	it	eq
 800ff8c:	68ec      	ldreq	r4, [r5, #12]
 800ff8e:	e7ca      	b.n	800ff26 <__swbuf_r+0x1a>
 800ff90:	4621      	mov	r1, r4
 800ff92:	4628      	mov	r0, r5
 800ff94:	f000 f81e 	bl	800ffd4 <__swsetup_r>
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	d0cb      	beq.n	800ff34 <__swbuf_r+0x28>
 800ff9c:	f04f 37ff 	mov.w	r7, #4294967295
 800ffa0:	e7ea      	b.n	800ff78 <__swbuf_r+0x6c>
 800ffa2:	bf00      	nop
 800ffa4:	080130a8 	.word	0x080130a8
 800ffa8:	080130c8 	.word	0x080130c8
 800ffac:	08013088 	.word	0x08013088

0800ffb0 <_write_r>:
 800ffb0:	b538      	push	{r3, r4, r5, lr}
 800ffb2:	4d07      	ldr	r5, [pc, #28]	; (800ffd0 <_write_r+0x20>)
 800ffb4:	4604      	mov	r4, r0
 800ffb6:	4608      	mov	r0, r1
 800ffb8:	4611      	mov	r1, r2
 800ffba:	2200      	movs	r2, #0
 800ffbc:	602a      	str	r2, [r5, #0]
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	f7f0 feed 	bl	8000d9e <_write>
 800ffc4:	1c43      	adds	r3, r0, #1
 800ffc6:	d102      	bne.n	800ffce <_write_r+0x1e>
 800ffc8:	682b      	ldr	r3, [r5, #0]
 800ffca:	b103      	cbz	r3, 800ffce <_write_r+0x1e>
 800ffcc:	6023      	str	r3, [r4, #0]
 800ffce:	bd38      	pop	{r3, r4, r5, pc}
 800ffd0:	20008b48 	.word	0x20008b48

0800ffd4 <__swsetup_r>:
 800ffd4:	4b32      	ldr	r3, [pc, #200]	; (80100a0 <__swsetup_r+0xcc>)
 800ffd6:	b570      	push	{r4, r5, r6, lr}
 800ffd8:	681d      	ldr	r5, [r3, #0]
 800ffda:	4606      	mov	r6, r0
 800ffdc:	460c      	mov	r4, r1
 800ffde:	b125      	cbz	r5, 800ffea <__swsetup_r+0x16>
 800ffe0:	69ab      	ldr	r3, [r5, #24]
 800ffe2:	b913      	cbnz	r3, 800ffea <__swsetup_r+0x16>
 800ffe4:	4628      	mov	r0, r5
 800ffe6:	f7ff fab5 	bl	800f554 <__sinit>
 800ffea:	4b2e      	ldr	r3, [pc, #184]	; (80100a4 <__swsetup_r+0xd0>)
 800ffec:	429c      	cmp	r4, r3
 800ffee:	d10f      	bne.n	8010010 <__swsetup_r+0x3c>
 800fff0:	686c      	ldr	r4, [r5, #4]
 800fff2:	89a3      	ldrh	r3, [r4, #12]
 800fff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fff8:	0719      	lsls	r1, r3, #28
 800fffa:	d42c      	bmi.n	8010056 <__swsetup_r+0x82>
 800fffc:	06dd      	lsls	r5, r3, #27
 800fffe:	d411      	bmi.n	8010024 <__swsetup_r+0x50>
 8010000:	2309      	movs	r3, #9
 8010002:	6033      	str	r3, [r6, #0]
 8010004:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010008:	81a3      	strh	r3, [r4, #12]
 801000a:	f04f 30ff 	mov.w	r0, #4294967295
 801000e:	e03e      	b.n	801008e <__swsetup_r+0xba>
 8010010:	4b25      	ldr	r3, [pc, #148]	; (80100a8 <__swsetup_r+0xd4>)
 8010012:	429c      	cmp	r4, r3
 8010014:	d101      	bne.n	801001a <__swsetup_r+0x46>
 8010016:	68ac      	ldr	r4, [r5, #8]
 8010018:	e7eb      	b.n	800fff2 <__swsetup_r+0x1e>
 801001a:	4b24      	ldr	r3, [pc, #144]	; (80100ac <__swsetup_r+0xd8>)
 801001c:	429c      	cmp	r4, r3
 801001e:	bf08      	it	eq
 8010020:	68ec      	ldreq	r4, [r5, #12]
 8010022:	e7e6      	b.n	800fff2 <__swsetup_r+0x1e>
 8010024:	0758      	lsls	r0, r3, #29
 8010026:	d512      	bpl.n	801004e <__swsetup_r+0x7a>
 8010028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801002a:	b141      	cbz	r1, 801003e <__swsetup_r+0x6a>
 801002c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010030:	4299      	cmp	r1, r3
 8010032:	d002      	beq.n	801003a <__swsetup_r+0x66>
 8010034:	4630      	mov	r0, r6
 8010036:	f7ff fb47 	bl	800f6c8 <_free_r>
 801003a:	2300      	movs	r3, #0
 801003c:	6363      	str	r3, [r4, #52]	; 0x34
 801003e:	89a3      	ldrh	r3, [r4, #12]
 8010040:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010044:	81a3      	strh	r3, [r4, #12]
 8010046:	2300      	movs	r3, #0
 8010048:	6063      	str	r3, [r4, #4]
 801004a:	6923      	ldr	r3, [r4, #16]
 801004c:	6023      	str	r3, [r4, #0]
 801004e:	89a3      	ldrh	r3, [r4, #12]
 8010050:	f043 0308 	orr.w	r3, r3, #8
 8010054:	81a3      	strh	r3, [r4, #12]
 8010056:	6923      	ldr	r3, [r4, #16]
 8010058:	b94b      	cbnz	r3, 801006e <__swsetup_r+0x9a>
 801005a:	89a3      	ldrh	r3, [r4, #12]
 801005c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010064:	d003      	beq.n	801006e <__swsetup_r+0x9a>
 8010066:	4621      	mov	r1, r4
 8010068:	4630      	mov	r0, r6
 801006a:	f000 f933 	bl	80102d4 <__smakebuf_r>
 801006e:	89a0      	ldrh	r0, [r4, #12]
 8010070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010074:	f010 0301 	ands.w	r3, r0, #1
 8010078:	d00a      	beq.n	8010090 <__swsetup_r+0xbc>
 801007a:	2300      	movs	r3, #0
 801007c:	60a3      	str	r3, [r4, #8]
 801007e:	6963      	ldr	r3, [r4, #20]
 8010080:	425b      	negs	r3, r3
 8010082:	61a3      	str	r3, [r4, #24]
 8010084:	6923      	ldr	r3, [r4, #16]
 8010086:	b943      	cbnz	r3, 801009a <__swsetup_r+0xc6>
 8010088:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801008c:	d1ba      	bne.n	8010004 <__swsetup_r+0x30>
 801008e:	bd70      	pop	{r4, r5, r6, pc}
 8010090:	0781      	lsls	r1, r0, #30
 8010092:	bf58      	it	pl
 8010094:	6963      	ldrpl	r3, [r4, #20]
 8010096:	60a3      	str	r3, [r4, #8]
 8010098:	e7f4      	b.n	8010084 <__swsetup_r+0xb0>
 801009a:	2000      	movs	r0, #0
 801009c:	e7f7      	b.n	801008e <__swsetup_r+0xba>
 801009e:	bf00      	nop
 80100a0:	20000014 	.word	0x20000014
 80100a4:	080130a8 	.word	0x080130a8
 80100a8:	080130c8 	.word	0x080130c8
 80100ac:	08013088 	.word	0x08013088

080100b0 <abort>:
 80100b0:	b508      	push	{r3, lr}
 80100b2:	2006      	movs	r0, #6
 80100b4:	f000 f994 	bl	80103e0 <raise>
 80100b8:	2001      	movs	r0, #1
 80100ba:	f7f0 fe49 	bl	8000d50 <_exit>
	...

080100c0 <_close_r>:
 80100c0:	b538      	push	{r3, r4, r5, lr}
 80100c2:	4d06      	ldr	r5, [pc, #24]	; (80100dc <_close_r+0x1c>)
 80100c4:	2300      	movs	r3, #0
 80100c6:	4604      	mov	r4, r0
 80100c8:	4608      	mov	r0, r1
 80100ca:	602b      	str	r3, [r5, #0]
 80100cc:	f7f0 fe83 	bl	8000dd6 <_close>
 80100d0:	1c43      	adds	r3, r0, #1
 80100d2:	d102      	bne.n	80100da <_close_r+0x1a>
 80100d4:	682b      	ldr	r3, [r5, #0]
 80100d6:	b103      	cbz	r3, 80100da <_close_r+0x1a>
 80100d8:	6023      	str	r3, [r4, #0]
 80100da:	bd38      	pop	{r3, r4, r5, pc}
 80100dc:	20008b48 	.word	0x20008b48

080100e0 <__sflush_r>:
 80100e0:	898a      	ldrh	r2, [r1, #12]
 80100e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e6:	4605      	mov	r5, r0
 80100e8:	0710      	lsls	r0, r2, #28
 80100ea:	460c      	mov	r4, r1
 80100ec:	d458      	bmi.n	80101a0 <__sflush_r+0xc0>
 80100ee:	684b      	ldr	r3, [r1, #4]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	dc05      	bgt.n	8010100 <__sflush_r+0x20>
 80100f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	dc02      	bgt.n	8010100 <__sflush_r+0x20>
 80100fa:	2000      	movs	r0, #0
 80100fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010102:	2e00      	cmp	r6, #0
 8010104:	d0f9      	beq.n	80100fa <__sflush_r+0x1a>
 8010106:	2300      	movs	r3, #0
 8010108:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801010c:	682f      	ldr	r7, [r5, #0]
 801010e:	602b      	str	r3, [r5, #0]
 8010110:	d032      	beq.n	8010178 <__sflush_r+0x98>
 8010112:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010114:	89a3      	ldrh	r3, [r4, #12]
 8010116:	075a      	lsls	r2, r3, #29
 8010118:	d505      	bpl.n	8010126 <__sflush_r+0x46>
 801011a:	6863      	ldr	r3, [r4, #4]
 801011c:	1ac0      	subs	r0, r0, r3
 801011e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010120:	b10b      	cbz	r3, 8010126 <__sflush_r+0x46>
 8010122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010124:	1ac0      	subs	r0, r0, r3
 8010126:	2300      	movs	r3, #0
 8010128:	4602      	mov	r2, r0
 801012a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801012c:	6a21      	ldr	r1, [r4, #32]
 801012e:	4628      	mov	r0, r5
 8010130:	47b0      	blx	r6
 8010132:	1c43      	adds	r3, r0, #1
 8010134:	89a3      	ldrh	r3, [r4, #12]
 8010136:	d106      	bne.n	8010146 <__sflush_r+0x66>
 8010138:	6829      	ldr	r1, [r5, #0]
 801013a:	291d      	cmp	r1, #29
 801013c:	d82c      	bhi.n	8010198 <__sflush_r+0xb8>
 801013e:	4a2a      	ldr	r2, [pc, #168]	; (80101e8 <__sflush_r+0x108>)
 8010140:	40ca      	lsrs	r2, r1
 8010142:	07d6      	lsls	r6, r2, #31
 8010144:	d528      	bpl.n	8010198 <__sflush_r+0xb8>
 8010146:	2200      	movs	r2, #0
 8010148:	6062      	str	r2, [r4, #4]
 801014a:	04d9      	lsls	r1, r3, #19
 801014c:	6922      	ldr	r2, [r4, #16]
 801014e:	6022      	str	r2, [r4, #0]
 8010150:	d504      	bpl.n	801015c <__sflush_r+0x7c>
 8010152:	1c42      	adds	r2, r0, #1
 8010154:	d101      	bne.n	801015a <__sflush_r+0x7a>
 8010156:	682b      	ldr	r3, [r5, #0]
 8010158:	b903      	cbnz	r3, 801015c <__sflush_r+0x7c>
 801015a:	6560      	str	r0, [r4, #84]	; 0x54
 801015c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801015e:	602f      	str	r7, [r5, #0]
 8010160:	2900      	cmp	r1, #0
 8010162:	d0ca      	beq.n	80100fa <__sflush_r+0x1a>
 8010164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010168:	4299      	cmp	r1, r3
 801016a:	d002      	beq.n	8010172 <__sflush_r+0x92>
 801016c:	4628      	mov	r0, r5
 801016e:	f7ff faab 	bl	800f6c8 <_free_r>
 8010172:	2000      	movs	r0, #0
 8010174:	6360      	str	r0, [r4, #52]	; 0x34
 8010176:	e7c1      	b.n	80100fc <__sflush_r+0x1c>
 8010178:	6a21      	ldr	r1, [r4, #32]
 801017a:	2301      	movs	r3, #1
 801017c:	4628      	mov	r0, r5
 801017e:	47b0      	blx	r6
 8010180:	1c41      	adds	r1, r0, #1
 8010182:	d1c7      	bne.n	8010114 <__sflush_r+0x34>
 8010184:	682b      	ldr	r3, [r5, #0]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d0c4      	beq.n	8010114 <__sflush_r+0x34>
 801018a:	2b1d      	cmp	r3, #29
 801018c:	d001      	beq.n	8010192 <__sflush_r+0xb2>
 801018e:	2b16      	cmp	r3, #22
 8010190:	d101      	bne.n	8010196 <__sflush_r+0xb6>
 8010192:	602f      	str	r7, [r5, #0]
 8010194:	e7b1      	b.n	80100fa <__sflush_r+0x1a>
 8010196:	89a3      	ldrh	r3, [r4, #12]
 8010198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801019c:	81a3      	strh	r3, [r4, #12]
 801019e:	e7ad      	b.n	80100fc <__sflush_r+0x1c>
 80101a0:	690f      	ldr	r7, [r1, #16]
 80101a2:	2f00      	cmp	r7, #0
 80101a4:	d0a9      	beq.n	80100fa <__sflush_r+0x1a>
 80101a6:	0793      	lsls	r3, r2, #30
 80101a8:	680e      	ldr	r6, [r1, #0]
 80101aa:	bf08      	it	eq
 80101ac:	694b      	ldreq	r3, [r1, #20]
 80101ae:	600f      	str	r7, [r1, #0]
 80101b0:	bf18      	it	ne
 80101b2:	2300      	movne	r3, #0
 80101b4:	eba6 0807 	sub.w	r8, r6, r7
 80101b8:	608b      	str	r3, [r1, #8]
 80101ba:	f1b8 0f00 	cmp.w	r8, #0
 80101be:	dd9c      	ble.n	80100fa <__sflush_r+0x1a>
 80101c0:	6a21      	ldr	r1, [r4, #32]
 80101c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80101c4:	4643      	mov	r3, r8
 80101c6:	463a      	mov	r2, r7
 80101c8:	4628      	mov	r0, r5
 80101ca:	47b0      	blx	r6
 80101cc:	2800      	cmp	r0, #0
 80101ce:	dc06      	bgt.n	80101de <__sflush_r+0xfe>
 80101d0:	89a3      	ldrh	r3, [r4, #12]
 80101d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101d6:	81a3      	strh	r3, [r4, #12]
 80101d8:	f04f 30ff 	mov.w	r0, #4294967295
 80101dc:	e78e      	b.n	80100fc <__sflush_r+0x1c>
 80101de:	4407      	add	r7, r0
 80101e0:	eba8 0800 	sub.w	r8, r8, r0
 80101e4:	e7e9      	b.n	80101ba <__sflush_r+0xda>
 80101e6:	bf00      	nop
 80101e8:	20400001 	.word	0x20400001

080101ec <_fflush_r>:
 80101ec:	b538      	push	{r3, r4, r5, lr}
 80101ee:	690b      	ldr	r3, [r1, #16]
 80101f0:	4605      	mov	r5, r0
 80101f2:	460c      	mov	r4, r1
 80101f4:	b913      	cbnz	r3, 80101fc <_fflush_r+0x10>
 80101f6:	2500      	movs	r5, #0
 80101f8:	4628      	mov	r0, r5
 80101fa:	bd38      	pop	{r3, r4, r5, pc}
 80101fc:	b118      	cbz	r0, 8010206 <_fflush_r+0x1a>
 80101fe:	6983      	ldr	r3, [r0, #24]
 8010200:	b90b      	cbnz	r3, 8010206 <_fflush_r+0x1a>
 8010202:	f7ff f9a7 	bl	800f554 <__sinit>
 8010206:	4b14      	ldr	r3, [pc, #80]	; (8010258 <_fflush_r+0x6c>)
 8010208:	429c      	cmp	r4, r3
 801020a:	d11b      	bne.n	8010244 <_fflush_r+0x58>
 801020c:	686c      	ldr	r4, [r5, #4]
 801020e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d0ef      	beq.n	80101f6 <_fflush_r+0xa>
 8010216:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010218:	07d0      	lsls	r0, r2, #31
 801021a:	d404      	bmi.n	8010226 <_fflush_r+0x3a>
 801021c:	0599      	lsls	r1, r3, #22
 801021e:	d402      	bmi.n	8010226 <_fflush_r+0x3a>
 8010220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010222:	f7ff fa47 	bl	800f6b4 <__retarget_lock_acquire_recursive>
 8010226:	4628      	mov	r0, r5
 8010228:	4621      	mov	r1, r4
 801022a:	f7ff ff59 	bl	80100e0 <__sflush_r>
 801022e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010230:	07da      	lsls	r2, r3, #31
 8010232:	4605      	mov	r5, r0
 8010234:	d4e0      	bmi.n	80101f8 <_fflush_r+0xc>
 8010236:	89a3      	ldrh	r3, [r4, #12]
 8010238:	059b      	lsls	r3, r3, #22
 801023a:	d4dd      	bmi.n	80101f8 <_fflush_r+0xc>
 801023c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801023e:	f7ff fa3a 	bl	800f6b6 <__retarget_lock_release_recursive>
 8010242:	e7d9      	b.n	80101f8 <_fflush_r+0xc>
 8010244:	4b05      	ldr	r3, [pc, #20]	; (801025c <_fflush_r+0x70>)
 8010246:	429c      	cmp	r4, r3
 8010248:	d101      	bne.n	801024e <_fflush_r+0x62>
 801024a:	68ac      	ldr	r4, [r5, #8]
 801024c:	e7df      	b.n	801020e <_fflush_r+0x22>
 801024e:	4b04      	ldr	r3, [pc, #16]	; (8010260 <_fflush_r+0x74>)
 8010250:	429c      	cmp	r4, r3
 8010252:	bf08      	it	eq
 8010254:	68ec      	ldreq	r4, [r5, #12]
 8010256:	e7da      	b.n	801020e <_fflush_r+0x22>
 8010258:	080130a8 	.word	0x080130a8
 801025c:	080130c8 	.word	0x080130c8
 8010260:	08013088 	.word	0x08013088

08010264 <_lseek_r>:
 8010264:	b538      	push	{r3, r4, r5, lr}
 8010266:	4d07      	ldr	r5, [pc, #28]	; (8010284 <_lseek_r+0x20>)
 8010268:	4604      	mov	r4, r0
 801026a:	4608      	mov	r0, r1
 801026c:	4611      	mov	r1, r2
 801026e:	2200      	movs	r2, #0
 8010270:	602a      	str	r2, [r5, #0]
 8010272:	461a      	mov	r2, r3
 8010274:	f7f0 fdd6 	bl	8000e24 <_lseek>
 8010278:	1c43      	adds	r3, r0, #1
 801027a:	d102      	bne.n	8010282 <_lseek_r+0x1e>
 801027c:	682b      	ldr	r3, [r5, #0]
 801027e:	b103      	cbz	r3, 8010282 <_lseek_r+0x1e>
 8010280:	6023      	str	r3, [r4, #0]
 8010282:	bd38      	pop	{r3, r4, r5, pc}
 8010284:	20008b48 	.word	0x20008b48

08010288 <__swhatbuf_r>:
 8010288:	b570      	push	{r4, r5, r6, lr}
 801028a:	460e      	mov	r6, r1
 801028c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010290:	2900      	cmp	r1, #0
 8010292:	b096      	sub	sp, #88	; 0x58
 8010294:	4614      	mov	r4, r2
 8010296:	461d      	mov	r5, r3
 8010298:	da08      	bge.n	80102ac <__swhatbuf_r+0x24>
 801029a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801029e:	2200      	movs	r2, #0
 80102a0:	602a      	str	r2, [r5, #0]
 80102a2:	061a      	lsls	r2, r3, #24
 80102a4:	d410      	bmi.n	80102c8 <__swhatbuf_r+0x40>
 80102a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102aa:	e00e      	b.n	80102ca <__swhatbuf_r+0x42>
 80102ac:	466a      	mov	r2, sp
 80102ae:	f000 f8b3 	bl	8010418 <_fstat_r>
 80102b2:	2800      	cmp	r0, #0
 80102b4:	dbf1      	blt.n	801029a <__swhatbuf_r+0x12>
 80102b6:	9a01      	ldr	r2, [sp, #4]
 80102b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80102bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80102c0:	425a      	negs	r2, r3
 80102c2:	415a      	adcs	r2, r3
 80102c4:	602a      	str	r2, [r5, #0]
 80102c6:	e7ee      	b.n	80102a6 <__swhatbuf_r+0x1e>
 80102c8:	2340      	movs	r3, #64	; 0x40
 80102ca:	2000      	movs	r0, #0
 80102cc:	6023      	str	r3, [r4, #0]
 80102ce:	b016      	add	sp, #88	; 0x58
 80102d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080102d4 <__smakebuf_r>:
 80102d4:	898b      	ldrh	r3, [r1, #12]
 80102d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80102d8:	079d      	lsls	r5, r3, #30
 80102da:	4606      	mov	r6, r0
 80102dc:	460c      	mov	r4, r1
 80102de:	d507      	bpl.n	80102f0 <__smakebuf_r+0x1c>
 80102e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80102e4:	6023      	str	r3, [r4, #0]
 80102e6:	6123      	str	r3, [r4, #16]
 80102e8:	2301      	movs	r3, #1
 80102ea:	6163      	str	r3, [r4, #20]
 80102ec:	b002      	add	sp, #8
 80102ee:	bd70      	pop	{r4, r5, r6, pc}
 80102f0:	ab01      	add	r3, sp, #4
 80102f2:	466a      	mov	r2, sp
 80102f4:	f7ff ffc8 	bl	8010288 <__swhatbuf_r>
 80102f8:	9900      	ldr	r1, [sp, #0]
 80102fa:	4605      	mov	r5, r0
 80102fc:	4630      	mov	r0, r6
 80102fe:	f7ff fa4f 	bl	800f7a0 <_malloc_r>
 8010302:	b948      	cbnz	r0, 8010318 <__smakebuf_r+0x44>
 8010304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010308:	059a      	lsls	r2, r3, #22
 801030a:	d4ef      	bmi.n	80102ec <__smakebuf_r+0x18>
 801030c:	f023 0303 	bic.w	r3, r3, #3
 8010310:	f043 0302 	orr.w	r3, r3, #2
 8010314:	81a3      	strh	r3, [r4, #12]
 8010316:	e7e3      	b.n	80102e0 <__smakebuf_r+0xc>
 8010318:	4b0d      	ldr	r3, [pc, #52]	; (8010350 <__smakebuf_r+0x7c>)
 801031a:	62b3      	str	r3, [r6, #40]	; 0x28
 801031c:	89a3      	ldrh	r3, [r4, #12]
 801031e:	6020      	str	r0, [r4, #0]
 8010320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010324:	81a3      	strh	r3, [r4, #12]
 8010326:	9b00      	ldr	r3, [sp, #0]
 8010328:	6163      	str	r3, [r4, #20]
 801032a:	9b01      	ldr	r3, [sp, #4]
 801032c:	6120      	str	r0, [r4, #16]
 801032e:	b15b      	cbz	r3, 8010348 <__smakebuf_r+0x74>
 8010330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010334:	4630      	mov	r0, r6
 8010336:	f000 f881 	bl	801043c <_isatty_r>
 801033a:	b128      	cbz	r0, 8010348 <__smakebuf_r+0x74>
 801033c:	89a3      	ldrh	r3, [r4, #12]
 801033e:	f023 0303 	bic.w	r3, r3, #3
 8010342:	f043 0301 	orr.w	r3, r3, #1
 8010346:	81a3      	strh	r3, [r4, #12]
 8010348:	89a0      	ldrh	r0, [r4, #12]
 801034a:	4305      	orrs	r5, r0
 801034c:	81a5      	strh	r5, [r4, #12]
 801034e:	e7cd      	b.n	80102ec <__smakebuf_r+0x18>
 8010350:	0800f4ed 	.word	0x0800f4ed

08010354 <__malloc_lock>:
 8010354:	4801      	ldr	r0, [pc, #4]	; (801035c <__malloc_lock+0x8>)
 8010356:	f7ff b9ad 	b.w	800f6b4 <__retarget_lock_acquire_recursive>
 801035a:	bf00      	nop
 801035c:	20008b4c 	.word	0x20008b4c

08010360 <__malloc_unlock>:
 8010360:	4801      	ldr	r0, [pc, #4]	; (8010368 <__malloc_unlock+0x8>)
 8010362:	f7ff b9a8 	b.w	800f6b6 <__retarget_lock_release_recursive>
 8010366:	bf00      	nop
 8010368:	20008b4c 	.word	0x20008b4c

0801036c <_read_r>:
 801036c:	b538      	push	{r3, r4, r5, lr}
 801036e:	4d07      	ldr	r5, [pc, #28]	; (801038c <_read_r+0x20>)
 8010370:	4604      	mov	r4, r0
 8010372:	4608      	mov	r0, r1
 8010374:	4611      	mov	r1, r2
 8010376:	2200      	movs	r2, #0
 8010378:	602a      	str	r2, [r5, #0]
 801037a:	461a      	mov	r2, r3
 801037c:	f7f0 fcf2 	bl	8000d64 <_read>
 8010380:	1c43      	adds	r3, r0, #1
 8010382:	d102      	bne.n	801038a <_read_r+0x1e>
 8010384:	682b      	ldr	r3, [r5, #0]
 8010386:	b103      	cbz	r3, 801038a <_read_r+0x1e>
 8010388:	6023      	str	r3, [r4, #0]
 801038a:	bd38      	pop	{r3, r4, r5, pc}
 801038c:	20008b48 	.word	0x20008b48

08010390 <_raise_r>:
 8010390:	291f      	cmp	r1, #31
 8010392:	b538      	push	{r3, r4, r5, lr}
 8010394:	4604      	mov	r4, r0
 8010396:	460d      	mov	r5, r1
 8010398:	d904      	bls.n	80103a4 <_raise_r+0x14>
 801039a:	2316      	movs	r3, #22
 801039c:	6003      	str	r3, [r0, #0]
 801039e:	f04f 30ff 	mov.w	r0, #4294967295
 80103a2:	bd38      	pop	{r3, r4, r5, pc}
 80103a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80103a6:	b112      	cbz	r2, 80103ae <_raise_r+0x1e>
 80103a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80103ac:	b94b      	cbnz	r3, 80103c2 <_raise_r+0x32>
 80103ae:	4620      	mov	r0, r4
 80103b0:	f000 f830 	bl	8010414 <_getpid_r>
 80103b4:	462a      	mov	r2, r5
 80103b6:	4601      	mov	r1, r0
 80103b8:	4620      	mov	r0, r4
 80103ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103be:	f000 b817 	b.w	80103f0 <_kill_r>
 80103c2:	2b01      	cmp	r3, #1
 80103c4:	d00a      	beq.n	80103dc <_raise_r+0x4c>
 80103c6:	1c59      	adds	r1, r3, #1
 80103c8:	d103      	bne.n	80103d2 <_raise_r+0x42>
 80103ca:	2316      	movs	r3, #22
 80103cc:	6003      	str	r3, [r0, #0]
 80103ce:	2001      	movs	r0, #1
 80103d0:	e7e7      	b.n	80103a2 <_raise_r+0x12>
 80103d2:	2400      	movs	r4, #0
 80103d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80103d8:	4628      	mov	r0, r5
 80103da:	4798      	blx	r3
 80103dc:	2000      	movs	r0, #0
 80103de:	e7e0      	b.n	80103a2 <_raise_r+0x12>

080103e0 <raise>:
 80103e0:	4b02      	ldr	r3, [pc, #8]	; (80103ec <raise+0xc>)
 80103e2:	4601      	mov	r1, r0
 80103e4:	6818      	ldr	r0, [r3, #0]
 80103e6:	f7ff bfd3 	b.w	8010390 <_raise_r>
 80103ea:	bf00      	nop
 80103ec:	20000014 	.word	0x20000014

080103f0 <_kill_r>:
 80103f0:	b538      	push	{r3, r4, r5, lr}
 80103f2:	4d07      	ldr	r5, [pc, #28]	; (8010410 <_kill_r+0x20>)
 80103f4:	2300      	movs	r3, #0
 80103f6:	4604      	mov	r4, r0
 80103f8:	4608      	mov	r0, r1
 80103fa:	4611      	mov	r1, r2
 80103fc:	602b      	str	r3, [r5, #0]
 80103fe:	f7f0 fc95 	bl	8000d2c <_kill>
 8010402:	1c43      	adds	r3, r0, #1
 8010404:	d102      	bne.n	801040c <_kill_r+0x1c>
 8010406:	682b      	ldr	r3, [r5, #0]
 8010408:	b103      	cbz	r3, 801040c <_kill_r+0x1c>
 801040a:	6023      	str	r3, [r4, #0]
 801040c:	bd38      	pop	{r3, r4, r5, pc}
 801040e:	bf00      	nop
 8010410:	20008b48 	.word	0x20008b48

08010414 <_getpid_r>:
 8010414:	f7f0 bc82 	b.w	8000d1c <_getpid>

08010418 <_fstat_r>:
 8010418:	b538      	push	{r3, r4, r5, lr}
 801041a:	4d07      	ldr	r5, [pc, #28]	; (8010438 <_fstat_r+0x20>)
 801041c:	2300      	movs	r3, #0
 801041e:	4604      	mov	r4, r0
 8010420:	4608      	mov	r0, r1
 8010422:	4611      	mov	r1, r2
 8010424:	602b      	str	r3, [r5, #0]
 8010426:	f7f0 fce2 	bl	8000dee <_fstat>
 801042a:	1c43      	adds	r3, r0, #1
 801042c:	d102      	bne.n	8010434 <_fstat_r+0x1c>
 801042e:	682b      	ldr	r3, [r5, #0]
 8010430:	b103      	cbz	r3, 8010434 <_fstat_r+0x1c>
 8010432:	6023      	str	r3, [r4, #0]
 8010434:	bd38      	pop	{r3, r4, r5, pc}
 8010436:	bf00      	nop
 8010438:	20008b48 	.word	0x20008b48

0801043c <_isatty_r>:
 801043c:	b538      	push	{r3, r4, r5, lr}
 801043e:	4d06      	ldr	r5, [pc, #24]	; (8010458 <_isatty_r+0x1c>)
 8010440:	2300      	movs	r3, #0
 8010442:	4604      	mov	r4, r0
 8010444:	4608      	mov	r0, r1
 8010446:	602b      	str	r3, [r5, #0]
 8010448:	f7f0 fce1 	bl	8000e0e <_isatty>
 801044c:	1c43      	adds	r3, r0, #1
 801044e:	d102      	bne.n	8010456 <_isatty_r+0x1a>
 8010450:	682b      	ldr	r3, [r5, #0]
 8010452:	b103      	cbz	r3, 8010456 <_isatty_r+0x1a>
 8010454:	6023      	str	r3, [r4, #0]
 8010456:	bd38      	pop	{r3, r4, r5, pc}
 8010458:	20008b48 	.word	0x20008b48

0801045c <_init>:
 801045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801045e:	bf00      	nop
 8010460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010462:	bc08      	pop	{r3}
 8010464:	469e      	mov	lr, r3
 8010466:	4770      	bx	lr

08010468 <_fini>:
 8010468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801046a:	bf00      	nop
 801046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801046e:	bc08      	pop	{r3}
 8010470:	469e      	mov	lr, r3
 8010472:	4770      	bx	lr
